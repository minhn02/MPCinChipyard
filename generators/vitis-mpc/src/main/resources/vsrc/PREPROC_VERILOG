// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_Adyn_data_ROM_AUTO_1R (
address0, ce0, q0, reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 8;
parameter AddressRange = 144;

input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_Adyn_data_ROM_AUTO_1R.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[address0];
    end
end



endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_AmBKt_data_ROM_AUTO_1R (
address0, ce0, q0, reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 8;
parameter AddressRange = 144;

input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_AmBKt_data_ROM_AUTO_1R.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[address0];
    end
end



endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_backward_pass_1_Pipeline_VITIS_LOOP_86_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul_i,
        p_col_p1_address0,
        p_col_p1_ce0,
        p_col_p1_we0,
        p_col_p1_d0,
        p_col_p1_address1,
        p_col_p1_ce1,
        p_col_p1_we1,
        p_col_p1_d1,
        p_1_address0,
        p_1_ce0,
        p_1_q0,
        p_1_address1,
        p_1_ce1,
        p_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] mul_i;
output  [3:0] p_col_p1_address0;
output   p_col_p1_ce0;
output   p_col_p1_we0;
output  [31:0] p_col_p1_d0;
output  [3:0] p_col_p1_address1;
output   p_col_p1_ce1;
output   p_col_p1_we1;
output  [31:0] p_col_p1_d1;
output  [6:0] p_1_address0;
output   p_1_ce0;
input  [31:0] p_1_q0;
output  [6:0] p_1_address1;
output   p_1_ce1;
input  [31:0] p_1_q1;

reg ap_idle;
reg[3:0] p_col_p1_address0;
reg p_col_p1_ce0;
reg p_col_p1_we0;
reg[3:0] p_col_p1_address1;
reg p_col_p1_ce1;
reg p_col_p1_we1;
reg[6:0] p_1_address0;
reg p_1_ce0;
reg[6:0] p_1_address1;
reg p_1_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_142_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_57_reg_262;
reg   [0:0] icmp_ln86_reg_269;
wire   [3:0] or_ln86_fu_163_p2;
reg   [3:0] or_ln86_reg_278;
wire   [3:0] or_ln86_18_fu_203_p2;
reg   [3:0] or_ln86_18_reg_288;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] or_ln86_19_fu_222_p2;
reg   [3:0] or_ln86_19_reg_298;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln88_fu_158_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln88_83_fu_179_p1;
wire   [63:0] i_66_cast4_fu_195_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln88_81_fu_199_p1;
wire   [63:0] zext_ln88_86_fu_217_p1;
wire   [63:0] zext_ln88_89_fu_236_p1;
wire   [63:0] zext_ln88_84_fu_241_p1;
wire   [63:0] zext_ln88_87_fu_245_p1;
reg   [3:0] i_fu_40;
wire   [3:0] add_ln86_fu_184_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_57;
wire   [6:0] i_66_cast2_fu_148_p1;
wire   [6:0] add_ln88_fu_152_p2;
wire   [6:0] zext_ln88_82_fu_169_p1;
wire   [6:0] add_ln88_26_fu_173_p2;
wire   [6:0] zext_ln88_85_fu_208_p1;
wire   [6:0] add_ln88_27_fu_212_p2;
wire   [6:0] zext_ln88_88_fu_227_p1;
wire   [6:0] add_ln88_28_fu_231_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln86_fu_142_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_40 <= add_ln86_fu_184_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_57_reg_262 <= ap_sig_allocacmp_i_57;
        icmp_ln86_reg_269 <= icmp_ln86_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln86_18_reg_288[0] <= or_ln86_18_fu_203_p2[0];
or_ln86_18_reg_288[3 : 2] <= or_ln86_18_fu_203_p2[3 : 2];
        or_ln86_19_reg_298[3 : 2] <= or_ln86_19_fu_222_p2[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_142_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln86_reg_278[3 : 1] <= or_ln86_fu_163_p2[3 : 1];
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_57 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_57 = i_fu_40;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_1_address0 = zext_ln88_89_fu_236_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_1_address0 = zext_ln88_83_fu_179_p1;
        end else begin
            p_1_address0 = 'bx;
        end
    end else begin
        p_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_1_address1 = zext_ln88_86_fu_217_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_1_address1 = zext_ln88_fu_158_p1;
        end else begin
            p_1_address1 = 'bx;
        end
    end else begin
        p_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_1_ce0 = 1'b1;
    end else begin
        p_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_1_ce1 = 1'b1;
    end else begin
        p_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_col_p1_address0 = zext_ln88_87_fu_245_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_col_p1_address0 = zext_ln88_81_fu_199_p1;
    end else begin
        p_col_p1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_col_p1_address1 = zext_ln88_84_fu_241_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_col_p1_address1 = i_66_cast4_fu_195_p1;
    end else begin
        p_col_p1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_col_p1_ce0 = 1'b1;
    end else begin
        p_col_p1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_col_p1_ce1 = 1'b1;
    end else begin
        p_col_p1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_col_p1_we0 = 1'b1;
    end else begin
        p_col_p1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_col_p1_we1 = 1'b1;
    end else begin
        p_col_p1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln86_fu_184_p2 = (ap_sig_allocacmp_i_57 + 4'd4);

assign add_ln88_26_fu_173_p2 = (zext_ln88_82_fu_169_p1 + mul_i);

assign add_ln88_27_fu_212_p2 = (zext_ln88_85_fu_208_p1 + mul_i);

assign add_ln88_28_fu_231_p2 = (zext_ln88_88_fu_227_p1 + mul_i);

assign add_ln88_fu_152_p2 = (i_66_cast2_fu_148_p1 + mul_i);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_66_cast2_fu_148_p1 = ap_sig_allocacmp_i_57;

assign i_66_cast4_fu_195_p1 = i_57_reg_262;

assign icmp_ln86_fu_142_p2 = ((ap_sig_allocacmp_i_57 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln86_18_fu_203_p2 = (i_57_reg_262 | 4'd2);

assign or_ln86_19_fu_222_p2 = (i_57_reg_262 | 4'd3);

assign or_ln86_fu_163_p2 = (ap_sig_allocacmp_i_57 | 4'd1);

assign p_col_p1_d0 = p_1_q0;

assign p_col_p1_d1 = p_1_q1;

assign zext_ln88_81_fu_199_p1 = or_ln86_reg_278;

assign zext_ln88_82_fu_169_p1 = or_ln86_fu_163_p2;

assign zext_ln88_83_fu_179_p1 = add_ln88_26_fu_173_p2;

assign zext_ln88_84_fu_241_p1 = or_ln86_18_reg_288;

assign zext_ln88_85_fu_208_p1 = or_ln86_18_fu_203_p2;

assign zext_ln88_86_fu_217_p1 = add_ln88_27_fu_212_p2;

assign zext_ln88_87_fu_245_p1 = or_ln86_19_reg_298;

assign zext_ln88_88_fu_227_p1 = or_ln86_19_fu_222_p2;

assign zext_ln88_89_fu_236_p1 = add_ln88_28_fu_231_p2;

assign zext_ln88_fu_158_p1 = add_ln88_fu_152_p2;

always @ (posedge ap_clk) begin
    or_ln86_reg_278[0] <= 1'b1;
    or_ln86_18_reg_288[1] <= 1'b1;
    or_ln86_19_reg_298[1:0] <= 2'b11;
end

endmodule //tracking_backward_pass_1_Pipeline_VITIS_LOOP_86_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_backward_pass_1_Pipeline_VITIS_LOOP_133_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_col_p1_load,
        p_col_p1_load_12,
        p_col_p1_load_13,
        p_col_p1_load_14,
        p_col_p1_load_15,
        p_col_p1_load_16,
        p_col_p1_load_17,
        p_col_p1_load_18,
        p_col_p1_load_19,
        p_col_p1_load_20,
        p_col_p1_load_21,
        p_col_p1_load_22,
        u1_0,
        u1_0_ap_vld,
        BdynT_1_address0,
        BdynT_1_ce0,
        BdynT_1_q0,
        BdynT_1_address1,
        BdynT_1_ce1,
        BdynT_1_q1,
        u1_1,
        u1_1_ap_vld,
        u1_2,
        u1_2_ap_vld,
        u1_3,
        u1_3_ap_vld,
        grp_fu_770_p_din0,
        grp_fu_770_p_din1,
        grp_fu_770_p_opcode,
        grp_fu_770_p_dout0,
        grp_fu_770_p_ce,
        grp_fu_774_p_din0,
        grp_fu_774_p_din1,
        grp_fu_774_p_opcode,
        grp_fu_774_p_dout0,
        grp_fu_774_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p_col_p1_load;
input  [31:0] p_col_p1_load_12;
input  [31:0] p_col_p1_load_13;
input  [31:0] p_col_p1_load_14;
input  [31:0] p_col_p1_load_15;
input  [31:0] p_col_p1_load_16;
input  [31:0] p_col_p1_load_17;
input  [31:0] p_col_p1_load_18;
input  [31:0] p_col_p1_load_19;
input  [31:0] p_col_p1_load_20;
input  [31:0] p_col_p1_load_21;
input  [31:0] p_col_p1_load_22;
output  [31:0] u1_0;
output   u1_0_ap_vld;
output  [5:0] BdynT_1_address0;
output   BdynT_1_ce0;
input  [31:0] BdynT_1_q0;
output  [5:0] BdynT_1_address1;
output   BdynT_1_ce1;
input  [31:0] BdynT_1_q1;
output  [31:0] u1_1;
output   u1_1_ap_vld;
output  [31:0] u1_2;
output   u1_2_ap_vld;
output  [31:0] u1_3;
output   u1_3_ap_vld;
output  [31:0] grp_fu_770_p_din0;
output  [31:0] grp_fu_770_p_din1;
output  [0:0] grp_fu_770_p_opcode;
input  [31:0] grp_fu_770_p_dout0;
output   grp_fu_770_p_ce;
output  [31:0] grp_fu_774_p_din0;
output  [31:0] grp_fu_774_p_din1;
output  [0:0] grp_fu_774_p_opcode;
input  [31:0] grp_fu_774_p_dout0;
output   grp_fu_774_p_ce;

reg ap_idle;
reg u1_0_ap_vld;
reg[5:0] BdynT_1_address0;
reg BdynT_1_ce0;
reg[5:0] BdynT_1_address1;
reg BdynT_1_ce1;
reg u1_1_ap_vld;
reg u1_2_ap_vld;
reg u1_3_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state12_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_subdone;
reg   [0:0] icmp_ln133_reg_580;
reg    ap_condition_exit_pp0_iter0_stage5;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [31:0] grp_fu_291_p2;
reg   [31:0] reg_301;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage5_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state15_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire   [0:0] icmp_ln133_fu_326_p2;
reg   [0:0] icmp_ln133_reg_580_pp0_iter1_reg;
wire   [1:0] trunc_ln134_fu_338_p1;
reg   [1:0] trunc_ln134_reg_584;
reg   [1:0] trunc_ln134_reg_584_pp0_iter1_reg;
reg   [1:0] trunc_ln134_reg_584_pp0_iter2_reg;
wire   [5:0] empty_121_fu_362_p2;
reg   [5:0] empty_121_reg_588;
wire   [31:0] grp_fu_296_p2;
reg   [31:0] mul9_i_1_reg_612;
reg   [31:0] mul9_i_2_reg_627;
reg   [31:0] mul9_i_3_reg_632;
reg   [31:0] mul9_i_5_reg_647;
reg   [31:0] mul9_i_6_reg_662;
reg   [31:0] mul9_i_7_reg_667;
reg   [31:0] mul9_i_8_reg_682;
reg   [31:0] mul9_i_9_reg_687;
reg   [31:0] mul9_i_10_reg_702;
reg   [31:0] mul9_i_s_reg_707;
reg   [31:0] mul9_i_s_reg_707_pp0_iter2_reg;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage2_subdone;
wire   [63:0] zext_ln136_fu_368_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln136_41_fu_379_p1;
wire   [63:0] zext_ln136_42_fu_394_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln136_43_fu_404_p1;
wire   [63:0] zext_ln136_44_fu_414_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln136_45_fu_424_p1;
wire   [63:0] zext_ln136_46_fu_434_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln136_47_fu_444_p1;
wire   [63:0] zext_ln136_48_fu_454_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln136_49_fu_464_p1;
wire   [63:0] zext_ln136_50_fu_474_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln136_51_fu_484_p1;
reg   [2:0] i_fu_98;
wire   [2:0] add_ln133_fu_332_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_59;
reg   [31:0] grp_fu_279_p0;
reg   [31:0] grp_fu_279_p1;
reg   [31:0] grp_fu_285_p0;
reg   [31:0] grp_fu_285_p1;
reg   [31:0] grp_fu_291_p1;
reg   [31:0] grp_fu_296_p1;
wire   [3:0] p_shl4_fu_350_p3;
wire   [5:0] p_shl3_fu_342_p3;
wire   [5:0] p_shl4_cast_fu_358_p1;
wire   [5:0] or_ln136_fu_373_p2;
wire   [5:0] or_ln136_11_fu_389_p2;
wire   [5:0] or_ln136_12_fu_399_p2;
wire   [5:0] add_ln136_fu_409_p2;
wire   [5:0] add_ln136_5_fu_419_p2;
wire   [5:0] add_ln136_6_fu_429_p2;
wire   [5:0] add_ln136_7_fu_439_p2;
wire   [5:0] add_ln136_8_fu_449_p2;
wire   [5:0] add_ln136_9_fu_459_p2;
wire   [5:0] add_ln136_10_fu_469_p2;
wire   [5:0] add_ln136_11_fu_479_p2;
wire    ap_block_pp0_stage2_00001;
wire    ap_block_pp0_stage3_00001;
wire    ap_block_pp0_stage4_00001;
wire    ap_block_pp0_stage5_00001;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage1_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage2;
reg    ap_idle_pp0_0to0;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U234(
    .din0(BdynT_1_q1),
    .din1(grp_fu_291_p1),
    .dout(grp_fu_291_p2)
);

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U235(
    .din0(BdynT_1_q0),
    .din1(grp_fu_296_p1),
    .dout(grp_fu_296_p2)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage5),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage5)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln133_fu_326_p2 == 1'd0))) begin
            i_fu_98 <= add_ln133_fu_332_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_98 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln133_fu_326_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_121_reg_588[5 : 2] <= empty_121_fu_362_p2[5 : 2];
        trunc_ln134_reg_584 <= trunc_ln134_fu_338_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln133_reg_580 <= icmp_ln133_fu_326_p2;
        icmp_ln133_reg_580_pp0_iter1_reg <= icmp_ln133_reg_580;
        mul9_i_s_reg_707_pp0_iter2_reg <= mul9_i_s_reg_707;
        trunc_ln134_reg_584_pp0_iter1_reg <= trunc_ln134_reg_584;
        trunc_ln134_reg_584_pp0_iter2_reg <= trunc_ln134_reg_584_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul9_i_10_reg_702 <= grp_fu_291_p2;
        mul9_i_s_reg_707 <= grp_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_580 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul9_i_1_reg_612 <= grp_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_580 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul9_i_2_reg_627 <= grp_fu_291_p2;
        mul9_i_3_reg_632 <= grp_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_580 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul9_i_5_reg_647 <= grp_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_580 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mul9_i_6_reg_662 <= grp_fu_291_p2;
        mul9_i_7_reg_667 <= grp_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_580 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mul9_i_8_reg_682 <= grp_fu_291_p2;
        mul9_i_9_reg_687 <= grp_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln133_reg_580 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln133_reg_580 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_301 <= grp_fu_291_p2;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            BdynT_1_address0 = zext_ln136_51_fu_484_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            BdynT_1_address0 = zext_ln136_49_fu_464_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            BdynT_1_address0 = zext_ln136_47_fu_444_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            BdynT_1_address0 = zext_ln136_45_fu_424_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            BdynT_1_address0 = zext_ln136_43_fu_404_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            BdynT_1_address0 = zext_ln136_41_fu_379_p1;
        end else begin
            BdynT_1_address0 = 'bx;
        end
    end else begin
        BdynT_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            BdynT_1_address1 = zext_ln136_50_fu_474_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            BdynT_1_address1 = zext_ln136_48_fu_454_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            BdynT_1_address1 = zext_ln136_46_fu_434_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            BdynT_1_address1 = zext_ln136_44_fu_414_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            BdynT_1_address1 = zext_ln136_42_fu_394_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            BdynT_1_address1 = zext_ln136_fu_368_p1;
        end else begin
            BdynT_1_address1 = 'bx;
        end
    end else begin
        BdynT_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        BdynT_1_ce0 = 1'b1;
    end else begin
        BdynT_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        BdynT_1_ce1 = 1'b1;
    end else begin
        BdynT_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln133_reg_580 == 1'd1) & (1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln133_reg_580_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter1_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_59 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_59 = i_fu_98;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_279_p0 = grp_fu_770_p_dout0;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_279_p0 = reg_301;
    end else begin
        grp_fu_279_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_279_p1 = mul9_i_5_reg_647;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_279_p1 = reg_301;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_279_p1 = mul9_i_3_reg_632;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_279_p1 = mul9_i_2_reg_627;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_279_p1 = mul9_i_1_reg_612;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_279_p1 = 32'd0;
    end else begin
        grp_fu_279_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_285_p0 = grp_fu_774_p_dout0;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_285_p0 = grp_fu_770_p_dout0;
    end else begin
        grp_fu_285_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_285_p1 = mul9_i_s_reg_707_pp0_iter2_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_285_p1 = mul9_i_10_reg_702;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_285_p1 = mul9_i_9_reg_687;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_285_p1 = mul9_i_8_reg_682;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_285_p1 = mul9_i_7_reg_667;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_285_p1 = mul9_i_6_reg_662;
    end else begin
        grp_fu_285_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_291_p1 = p_col_p1_load_21;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_291_p1 = p_col_p1_load_19;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_291_p1 = p_col_p1_load_17;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_291_p1 = p_col_p1_load_15;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_291_p1 = p_col_p1_load_13;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_291_p1 = p_col_p1_load;
    end else begin
        grp_fu_291_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_296_p1 = p_col_p1_load_22;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_296_p1 = p_col_p1_load_20;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_296_p1 = p_col_p1_load_18;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_296_p1 = p_col_p1_load_16;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_296_p1 = p_col_p1_load_14;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_296_p1 = p_col_p1_load_12;
    end else begin
        grp_fu_296_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln134_reg_584_pp0_iter2_reg == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        u1_0_ap_vld = 1'b1;
    end else begin
        u1_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln134_reg_584_pp0_iter2_reg == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        u1_1_ap_vld = 1'b1;
    end else begin
        u1_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln134_reg_584_pp0_iter2_reg == 2'd2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        u1_2_ap_vld = 1'b1;
    end else begin
        u1_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln134_reg_584_pp0_iter2_reg == 2'd3) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        u1_3_ap_vld = 1'b1;
    end else begin
        u1_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln133_fu_332_p2 = (ap_sig_allocacmp_i_59 + 3'd1);

assign add_ln136_10_fu_469_p2 = (empty_121_reg_588 + 6'd10);

assign add_ln136_11_fu_479_p2 = (empty_121_reg_588 + 6'd11);

assign add_ln136_5_fu_419_p2 = (empty_121_reg_588 + 6'd5);

assign add_ln136_6_fu_429_p2 = (empty_121_reg_588 + 6'd6);

assign add_ln136_7_fu_439_p2 = (empty_121_reg_588 + 6'd7);

assign add_ln136_8_fu_449_p2 = (empty_121_reg_588 + 6'd8);

assign add_ln136_9_fu_459_p2 = (empty_121_reg_588 + 6'd9);

assign add_ln136_fu_409_p2 = (empty_121_reg_588 + 6'd4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage5;

assign empty_121_fu_362_p2 = (p_shl3_fu_342_p3 - p_shl4_cast_fu_358_p1);

assign grp_fu_770_p_ce = 1'b1;

assign grp_fu_770_p_din0 = grp_fu_279_p0;

assign grp_fu_770_p_din1 = grp_fu_279_p1;

assign grp_fu_770_p_opcode = 2'd0;

assign grp_fu_774_p_ce = 1'b1;

assign grp_fu_774_p_din0 = grp_fu_285_p0;

assign grp_fu_774_p_din1 = grp_fu_285_p1;

assign grp_fu_774_p_opcode = 2'd0;

assign icmp_ln133_fu_326_p2 = ((ap_sig_allocacmp_i_59 == 3'd4) ? 1'b1 : 1'b0);

assign or_ln136_11_fu_389_p2 = (empty_121_reg_588 | 6'd2);

assign or_ln136_12_fu_399_p2 = (empty_121_reg_588 | 6'd3);

assign or_ln136_fu_373_p2 = (empty_121_fu_362_p2 | 6'd1);

assign p_shl3_fu_342_p3 = {{trunc_ln134_fu_338_p1}, {4'd0}};

assign p_shl4_cast_fu_358_p1 = p_shl4_fu_350_p3;

assign p_shl4_fu_350_p3 = {{trunc_ln134_fu_338_p1}, {2'd0}};

assign trunc_ln134_fu_338_p1 = ap_sig_allocacmp_i_59[1:0];

assign u1_0 = grp_fu_774_p_dout0;

assign u1_1 = grp_fu_774_p_dout0;

assign u1_2 = grp_fu_774_p_dout0;

assign u1_3 = grp_fu_774_p_dout0;

assign zext_ln136_41_fu_379_p1 = or_ln136_fu_373_p2;

assign zext_ln136_42_fu_394_p1 = or_ln136_11_fu_389_p2;

assign zext_ln136_43_fu_404_p1 = or_ln136_12_fu_399_p2;

assign zext_ln136_44_fu_414_p1 = add_ln136_fu_409_p2;

assign zext_ln136_45_fu_424_p1 = add_ln136_5_fu_419_p2;

assign zext_ln136_46_fu_434_p1 = add_ln136_6_fu_429_p2;

assign zext_ln136_47_fu_444_p1 = add_ln136_7_fu_439_p2;

assign zext_ln136_48_fu_454_p1 = add_ln136_8_fu_449_p2;

assign zext_ln136_49_fu_464_p1 = add_ln136_9_fu_459_p2;

assign zext_ln136_50_fu_474_p1 = add_ln136_10_fu_469_p2;

assign zext_ln136_51_fu_484_p1 = add_ln136_11_fu_479_p2;

assign zext_ln136_fu_368_p1 = empty_121_fu_362_p2;

always @ (posedge ap_clk) begin
    empty_121_reg_588[1:0] <= 2'b00;
end

endmodule //tracking_backward_pass_1_Pipeline_VITIS_LOOP_133_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_backward_pass_1_Pipeline_VITIS_LOOP_133_131 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_col_3,
        d_col_2,
        d_col_1,
        d_col_0,
        u2_0_load,
        u2_1_load,
        u2_2_load,
        u2_3_load,
        d_col_3_0_out,
        d_col_3_0_out_ap_vld,
        d_col_2_0_out,
        d_col_2_0_out_ap_vld,
        d_col_1_0_out,
        d_col_1_0_out_ap_vld,
        d_col_0_0_out,
        d_col_0_0_out_ap_vld,
        Quu_inv_1_address0,
        Quu_inv_1_ce0,
        Quu_inv_1_q0,
        Quu_inv_1_address1,
        Quu_inv_1_ce1,
        Quu_inv_1_q1,
        grp_fu_770_p_din0,
        grp_fu_770_p_din1,
        grp_fu_770_p_opcode,
        grp_fu_770_p_dout0,
        grp_fu_770_p_ce,
        grp_fu_774_p_din0,
        grp_fu_774_p_din1,
        grp_fu_774_p_opcode,
        grp_fu_774_p_dout0,
        grp_fu_774_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] d_col_3;
input  [31:0] d_col_2;
input  [31:0] d_col_1;
input  [31:0] d_col_0;
input  [31:0] u2_0_load;
input  [31:0] u2_1_load;
input  [31:0] u2_2_load;
input  [31:0] u2_3_load;
output  [31:0] d_col_3_0_out;
output   d_col_3_0_out_ap_vld;
output  [31:0] d_col_2_0_out;
output   d_col_2_0_out_ap_vld;
output  [31:0] d_col_1_0_out;
output   d_col_1_0_out_ap_vld;
output  [31:0] d_col_0_0_out;
output   d_col_0_0_out_ap_vld;
output  [3:0] Quu_inv_1_address0;
output   Quu_inv_1_ce0;
input  [31:0] Quu_inv_1_q0;
output  [3:0] Quu_inv_1_address1;
output   Quu_inv_1_ce1;
input  [31:0] Quu_inv_1_q1;
output  [31:0] grp_fu_770_p_din0;
output  [31:0] grp_fu_770_p_din1;
output  [0:0] grp_fu_770_p_opcode;
input  [31:0] grp_fu_770_p_dout0;
output   grp_fu_770_p_ce;
output  [31:0] grp_fu_774_p_din0;
output  [31:0] grp_fu_774_p_din1;
output  [0:0] grp_fu_774_p_opcode;
input  [31:0] grp_fu_774_p_dout0;
output   grp_fu_774_p_ce;

reg ap_idle;
reg d_col_3_0_out_ap_vld;
reg d_col_2_0_out_ap_vld;
reg d_col_1_0_out_ap_vld;
reg d_col_0_0_out_ap_vld;
reg[3:0] Quu_inv_1_address0;
reg Quu_inv_1_ce0;
reg[3:0] Quu_inv_1_address1;
reg Quu_inv_1_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln133_reg_421;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln133_fu_265_p2;
reg   [0:0] icmp_ln133_reg_421_pp0_iter1_reg;
wire   [1:0] trunc_ln134_fu_277_p1;
reg   [1:0] trunc_ln134_reg_425;
reg   [1:0] trunc_ln134_reg_425_pp0_iter1_reg;
reg   [1:0] trunc_ln134_reg_425_pp0_iter2_reg;
wire   [3:0] tmp_s_fu_281_p3;
reg   [3:0] tmp_s_reg_429;
wire   [31:0] grp_fu_221_p2;
reg   [31:0] mul9_i3_reg_445;
wire   [31:0] grp_fu_226_p2;
reg   [31:0] mul9_i3_1_reg_450;
reg   [31:0] mul9_i3_2_reg_465;
reg   [31:0] mul9_i3_3_reg_470;
reg   [31:0] mul9_i3_3_reg_470_pp0_iter2_reg;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln136_fu_289_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln136_38_fu_300_p1;
wire   [63:0] zext_ln136_39_fu_315_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln136_40_fu_325_p1;
reg   [2:0] i_fu_72;
wire   [2:0] add_ln133_fu_271_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_58;
reg   [31:0] d_col_1_1_fu_76;
reg   [31:0] d_col_1_2_fu_80;
reg   [31:0] d_col_1_3_fu_84;
reg   [31:0] d_col_1_4_fu_88;
wire    ap_block_pp0_stage0_01001;
reg   [31:0] grp_fu_209_p0;
reg   [31:0] grp_fu_209_p1;
reg   [31:0] grp_fu_215_p0;
reg   [31:0] grp_fu_215_p1;
reg   [31:0] grp_fu_221_p1;
reg   [31:0] grp_fu_226_p1;
wire   [3:0] or_ln136_fu_294_p2;
wire   [3:0] or_ln136_9_fu_310_p2;
wire   [3:0] or_ln136_10_fu_320_p2;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage1_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage0;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to3;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U271(
    .din0(Quu_inv_1_q1),
    .din1(grp_fu_221_p1),
    .dout(grp_fu_221_p2)
);

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U272(
    .din0(Quu_inv_1_q0),
    .din1(grp_fu_226_p1),
    .dout(grp_fu_226_p2)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            d_col_1_1_fu_76 <= d_col_0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln134_reg_425_pp0_iter2_reg == 2'd0))) begin
            d_col_1_1_fu_76 <= grp_fu_774_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            d_col_1_2_fu_80 <= d_col_1;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln134_reg_425_pp0_iter2_reg == 2'd1))) begin
            d_col_1_2_fu_80 <= grp_fu_774_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            d_col_1_3_fu_84 <= d_col_2;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln134_reg_425_pp0_iter2_reg == 2'd2))) begin
            d_col_1_3_fu_84 <= grp_fu_774_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            d_col_1_4_fu_88 <= d_col_3;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln134_reg_425_pp0_iter2_reg == 2'd3))) begin
            d_col_1_4_fu_88 <= grp_fu_774_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln133_fu_265_p2 == 1'd0))) begin
            i_fu_72 <= add_ln133_fu_271_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_72 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln133_reg_421 <= icmp_ln133_fu_265_p2;
        icmp_ln133_reg_421_pp0_iter1_reg <= icmp_ln133_reg_421;
        mul9_i3_3_reg_470_pp0_iter2_reg <= mul9_i3_3_reg_470;
        trunc_ln134_reg_425_pp0_iter1_reg <= trunc_ln134_reg_425;
        trunc_ln134_reg_425_pp0_iter2_reg <= trunc_ln134_reg_425_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_421 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul9_i3_1_reg_450 <= grp_fu_226_p2;
        mul9_i3_reg_445 <= grp_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul9_i3_2_reg_465 <= grp_fu_221_p2;
        mul9_i3_3_reg_470 <= grp_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln133_fu_265_p2 == 1'd0))) begin
        tmp_s_reg_429[3 : 2] <= tmp_s_fu_281_p3[3 : 2];
        trunc_ln134_reg_425 <= trunc_ln134_fu_277_p1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            Quu_inv_1_address0 = zext_ln136_40_fu_325_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            Quu_inv_1_address0 = zext_ln136_38_fu_300_p1;
        end else begin
            Quu_inv_1_address0 = 'bx;
        end
    end else begin
        Quu_inv_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            Quu_inv_1_address1 = zext_ln136_39_fu_315_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            Quu_inv_1_address1 = zext_ln136_fu_289_p1;
        end else begin
            Quu_inv_1_address1 = 'bx;
        end
    end else begin
        Quu_inv_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        Quu_inv_1_ce0 = 1'b1;
    end else begin
        Quu_inv_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        Quu_inv_1_ce1 = 1'b1;
    end else begin
        Quu_inv_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln133_reg_421 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln133_reg_421_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_58 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_58 = i_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln133_reg_421_pp0_iter1_reg == 1'd1))) begin
        d_col_0_0_out_ap_vld = 1'b1;
    end else begin
        d_col_0_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln133_reg_421_pp0_iter1_reg == 1'd1))) begin
        d_col_1_0_out_ap_vld = 1'b1;
    end else begin
        d_col_1_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln133_reg_421_pp0_iter1_reg == 1'd1))) begin
        d_col_2_0_out_ap_vld = 1'b1;
    end else begin
        d_col_2_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln133_reg_421_pp0_iter1_reg == 1'd1))) begin
        d_col_3_0_out_ap_vld = 1'b1;
    end else begin
        d_col_3_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_209_p0 = grp_fu_770_p_dout0;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_209_p0 = mul9_i3_reg_445;
        end else begin
            grp_fu_209_p0 = 'bx;
        end
    end else begin
        grp_fu_209_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_209_p1 = mul9_i3_1_reg_450;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_209_p1 = 32'd0;
        end else begin
            grp_fu_209_p1 = 'bx;
        end
    end else begin
        grp_fu_209_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_215_p0 = grp_fu_774_p_dout0;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_215_p0 = grp_fu_770_p_dout0;
        end else begin
            grp_fu_215_p0 = 'bx;
        end
    end else begin
        grp_fu_215_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_215_p1 = mul9_i3_3_reg_470_pp0_iter2_reg;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_215_p1 = mul9_i3_2_reg_465;
        end else begin
            grp_fu_215_p1 = 'bx;
        end
    end else begin
        grp_fu_215_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_221_p1 = u2_2_load;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_221_p1 = u2_0_load;
    end else begin
        grp_fu_221_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_226_p1 = u2_3_load;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_226_p1 = u2_1_load;
    end else begin
        grp_fu_226_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln133_fu_271_p2 = (ap_sig_allocacmp_i_58 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign d_col_0_0_out = d_col_1_1_fu_76;

assign d_col_1_0_out = d_col_1_2_fu_80;

assign d_col_2_0_out = d_col_1_3_fu_84;

assign d_col_3_0_out = d_col_1_4_fu_88;

assign grp_fu_770_p_ce = 1'b1;

assign grp_fu_770_p_din0 = grp_fu_209_p0;

assign grp_fu_770_p_din1 = grp_fu_209_p1;

assign grp_fu_770_p_opcode = 2'd0;

assign grp_fu_774_p_ce = 1'b1;

assign grp_fu_774_p_din0 = grp_fu_215_p0;

assign grp_fu_774_p_din1 = grp_fu_215_p1;

assign grp_fu_774_p_opcode = 2'd0;

assign icmp_ln133_fu_265_p2 = ((ap_sig_allocacmp_i_58 == 3'd4) ? 1'b1 : 1'b0);

assign or_ln136_10_fu_320_p2 = (tmp_s_reg_429 | 4'd3);

assign or_ln136_9_fu_310_p2 = (tmp_s_reg_429 | 4'd2);

assign or_ln136_fu_294_p2 = (tmp_s_fu_281_p3 | 4'd1);

assign tmp_s_fu_281_p3 = {{trunc_ln134_fu_277_p1}, {2'd0}};

assign trunc_ln134_fu_277_p1 = ap_sig_allocacmp_i_58[1:0];

assign zext_ln136_38_fu_300_p1 = or_ln136_fu_294_p2;

assign zext_ln136_39_fu_315_p1 = or_ln136_9_fu_310_p2;

assign zext_ln136_40_fu_325_p1 = or_ln136_10_fu_320_p2;

assign zext_ln136_fu_289_p1 = tmp_s_fu_281_p3;

always @ (posedge ap_clk) begin
    tmp_s_reg_429[1:0] <= 2'b00;
end

endmodule //tracking_backward_pass_1_Pipeline_VITIS_LOOP_133_131
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_backward_pass_1_Pipeline_VITIS_LOOP_177_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_col_0,
        r_col_1,
        r_col_2,
        r_col_3,
        u1_0_load,
        u1_1_load,
        u1_2_load,
        u1_3_load,
        u2_0,
        u2_0_ap_vld,
        u2_1,
        u2_1_ap_vld,
        u2_2,
        u2_2_ap_vld,
        u2_3,
        u2_3_ap_vld,
        grp_fu_770_p_din0,
        grp_fu_770_p_din1,
        grp_fu_770_p_opcode,
        grp_fu_770_p_dout0,
        grp_fu_770_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] r_col_0;
input  [31:0] r_col_1;
input  [31:0] r_col_2;
input  [31:0] r_col_3;
input  [31:0] u1_0_load;
input  [31:0] u1_1_load;
input  [31:0] u1_2_load;
input  [31:0] u1_3_load;
output  [31:0] u2_0;
output   u2_0_ap_vld;
output  [31:0] u2_1;
output   u2_1_ap_vld;
output  [31:0] u2_2;
output   u2_2_ap_vld;
output  [31:0] u2_3;
output   u2_3_ap_vld;
output  [31:0] grp_fu_770_p_din0;
output  [31:0] grp_fu_770_p_din1;
output  [0:0] grp_fu_770_p_opcode;
input  [31:0] grp_fu_770_p_dout0;
output   grp_fu_770_p_ce;

reg ap_idle;
reg u2_0_ap_vld;
reg u2_1_ap_vld;
reg u2_2_ap_vld;
reg u2_3_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln177_fu_122_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [1:0] trunc_ln178_fu_134_p1;
reg   [1:0] trunc_ln178_reg_207;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] tmp_fu_138_p6;
wire   [31:0] tmp_s_fu_153_p6;
wire    ap_block_pp0_stage0;
reg   [2:0] j_fu_58;
wire   [2:0] add_ln177_fu_128_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_18;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U254(
    .din0(r_col_0),
    .din1(r_col_1),
    .din2(r_col_2),
    .din3(r_col_3),
    .din4(trunc_ln178_fu_134_p1),
    .dout(tmp_fu_138_p6)
);

tracking_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U255(
    .din0(u1_0_load),
    .din1(u1_1_load),
    .din2(u1_2_load),
    .din3(u1_3_load),
    .din4(trunc_ln178_fu_134_p1),
    .dout(tmp_s_fu_153_p6)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln177_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_58 <= add_ln177_fu_128_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_58 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_fu_122_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln178_reg_207 <= trunc_ln178_fu_134_p1;
    end
end

always @ (*) begin
    if (((icmp_ln177_fu_122_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_18 = 3'd0;
    end else begin
        ap_sig_allocacmp_j_18 = j_fu_58;
    end
end

always @ (*) begin
    if (((trunc_ln178_reg_207 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u2_0_ap_vld = 1'b1;
    end else begin
        u2_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln178_reg_207 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u2_1_ap_vld = 1'b1;
    end else begin
        u2_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln178_reg_207 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u2_2_ap_vld = 1'b1;
    end else begin
        u2_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln178_reg_207 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u2_3_ap_vld = 1'b1;
    end else begin
        u2_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln177_fu_128_p2 = (ap_sig_allocacmp_j_18 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_770_p_ce = 1'b1;

assign grp_fu_770_p_din0 = tmp_fu_138_p6;

assign grp_fu_770_p_din1 = tmp_s_fu_153_p6;

assign grp_fu_770_p_opcode = 2'd0;

assign icmp_ln177_fu_122_p2 = ((ap_sig_allocacmp_j_18 == 3'd4) ? 1'b1 : 1'b0);

assign trunc_ln178_fu_134_p1 = ap_sig_allocacmp_j_18[1:0];

assign u2_0 = grp_fu_770_p_dout0;

assign u2_1 = grp_fu_770_p_dout0;

assign u2_2 = grp_fu_770_p_dout0;

assign u2_3 = grp_fu_770_p_dout0;

endmodule //tracking_backward_pass_1_Pipeline_VITIS_LOOP_177_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_backward_pass_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i,
        p_1_address0,
        p_1_ce0,
        p_1_q0,
        p_1_address1,
        p_1_ce1,
        p_1_q1,
        r_1_address0,
        r_1_ce0,
        r_1_q0,
        r_1_address1,
        r_1_ce1,
        r_1_q1,
        d_1_address0,
        d_1_ce0,
        d_1_we0,
        d_1_d0,
        d_1_q0,
        d_1_address1,
        d_1_ce1,
        d_1_we1,
        d_1_d1,
        d_1_q1,
        u1_0_i,
        u1_0_o,
        u1_0_o_ap_vld,
        BdynT_1_address0,
        BdynT_1_ce0,
        BdynT_1_q0,
        BdynT_1_address1,
        BdynT_1_ce1,
        BdynT_1_q1,
        u1_1_i,
        u1_1_o,
        u1_1_o_ap_vld,
        u1_2_i,
        u1_2_o,
        u1_2_o_ap_vld,
        u1_3_i,
        u1_3_o,
        u1_3_o_ap_vld,
        u2_0_i,
        u2_0_o,
        u2_0_o_ap_vld,
        u2_1_i,
        u2_1_o,
        u2_1_o_ap_vld,
        u2_2_i,
        u2_2_o,
        u2_2_o_ap_vld,
        u2_3_i,
        u2_3_o,
        u2_3_o_ap_vld,
        Quu_inv_1_address0,
        Quu_inv_1_ce0,
        Quu_inv_1_q0,
        Quu_inv_1_address1,
        Quu_inv_1_ce1,
        Quu_inv_1_q1,
        grp_fu_743_p_din0,
        grp_fu_743_p_din1,
        grp_fu_743_p_opcode,
        grp_fu_743_p_dout0,
        grp_fu_743_p_ce,
        grp_fu_2073_p_din0,
        grp_fu_2073_p_din1,
        grp_fu_2073_p_opcode,
        grp_fu_2073_p_dout0,
        grp_fu_2073_p_ce
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] i;
output  [6:0] p_1_address0;
output   p_1_ce0;
input  [31:0] p_1_q0;
output  [6:0] p_1_address1;
output   p_1_ce1;
input  [31:0] p_1_q1;
output  [5:0] r_1_address0;
output   r_1_ce0;
input  [31:0] r_1_q0;
output  [5:0] r_1_address1;
output   r_1_ce1;
input  [31:0] r_1_q1;
output  [5:0] d_1_address0;
output   d_1_ce0;
output   d_1_we0;
output  [31:0] d_1_d0;
input  [31:0] d_1_q0;
output  [5:0] d_1_address1;
output   d_1_ce1;
output   d_1_we1;
output  [31:0] d_1_d1;
input  [31:0] d_1_q1;
input  [31:0] u1_0_i;
output  [31:0] u1_0_o;
output   u1_0_o_ap_vld;
output  [5:0] BdynT_1_address0;
output   BdynT_1_ce0;
input  [31:0] BdynT_1_q0;
output  [5:0] BdynT_1_address1;
output   BdynT_1_ce1;
input  [31:0] BdynT_1_q1;
input  [31:0] u1_1_i;
output  [31:0] u1_1_o;
output   u1_1_o_ap_vld;
input  [31:0] u1_2_i;
output  [31:0] u1_2_o;
output   u1_2_o_ap_vld;
input  [31:0] u1_3_i;
output  [31:0] u1_3_o;
output   u1_3_o_ap_vld;
input  [31:0] u2_0_i;
output  [31:0] u2_0_o;
output   u2_0_o_ap_vld;
input  [31:0] u2_1_i;
output  [31:0] u2_1_o;
output   u2_1_o_ap_vld;
input  [31:0] u2_2_i;
output  [31:0] u2_2_o;
output   u2_2_o_ap_vld;
input  [31:0] u2_3_i;
output  [31:0] u2_3_o;
output   u2_3_o_ap_vld;
output  [3:0] Quu_inv_1_address0;
output   Quu_inv_1_ce0;
input  [31:0] Quu_inv_1_q0;
output  [3:0] Quu_inv_1_address1;
output   Quu_inv_1_ce1;
input  [31:0] Quu_inv_1_q1;
output  [31:0] grp_fu_743_p_din0;
output  [31:0] grp_fu_743_p_din1;
output  [0:0] grp_fu_743_p_opcode;
input  [31:0] grp_fu_743_p_dout0;
output   grp_fu_743_p_ce;
output  [31:0] grp_fu_2073_p_din0;
output  [31:0] grp_fu_2073_p_din1;
output  [0:0] grp_fu_2073_p_opcode;
input  [31:0] grp_fu_2073_p_dout0;
output   grp_fu_2073_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] r_1_address0;
reg r_1_ce0;
reg[5:0] r_1_address1;
reg r_1_ce1;
reg[5:0] d_1_address0;
reg d_1_ce0;
reg d_1_we0;
reg[31:0] d_1_d0;
reg[5:0] d_1_address1;
reg d_1_ce1;
reg d_1_we1;
reg[31:0] d_1_d1;
reg[31:0] u1_0_o;
reg u1_0_o_ap_vld;
reg[31:0] u1_1_o;
reg u1_1_o_ap_vld;
reg[31:0] u1_2_o;
reg u1_2_o_ap_vld;
reg[31:0] u1_3_o;
reg u1_3_o_ap_vld;
reg[31:0] u2_0_o;
reg u2_0_o_ap_vld;
reg[31:0] u2_1_o;
reg u2_1_o_ap_vld;
reg[31:0] u2_2_o;
reg u2_2_o_ap_vld;
reg[31:0] u2_3_o;
reg u2_3_o_ap_vld;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] mul_i_fu_396_p2;
reg   [6:0] mul_i_reg_535;
wire    ap_CS_fsm_state3;
wire   [31:0] p_col_p1_q1;
reg   [31:0] p_col_p1_load_reg_550;
wire    ap_CS_fsm_state4;
wire   [31:0] p_col_p1_q0;
reg   [31:0] p_col_p1_load_12_reg_555;
reg   [31:0] p_col_p1_load_13_reg_570;
wire    ap_CS_fsm_state5;
reg   [31:0] p_col_p1_load_14_reg_575;
reg   [31:0] p_col_p1_load_15_reg_590;
wire    ap_CS_fsm_state6;
reg   [31:0] p_col_p1_load_16_reg_595;
reg   [31:0] p_col_p1_load_17_reg_610;
wire    ap_CS_fsm_state7;
reg   [31:0] p_col_p1_load_18_reg_615;
reg   [31:0] p_col_p1_load_19_reg_630;
wire    ap_CS_fsm_state8;
reg   [31:0] p_col_p1_load_20_reg_635;
wire   [5:0] mul_i1_fu_403_p3;
reg   [5:0] mul_i1_reg_650;
wire    ap_CS_fsm_state9;
reg   [5:0] d_1_addr_reg_656;
reg   [5:0] d_1_addr_2_reg_666;
reg   [31:0] p_col_p1_load_21_reg_676;
reg   [31:0] p_col_p1_load_22_reg_681;
reg   [31:0] r_col_0_reg_686;
wire    ap_CS_fsm_state10;
reg   [31:0] r_col_1_reg_691;
reg   [5:0] d_1_addr_3_reg_696;
reg   [5:0] d_1_addr_4_reg_706;
reg   [31:0] r_col_2_reg_716;
wire    ap_CS_fsm_state11;
reg   [31:0] r_col_3_reg_721;
reg   [31:0] d_col_0_reg_738;
wire    ap_CS_fsm_state12;
reg   [31:0] d_col_1_reg_743;
reg   [31:0] d_col_2_reg_748;
wire    ap_CS_fsm_state13;
reg   [31:0] d_col_3_reg_753;
reg   [3:0] p_col_p1_address0;
reg    p_col_p1_ce0;
reg    p_col_p1_we0;
reg   [3:0] p_col_p1_address1;
reg    p_col_p1_ce1;
reg    p_col_p1_we1;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_ap_start;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_ap_done;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_ap_idle;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_ap_ready;
wire   [3:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_address0;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_ce0;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_we0;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_d0;
wire   [3:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_address1;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_ce1;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_we1;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_d1;
wire   [6:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_1_address0;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_1_ce0;
wire   [6:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_1_address1;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_1_ce1;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_start;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_done;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_idle;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_ready;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_0;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_0_ap_vld;
wire   [5:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_BdynT_1_address0;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_BdynT_1_ce0;
wire   [5:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_BdynT_1_address1;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_BdynT_1_ce1;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_1;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_1_ap_vld;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_2;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_2_ap_vld;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_3;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_3_ap_vld;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_770_p_din0;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_770_p_din1;
wire   [0:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_770_p_opcode;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_770_p_ce;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_774_p_din0;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_774_p_din1;
wire   [0:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_774_p_opcode;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_774_p_ce;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_start;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_done;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_idle;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_ready;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_0;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_0_ap_vld;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_1;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_1_ap_vld;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_2;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_2_ap_vld;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_3;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_3_ap_vld;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_grp_fu_770_p_din0;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_grp_fu_770_p_din1;
wire   [0:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_grp_fu_770_p_opcode;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_grp_fu_770_p_ce;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_ap_start;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_ap_done;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_ap_idle;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_ap_ready;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_3_0_out;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_3_0_out_ap_vld;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_2_0_out;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_2_0_out_ap_vld;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_1_0_out;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_1_0_out_ap_vld;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_0_0_out;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_0_0_out_ap_vld;
wire   [3:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_Quu_inv_1_address0;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_Quu_inv_1_ce0;
wire   [3:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_Quu_inv_1_address1;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_Quu_inv_1_ce1;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_770_p_din0;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_770_p_din1;
wire   [0:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_770_p_opcode;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_770_p_ce;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_774_p_din0;
wire   [31:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_774_p_din1;
wire   [0:0] grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_774_p_opcode;
wire    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_774_p_ce;
reg    grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_start_reg;
reg    grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_start_reg;
reg    grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_ap_start_reg;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln88_fu_410_p1;
wire   [63:0] zext_ln88_90_fu_422_p1;
wire   [63:0] zext_ln88_91_fu_433_p1;
wire   [63:0] zext_ln88_92_fu_444_p1;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire   [3:0] add_ln32_fu_366_p2;
wire   [2:0] empty_fu_372_p1;
wire   [5:0] p_shl1_fu_384_p3;
wire   [6:0] p_shl_fu_376_p3;
wire   [6:0] p_shl1_cast_fu_392_p1;
wire   [5:0] or_ln88_5_fu_416_p2;
wire   [5:0] or_ln88_fu_428_p2;
wire   [5:0] or_ln88_4_fu_439_p2;
reg   [31:0] grp_fu_770_p0;
reg   [31:0] grp_fu_770_p1;
reg   [1:0] grp_fu_770_opcode;
reg    grp_fu_770_ce;
reg   [31:0] grp_fu_774_p0;
reg   [31:0] grp_fu_774_p1;
reg   [1:0] grp_fu_774_opcode;
reg    grp_fu_774_ce;
reg   [15:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_ap_start_reg = 1'b0;
#0 grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_start_reg = 1'b0;
#0 grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_start_reg = 1'b0;
#0 grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_ap_start_reg = 1'b0;
end

tracking_forward_pass_2_x_col_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
p_col_p1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_col_p1_address0),
    .ce0(p_col_p1_ce0),
    .we0(p_col_p1_we0),
    .d0(grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_d0),
    .q0(p_col_p1_q0),
    .address1(p_col_p1_address1),
    .ce1(p_col_p1_ce1),
    .we1(p_col_p1_we1),
    .d1(grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_d1),
    .q1(p_col_p1_q1)
);

tracking_backward_pass_1_Pipeline_VITIS_LOOP_86_1 grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_ap_start),
    .ap_done(grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_ap_done),
    .ap_idle(grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_ap_idle),
    .ap_ready(grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_ap_ready),
    .mul_i(mul_i_reg_535),
    .p_col_p1_address0(grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_address0),
    .p_col_p1_ce0(grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_ce0),
    .p_col_p1_we0(grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_we0),
    .p_col_p1_d0(grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_d0),
    .p_col_p1_address1(grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_address1),
    .p_col_p1_ce1(grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_ce1),
    .p_col_p1_we1(grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_we1),
    .p_col_p1_d1(grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_d1),
    .p_1_address0(grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_1_address0),
    .p_1_ce0(grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_1_ce0),
    .p_1_q0(p_1_q0),
    .p_1_address1(grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_1_address1),
    .p_1_ce1(grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_1_ce1),
    .p_1_q1(p_1_q1)
);

tracking_backward_pass_1_Pipeline_VITIS_LOOP_133_1 grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_start),
    .ap_done(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_done),
    .ap_idle(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_idle),
    .ap_ready(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_ready),
    .p_col_p1_load(p_col_p1_load_reg_550),
    .p_col_p1_load_12(p_col_p1_load_12_reg_555),
    .p_col_p1_load_13(p_col_p1_load_13_reg_570),
    .p_col_p1_load_14(p_col_p1_load_14_reg_575),
    .p_col_p1_load_15(p_col_p1_load_15_reg_590),
    .p_col_p1_load_16(p_col_p1_load_16_reg_595),
    .p_col_p1_load_17(p_col_p1_load_17_reg_610),
    .p_col_p1_load_18(p_col_p1_load_18_reg_615),
    .p_col_p1_load_19(p_col_p1_load_19_reg_630),
    .p_col_p1_load_20(p_col_p1_load_20_reg_635),
    .p_col_p1_load_21(p_col_p1_load_21_reg_676),
    .p_col_p1_load_22(p_col_p1_load_22_reg_681),
    .u1_0(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_0),
    .u1_0_ap_vld(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_0_ap_vld),
    .BdynT_1_address0(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_BdynT_1_address0),
    .BdynT_1_ce0(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_BdynT_1_ce0),
    .BdynT_1_q0(BdynT_1_q0),
    .BdynT_1_address1(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_BdynT_1_address1),
    .BdynT_1_ce1(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_BdynT_1_ce1),
    .BdynT_1_q1(BdynT_1_q1),
    .u1_1(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_1),
    .u1_1_ap_vld(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_1_ap_vld),
    .u1_2(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_2),
    .u1_2_ap_vld(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_2_ap_vld),
    .u1_3(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_3),
    .u1_3_ap_vld(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_3_ap_vld),
    .grp_fu_770_p_din0(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_770_p_din0),
    .grp_fu_770_p_din1(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_770_p_din1),
    .grp_fu_770_p_opcode(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_770_p_opcode),
    .grp_fu_770_p_dout0(grp_fu_743_p_dout0),
    .grp_fu_770_p_ce(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_770_p_ce),
    .grp_fu_774_p_din0(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_774_p_din0),
    .grp_fu_774_p_din1(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_774_p_din1),
    .grp_fu_774_p_opcode(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_774_p_opcode),
    .grp_fu_774_p_dout0(grp_fu_2073_p_dout0),
    .grp_fu_774_p_ce(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_774_p_ce)
);

tracking_backward_pass_1_Pipeline_VITIS_LOOP_177_2 grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_start),
    .ap_done(grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_done),
    .ap_idle(grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_idle),
    .ap_ready(grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_ready),
    .r_col_0(r_col_0_reg_686),
    .r_col_1(r_col_1_reg_691),
    .r_col_2(r_col_2_reg_716),
    .r_col_3(r_col_3_reg_721),
    .u1_0_load(u1_0_i),
    .u1_1_load(u1_1_i),
    .u1_2_load(u1_2_i),
    .u1_3_load(u1_3_i),
    .u2_0(grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_0),
    .u2_0_ap_vld(grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_0_ap_vld),
    .u2_1(grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_1),
    .u2_1_ap_vld(grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_1_ap_vld),
    .u2_2(grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_2),
    .u2_2_ap_vld(grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_2_ap_vld),
    .u2_3(grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_3),
    .u2_3_ap_vld(grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_3_ap_vld),
    .grp_fu_770_p_din0(grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_grp_fu_770_p_din0),
    .grp_fu_770_p_din1(grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_grp_fu_770_p_din1),
    .grp_fu_770_p_opcode(grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_grp_fu_770_p_opcode),
    .grp_fu_770_p_dout0(grp_fu_743_p_dout0),
    .grp_fu_770_p_ce(grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_grp_fu_770_p_ce)
);

tracking_backward_pass_1_Pipeline_VITIS_LOOP_133_131 grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_ap_start),
    .ap_done(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_ap_done),
    .ap_idle(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_ap_idle),
    .ap_ready(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_ap_ready),
    .d_col_3(d_col_3_reg_753),
    .d_col_2(d_col_2_reg_748),
    .d_col_1(d_col_1_reg_743),
    .d_col_0(d_col_0_reg_738),
    .u2_0_load(u2_0_i),
    .u2_1_load(u2_1_i),
    .u2_2_load(u2_2_i),
    .u2_3_load(u2_3_i),
    .d_col_3_0_out(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_3_0_out),
    .d_col_3_0_out_ap_vld(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_3_0_out_ap_vld),
    .d_col_2_0_out(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_2_0_out),
    .d_col_2_0_out_ap_vld(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_2_0_out_ap_vld),
    .d_col_1_0_out(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_1_0_out),
    .d_col_1_0_out_ap_vld(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_1_0_out_ap_vld),
    .d_col_0_0_out(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_0_0_out),
    .d_col_0_0_out_ap_vld(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_0_0_out_ap_vld),
    .Quu_inv_1_address0(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_Quu_inv_1_address0),
    .Quu_inv_1_ce0(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_Quu_inv_1_ce0),
    .Quu_inv_1_q0(Quu_inv_1_q0),
    .Quu_inv_1_address1(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_Quu_inv_1_address1),
    .Quu_inv_1_ce1(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_Quu_inv_1_ce1),
    .Quu_inv_1_q1(Quu_inv_1_q1),
    .grp_fu_770_p_din0(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_770_p_din0),
    .grp_fu_770_p_din1(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_770_p_din1),
    .grp_fu_770_p_opcode(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_770_p_opcode),
    .grp_fu_770_p_dout0(grp_fu_743_p_dout0),
    .grp_fu_770_p_ce(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_770_p_ce),
    .grp_fu_774_p_din0(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_774_p_din0),
    .grp_fu_774_p_din1(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_774_p_din1),
    .grp_fu_774_p_opcode(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_774_p_opcode),
    .grp_fu_774_p_dout0(grp_fu_2073_p_dout0),
    .grp_fu_774_p_ce(grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_774_p_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_ap_start_reg <= 1'b1;
        end else if ((grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_ap_ready == 1'b1)) begin
            grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_start_reg <= 1'b1;
        end else if ((grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_ready == 1'b1)) begin
            grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_start_reg <= 1'b1;
        end else if ((grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_ready == 1'b1)) begin
            grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_ap_start_reg <= 1'b1;
        end else if ((grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_ap_ready == 1'b1)) begin
            grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        d_1_addr_2_reg_666[5 : 2] <= zext_ln88_90_fu_422_p1[5 : 2];
        d_1_addr_reg_656[5 : 2] <= zext_ln88_fu_410_p1[5 : 2];
        mul_i1_reg_650[5 : 2] <= mul_i1_fu_403_p3[5 : 2];
        p_col_p1_load_21_reg_676 <= p_col_p1_q1;
        p_col_p1_load_22_reg_681 <= p_col_p1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        d_1_addr_3_reg_696[5 : 2] <= zext_ln88_91_fu_433_p1[5 : 2];
        d_1_addr_4_reg_706[5 : 2] <= zext_ln88_92_fu_444_p1[5 : 2];
        r_col_0_reg_686 <= r_1_q1;
        r_col_1_reg_691 <= r_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        d_col_0_reg_738 <= d_1_q1;
        d_col_1_reg_743 <= d_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        d_col_2_reg_748 <= d_1_q1;
        d_col_3_reg_753 <= d_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        mul_i_reg_535[6 : 2] <= mul_i_fu_396_p2[6 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_col_p1_load_12_reg_555 <= p_col_p1_q0;
        p_col_p1_load_reg_550 <= p_col_p1_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_col_p1_load_13_reg_570 <= p_col_p1_q1;
        p_col_p1_load_14_reg_575 <= p_col_p1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_col_p1_load_15_reg_590 <= p_col_p1_q1;
        p_col_p1_load_16_reg_595 <= p_col_p1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_col_p1_load_17_reg_610 <= p_col_p1_q1;
        p_col_p1_load_18_reg_615 <= p_col_p1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_col_p1_load_19_reg_630 <= p_col_p1_q1;
        p_col_p1_load_20_reg_635 <= p_col_p1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        r_col_2_reg_716 <= r_1_q1;
        r_col_3_reg_721 <= r_1_q0;
    end
end

always @ (*) begin
    if ((grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_done == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_done == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_ap_done == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        d_1_address0 = d_1_addr_4_reg_706;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11))) begin
        d_1_address0 = d_1_addr_2_reg_666;
    end else begin
        d_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        d_1_address1 = d_1_addr_3_reg_696;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11))) begin
        d_1_address1 = d_1_addr_reg_656;
    end else begin
        d_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | ((grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        d_1_ce0 = 1'b1;
    end else begin
        d_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | ((grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        d_1_ce1 = 1'b1;
    end else begin
        d_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        d_1_d0 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_3_0_out;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        d_1_d0 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_1_0_out;
    end else begin
        d_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        d_1_d1 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_2_0_out;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        d_1_d1 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_d_col_0_0_out;
    end else begin
        d_1_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15))) begin
        d_1_we0 = 1'b1;
    end else begin
        d_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15))) begin
        d_1_we1 = 1'b1;
    end else begin
        d_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_770_ce = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_770_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_770_ce = grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_grp_fu_770_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_770_ce = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_770_p_ce;
    end else begin
        grp_fu_770_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_770_opcode = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_770_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_770_opcode = grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_grp_fu_770_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_770_opcode = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_770_p_opcode;
    end else begin
        grp_fu_770_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_770_p0 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_770_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_770_p0 = grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_grp_fu_770_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_770_p0 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_770_p_din0;
    end else begin
        grp_fu_770_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_770_p1 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_770_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_770_p1 = grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_grp_fu_770_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_770_p1 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_770_p_din1;
    end else begin
        grp_fu_770_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_774_ce = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_774_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_774_ce = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_774_p_ce;
    end else begin
        grp_fu_774_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_774_opcode = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_774_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_774_opcode = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_774_p_opcode;
    end else begin
        grp_fu_774_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_774_p0 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_774_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_774_p0 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_774_p_din0;
    end else begin
        grp_fu_774_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_774_p1 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_grp_fu_774_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_774_p1 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_grp_fu_774_p_din1;
    end else begin
        grp_fu_774_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_col_p1_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_col_p1_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_col_p1_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_col_p1_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_col_p1_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_col_p1_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_p1_address0 = grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_address0;
    end else begin
        p_col_p1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_col_p1_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_col_p1_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_col_p1_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_col_p1_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_col_p1_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_col_p1_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_p1_address1 = grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_address1;
    end else begin
        p_col_p1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        p_col_p1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_p1_ce0 = grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_ce0;
    end else begin
        p_col_p1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        p_col_p1_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_p1_ce1 = grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_ce1;
    end else begin
        p_col_p1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_p1_we0 = grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_we0;
    end else begin
        p_col_p1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_p1_we1 = grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_col_p1_we1;
    end else begin
        p_col_p1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_1_address0 = zext_ln88_92_fu_444_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_1_address0 = zext_ln88_90_fu_422_p1;
    end else begin
        r_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_1_address1 = zext_ln88_91_fu_433_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_1_address1 = zext_ln88_fu_410_p1;
    end else begin
        r_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        r_1_ce0 = 1'b1;
    end else begin
        r_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        r_1_ce1 = 1'b1;
    end else begin
        r_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_0_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        u1_0_o = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_0;
    end else begin
        u1_0_o = u1_0_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        u1_0_o_ap_vld = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_0_ap_vld;
    end else begin
        u1_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_1_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        u1_1_o = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_1;
    end else begin
        u1_1_o = u1_1_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        u1_1_o_ap_vld = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_1_ap_vld;
    end else begin
        u1_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_2_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        u1_2_o = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_2;
    end else begin
        u1_2_o = u1_2_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        u1_2_o_ap_vld = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_2_ap_vld;
    end else begin
        u1_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_3_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        u1_3_o = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_3;
    end else begin
        u1_3_o = u1_3_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        u1_3_o_ap_vld = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_u1_3_ap_vld;
    end else begin
        u1_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_0_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        u2_0_o = grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_0;
    end else begin
        u2_0_o = u2_0_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        u2_0_o_ap_vld = grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_0_ap_vld;
    end else begin
        u2_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_1_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        u2_1_o = grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_1;
    end else begin
        u2_1_o = u2_1_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        u2_1_o_ap_vld = grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_1_ap_vld;
    end else begin
        u2_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_2_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        u2_2_o = grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_2;
    end else begin
        u2_2_o = u2_2_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        u2_2_o_ap_vld = grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_2_ap_vld;
    end else begin
        u2_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_3_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        u2_3_o = grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_3;
    end else begin
        u2_3_o = u2_3_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        u2_3_o_ap_vld = grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_u2_3_ap_vld;
    end else begin
        u2_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BdynT_1_address0 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_BdynT_1_address0;

assign BdynT_1_address1 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_BdynT_1_address1;

assign BdynT_1_ce0 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_BdynT_1_ce0;

assign BdynT_1_ce1 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_BdynT_1_ce1;

assign Quu_inv_1_address0 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_Quu_inv_1_address0;

assign Quu_inv_1_address1 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_Quu_inv_1_address1;

assign Quu_inv_1_ce0 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_Quu_inv_1_ce0;

assign Quu_inv_1_ce1 = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_Quu_inv_1_ce1;

assign add_ln32_fu_366_p2 = (i + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign empty_fu_372_p1 = add_ln32_fu_366_p2[2:0];

assign grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_ap_start = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_131_fu_346_ap_start_reg;

assign grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_start = grp_backward_pass_1_Pipeline_VITIS_LOOP_133_1_fu_296_ap_start_reg;

assign grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_start = grp_backward_pass_1_Pipeline_VITIS_LOOP_177_2_fu_324_ap_start_reg;

assign grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_ap_start = grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_ap_start_reg;

assign grp_fu_2073_p_ce = grp_fu_774_ce;

assign grp_fu_2073_p_din0 = grp_fu_774_p0;

assign grp_fu_2073_p_din1 = grp_fu_774_p1;

assign grp_fu_2073_p_opcode = grp_fu_774_opcode;

assign grp_fu_743_p_ce = grp_fu_770_ce;

assign grp_fu_743_p_din0 = grp_fu_770_p0;

assign grp_fu_743_p_din1 = grp_fu_770_p1;

assign grp_fu_743_p_opcode = grp_fu_770_opcode;

assign mul_i1_fu_403_p3 = {{i}, {2'd0}};

assign mul_i_fu_396_p2 = (p_shl_fu_376_p3 - p_shl1_cast_fu_392_p1);

assign or_ln88_4_fu_439_p2 = (mul_i1_reg_650 | 6'd3);

assign or_ln88_5_fu_416_p2 = (mul_i1_fu_403_p3 | 6'd1);

assign or_ln88_fu_428_p2 = (mul_i1_reg_650 | 6'd2);

assign p_1_address0 = grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_1_address0;

assign p_1_address1 = grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_1_address1;

assign p_1_ce0 = grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_1_ce0;

assign p_1_ce1 = grp_backward_pass_1_Pipeline_VITIS_LOOP_86_1_fu_287_p_1_ce1;

assign p_shl1_cast_fu_392_p1 = p_shl1_fu_384_p3;

assign p_shl1_fu_384_p3 = {{add_ln32_fu_366_p2}, {2'd0}};

assign p_shl_fu_376_p3 = {{empty_fu_372_p1}, {4'd0}};

assign zext_ln88_90_fu_422_p1 = or_ln88_5_fu_416_p2;

assign zext_ln88_91_fu_433_p1 = or_ln88_fu_428_p2;

assign zext_ln88_92_fu_444_p1 = or_ln88_4_fu_439_p2;

assign zext_ln88_fu_410_p1 = mul_i1_fu_403_p3;

always @ (posedge ap_clk) begin
    mul_i_reg_535[1:0] <= 2'b00;
    mul_i1_reg_650[1:0] <= 2'b00;
    d_1_addr_reg_656[1:0] <= 2'b00;
    d_1_addr_2_reg_666[1:0] <= 2'b01;
    d_1_addr_3_reg_696[1:0] <= 2'b10;
    d_1_addr_4_reg_706[1:0] <= 2'b11;
end

endmodule //tracking_backward_pass_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_backward_pass_2_Pipeline_VITIS_LOOP_86_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul_i,
        p_col_p1_address0,
        p_col_p1_ce0,
        p_col_p1_we0,
        p_col_p1_d0,
        p_col_p1_address1,
        p_col_p1_ce1,
        p_col_p1_we1,
        p_col_p1_d1,
        p_1_address0,
        p_1_ce0,
        p_1_q0,
        p_1_address1,
        p_1_ce1,
        p_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] mul_i;
output  [3:0] p_col_p1_address0;
output   p_col_p1_ce0;
output   p_col_p1_we0;
output  [31:0] p_col_p1_d0;
output  [3:0] p_col_p1_address1;
output   p_col_p1_ce1;
output   p_col_p1_we1;
output  [31:0] p_col_p1_d1;
output  [6:0] p_1_address0;
output   p_1_ce0;
input  [31:0] p_1_q0;
output  [6:0] p_1_address1;
output   p_1_ce1;
input  [31:0] p_1_q1;

reg ap_idle;
reg[3:0] p_col_p1_address0;
reg p_col_p1_ce0;
reg p_col_p1_we0;
reg[3:0] p_col_p1_address1;
reg p_col_p1_ce1;
reg p_col_p1_we1;
reg[6:0] p_1_address0;
reg p_1_ce0;
reg[6:0] p_1_address1;
reg p_1_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_142_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_54_reg_262;
reg   [0:0] icmp_ln86_reg_269;
wire   [3:0] or_ln86_fu_163_p2;
reg   [3:0] or_ln86_reg_278;
wire   [3:0] or_ln86_16_fu_203_p2;
reg   [3:0] or_ln86_16_reg_288;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] or_ln86_17_fu_222_p2;
reg   [3:0] or_ln86_17_reg_298;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln88_fu_158_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln88_74_fu_179_p1;
wire   [63:0] i_60_cast8_fu_195_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln88_72_fu_199_p1;
wire   [63:0] zext_ln88_77_fu_217_p1;
wire   [63:0] zext_ln88_80_fu_236_p1;
wire   [63:0] zext_ln88_75_fu_241_p1;
wire   [63:0] zext_ln88_78_fu_245_p1;
reg   [3:0] i_fu_40;
wire   [3:0] add_ln86_fu_184_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_54;
wire   [6:0] i_60_cast2_fu_148_p1;
wire   [6:0] add_ln88_fu_152_p2;
wire   [6:0] zext_ln88_73_fu_169_p1;
wire   [6:0] add_ln88_23_fu_173_p2;
wire   [6:0] zext_ln88_76_fu_208_p1;
wire   [6:0] add_ln88_24_fu_212_p2;
wire   [6:0] zext_ln88_79_fu_227_p1;
wire   [6:0] add_ln88_25_fu_231_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln86_fu_142_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_40 <= add_ln86_fu_184_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_54_reg_262 <= ap_sig_allocacmp_i_54;
        icmp_ln86_reg_269 <= icmp_ln86_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln86_16_reg_288[0] <= or_ln86_16_fu_203_p2[0];
or_ln86_16_reg_288[3 : 2] <= or_ln86_16_fu_203_p2[3 : 2];
        or_ln86_17_reg_298[3 : 2] <= or_ln86_17_fu_222_p2[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_142_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln86_reg_278[3 : 1] <= or_ln86_fu_163_p2[3 : 1];
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_54 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_54 = i_fu_40;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_1_address0 = zext_ln88_80_fu_236_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_1_address0 = zext_ln88_74_fu_179_p1;
        end else begin
            p_1_address0 = 'bx;
        end
    end else begin
        p_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_1_address1 = zext_ln88_77_fu_217_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_1_address1 = zext_ln88_fu_158_p1;
        end else begin
            p_1_address1 = 'bx;
        end
    end else begin
        p_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_1_ce0 = 1'b1;
    end else begin
        p_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_1_ce1 = 1'b1;
    end else begin
        p_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_col_p1_address0 = zext_ln88_78_fu_245_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_col_p1_address0 = zext_ln88_72_fu_199_p1;
    end else begin
        p_col_p1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_col_p1_address1 = zext_ln88_75_fu_241_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_col_p1_address1 = i_60_cast8_fu_195_p1;
    end else begin
        p_col_p1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_col_p1_ce0 = 1'b1;
    end else begin
        p_col_p1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_col_p1_ce1 = 1'b1;
    end else begin
        p_col_p1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_col_p1_we0 = 1'b1;
    end else begin
        p_col_p1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_col_p1_we1 = 1'b1;
    end else begin
        p_col_p1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln86_fu_184_p2 = (ap_sig_allocacmp_i_54 + 4'd4);

assign add_ln88_23_fu_173_p2 = (zext_ln88_73_fu_169_p1 + mul_i);

assign add_ln88_24_fu_212_p2 = (zext_ln88_76_fu_208_p1 + mul_i);

assign add_ln88_25_fu_231_p2 = (zext_ln88_79_fu_227_p1 + mul_i);

assign add_ln88_fu_152_p2 = (i_60_cast2_fu_148_p1 + mul_i);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_60_cast2_fu_148_p1 = ap_sig_allocacmp_i_54;

assign i_60_cast8_fu_195_p1 = i_54_reg_262;

assign icmp_ln86_fu_142_p2 = ((ap_sig_allocacmp_i_54 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln86_16_fu_203_p2 = (i_54_reg_262 | 4'd2);

assign or_ln86_17_fu_222_p2 = (i_54_reg_262 | 4'd3);

assign or_ln86_fu_163_p2 = (ap_sig_allocacmp_i_54 | 4'd1);

assign p_col_p1_d0 = p_1_q0;

assign p_col_p1_d1 = p_1_q1;

assign zext_ln88_72_fu_199_p1 = or_ln86_reg_278;

assign zext_ln88_73_fu_169_p1 = or_ln86_fu_163_p2;

assign zext_ln88_74_fu_179_p1 = add_ln88_23_fu_173_p2;

assign zext_ln88_75_fu_241_p1 = or_ln86_16_reg_288;

assign zext_ln88_76_fu_208_p1 = or_ln86_16_fu_203_p2;

assign zext_ln88_77_fu_217_p1 = add_ln88_24_fu_212_p2;

assign zext_ln88_78_fu_245_p1 = or_ln86_17_reg_298;

assign zext_ln88_79_fu_227_p1 = or_ln86_17_fu_222_p2;

assign zext_ln88_80_fu_236_p1 = add_ln88_25_fu_231_p2;

assign zext_ln88_fu_158_p1 = add_ln88_fu_152_p2;

always @ (posedge ap_clk) begin
    or_ln86_reg_278[0] <= 1'b1;
    or_ln86_16_reg_288[1] <= 1'b1;
    or_ln86_17_reg_298[1:0] <= 2'b11;
end

endmodule //tracking_backward_pass_2_Pipeline_VITIS_LOOP_86_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_backward_pass_2_Pipeline_VITIS_LOOP_86_128 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul_i12,
        q_col_address0,
        q_col_ce0,
        q_col_we0,
        q_col_d0,
        q_col_address1,
        q_col_ce1,
        q_col_we1,
        q_col_d1,
        q_1_address0,
        q_1_ce0,
        q_1_q0,
        q_1_address1,
        q_1_ce1,
        q_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] mul_i12;
output  [3:0] q_col_address0;
output   q_col_ce0;
output   q_col_we0;
output  [31:0] q_col_d0;
output  [3:0] q_col_address1;
output   q_col_ce1;
output   q_col_we1;
output  [31:0] q_col_d1;
output  [6:0] q_1_address0;
output   q_1_ce0;
input  [31:0] q_1_q0;
output  [6:0] q_1_address1;
output   q_1_ce1;
input  [31:0] q_1_q1;

reg ap_idle;
reg[3:0] q_col_address0;
reg q_col_ce0;
reg q_col_we0;
reg[3:0] q_col_address1;
reg q_col_ce1;
reg q_col_we1;
reg[6:0] q_1_address0;
reg q_1_ce0;
reg[6:0] q_1_address1;
reg q_1_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_142_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_53_reg_262;
reg   [0:0] icmp_ln86_reg_269;
wire   [3:0] or_ln86_fu_163_p2;
reg   [3:0] or_ln86_reg_278;
wire   [3:0] or_ln86_14_fu_203_p2;
reg   [3:0] or_ln86_14_reg_288;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] or_ln86_15_fu_222_p2;
reg   [3:0] or_ln86_15_reg_298;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln88_fu_158_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln88_65_fu_179_p1;
wire   [63:0] i_61_cast13_fu_195_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln88_63_fu_199_p1;
wire   [63:0] zext_ln88_68_fu_217_p1;
wire   [63:0] zext_ln88_71_fu_236_p1;
wire   [63:0] zext_ln88_66_fu_241_p1;
wire   [63:0] zext_ln88_69_fu_245_p1;
reg   [3:0] i_fu_40;
wire   [3:0] add_ln86_fu_184_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_53;
wire   [6:0] i_61_cast4_fu_148_p1;
wire   [6:0] add_ln88_fu_152_p2;
wire   [6:0] zext_ln88_64_fu_169_p1;
wire   [6:0] add_ln88_20_fu_173_p2;
wire   [6:0] zext_ln88_67_fu_208_p1;
wire   [6:0] add_ln88_21_fu_212_p2;
wire   [6:0] zext_ln88_70_fu_227_p1;
wire   [6:0] add_ln88_22_fu_231_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln86_fu_142_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_40 <= add_ln86_fu_184_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_53_reg_262 <= ap_sig_allocacmp_i_53;
        icmp_ln86_reg_269 <= icmp_ln86_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln86_14_reg_288[0] <= or_ln86_14_fu_203_p2[0];
or_ln86_14_reg_288[3 : 2] <= or_ln86_14_fu_203_p2[3 : 2];
        or_ln86_15_reg_298[3 : 2] <= or_ln86_15_fu_222_p2[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_142_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln86_reg_278[3 : 1] <= or_ln86_fu_163_p2[3 : 1];
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_53 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_53 = i_fu_40;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            q_1_address0 = zext_ln88_71_fu_236_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            q_1_address0 = zext_ln88_65_fu_179_p1;
        end else begin
            q_1_address0 = 'bx;
        end
    end else begin
        q_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            q_1_address1 = zext_ln88_68_fu_217_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            q_1_address1 = zext_ln88_fu_158_p1;
        end else begin
            q_1_address1 = 'bx;
        end
    end else begin
        q_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        q_1_ce0 = 1'b1;
    end else begin
        q_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        q_1_ce1 = 1'b1;
    end else begin
        q_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_col_address0 = zext_ln88_69_fu_245_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        q_col_address0 = zext_ln88_63_fu_199_p1;
    end else begin
        q_col_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_col_address1 = zext_ln88_66_fu_241_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        q_col_address1 = i_61_cast13_fu_195_p1;
    end else begin
        q_col_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        q_col_ce0 = 1'b1;
    end else begin
        q_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        q_col_ce1 = 1'b1;
    end else begin
        q_col_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        q_col_we0 = 1'b1;
    end else begin
        q_col_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        q_col_we1 = 1'b1;
    end else begin
        q_col_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln86_fu_184_p2 = (ap_sig_allocacmp_i_53 + 4'd4);

assign add_ln88_20_fu_173_p2 = (zext_ln88_64_fu_169_p1 + mul_i12);

assign add_ln88_21_fu_212_p2 = (zext_ln88_67_fu_208_p1 + mul_i12);

assign add_ln88_22_fu_231_p2 = (zext_ln88_70_fu_227_p1 + mul_i12);

assign add_ln88_fu_152_p2 = (i_61_cast4_fu_148_p1 + mul_i12);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_61_cast13_fu_195_p1 = i_53_reg_262;

assign i_61_cast4_fu_148_p1 = ap_sig_allocacmp_i_53;

assign icmp_ln86_fu_142_p2 = ((ap_sig_allocacmp_i_53 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln86_14_fu_203_p2 = (i_53_reg_262 | 4'd2);

assign or_ln86_15_fu_222_p2 = (i_53_reg_262 | 4'd3);

assign or_ln86_fu_163_p2 = (ap_sig_allocacmp_i_53 | 4'd1);

assign q_col_d0 = q_1_q0;

assign q_col_d1 = q_1_q1;

assign zext_ln88_63_fu_199_p1 = or_ln86_reg_278;

assign zext_ln88_64_fu_169_p1 = or_ln86_fu_163_p2;

assign zext_ln88_65_fu_179_p1 = add_ln88_20_fu_173_p2;

assign zext_ln88_66_fu_241_p1 = or_ln86_14_reg_288;

assign zext_ln88_67_fu_208_p1 = or_ln86_14_fu_203_p2;

assign zext_ln88_68_fu_217_p1 = add_ln88_21_fu_212_p2;

assign zext_ln88_69_fu_245_p1 = or_ln86_15_reg_298;

assign zext_ln88_70_fu_227_p1 = or_ln86_15_fu_222_p2;

assign zext_ln88_71_fu_236_p1 = add_ln88_22_fu_231_p2;

assign zext_ln88_fu_158_p1 = add_ln88_fu_152_p2;

always @ (posedge ap_clk) begin
    or_ln86_reg_278[0] <= 1'b1;
    or_ln86_14_reg_288[1] <= 1'b1;
    or_ln86_15_reg_298[1:0] <= 2'b11;
end

endmodule //tracking_backward_pass_2_Pipeline_VITIS_LOOP_86_128
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_backward_pass_2_Pipeline_VITIS_LOOP_86_129 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul_i12,
        p_col_address0,
        p_col_ce0,
        p_col_we0,
        p_col_d0,
        p_col_address1,
        p_col_ce1,
        p_col_we1,
        p_col_d1,
        p_1_address0,
        p_1_ce0,
        p_1_q0,
        p_1_address1,
        p_1_ce1,
        p_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] mul_i12;
output  [3:0] p_col_address0;
output   p_col_ce0;
output   p_col_we0;
output  [31:0] p_col_d0;
output  [3:0] p_col_address1;
output   p_col_ce1;
output   p_col_we1;
output  [31:0] p_col_d1;
output  [6:0] p_1_address0;
output   p_1_ce0;
input  [31:0] p_1_q0;
output  [6:0] p_1_address1;
output   p_1_ce1;
input  [31:0] p_1_q1;

reg ap_idle;
reg[3:0] p_col_address0;
reg p_col_ce0;
reg p_col_we0;
reg[3:0] p_col_address1;
reg p_col_ce1;
reg p_col_we1;
reg[6:0] p_1_address0;
reg p_1_ce0;
reg[6:0] p_1_address1;
reg p_1_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_142_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_52_reg_262;
reg   [0:0] icmp_ln86_reg_269;
wire   [3:0] or_ln86_fu_163_p2;
reg   [3:0] or_ln86_reg_278;
wire   [3:0] or_ln86_12_fu_203_p2;
reg   [3:0] or_ln86_12_reg_288;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] or_ln86_13_fu_222_p2;
reg   [3:0] or_ln86_13_reg_298;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln88_fu_158_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln88_56_fu_179_p1;
wire   [63:0] i_62_cast17_fu_195_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln88_54_fu_199_p1;
wire   [63:0] zext_ln88_59_fu_217_p1;
wire   [63:0] zext_ln88_62_fu_236_p1;
wire   [63:0] zext_ln88_57_fu_241_p1;
wire   [63:0] zext_ln88_60_fu_245_p1;
reg   [3:0] i_fu_40;
wire   [3:0] add_ln86_fu_184_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_52;
wire   [6:0] i_62_cast5_fu_148_p1;
wire   [6:0] add_ln88_fu_152_p2;
wire   [6:0] zext_ln88_55_fu_169_p1;
wire   [6:0] add_ln88_17_fu_173_p2;
wire   [6:0] zext_ln88_58_fu_208_p1;
wire   [6:0] add_ln88_18_fu_212_p2;
wire   [6:0] zext_ln88_61_fu_227_p1;
wire   [6:0] add_ln88_19_fu_231_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln86_fu_142_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_40 <= add_ln86_fu_184_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_52_reg_262 <= ap_sig_allocacmp_i_52;
        icmp_ln86_reg_269 <= icmp_ln86_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln86_12_reg_288[0] <= or_ln86_12_fu_203_p2[0];
or_ln86_12_reg_288[3 : 2] <= or_ln86_12_fu_203_p2[3 : 2];
        or_ln86_13_reg_298[3 : 2] <= or_ln86_13_fu_222_p2[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_142_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln86_reg_278[3 : 1] <= or_ln86_fu_163_p2[3 : 1];
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_52 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_52 = i_fu_40;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_1_address0 = zext_ln88_62_fu_236_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_1_address0 = zext_ln88_56_fu_179_p1;
        end else begin
            p_1_address0 = 'bx;
        end
    end else begin
        p_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_1_address1 = zext_ln88_59_fu_217_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_1_address1 = zext_ln88_fu_158_p1;
        end else begin
            p_1_address1 = 'bx;
        end
    end else begin
        p_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_1_ce0 = 1'b1;
    end else begin
        p_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_1_ce1 = 1'b1;
    end else begin
        p_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_col_address0 = zext_ln88_60_fu_245_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_col_address0 = zext_ln88_54_fu_199_p1;
    end else begin
        p_col_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_col_address1 = zext_ln88_57_fu_241_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_col_address1 = i_62_cast17_fu_195_p1;
    end else begin
        p_col_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_col_ce0 = 1'b1;
    end else begin
        p_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_col_ce1 = 1'b1;
    end else begin
        p_col_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_col_we0 = 1'b1;
    end else begin
        p_col_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_col_we1 = 1'b1;
    end else begin
        p_col_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln86_fu_184_p2 = (ap_sig_allocacmp_i_52 + 4'd4);

assign add_ln88_17_fu_173_p2 = (zext_ln88_55_fu_169_p1 + mul_i12);

assign add_ln88_18_fu_212_p2 = (zext_ln88_58_fu_208_p1 + mul_i12);

assign add_ln88_19_fu_231_p2 = (zext_ln88_61_fu_227_p1 + mul_i12);

assign add_ln88_fu_152_p2 = (i_62_cast5_fu_148_p1 + mul_i12);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_62_cast17_fu_195_p1 = i_52_reg_262;

assign i_62_cast5_fu_148_p1 = ap_sig_allocacmp_i_52;

assign icmp_ln86_fu_142_p2 = ((ap_sig_allocacmp_i_52 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln86_12_fu_203_p2 = (i_52_reg_262 | 4'd2);

assign or_ln86_13_fu_222_p2 = (i_52_reg_262 | 4'd3);

assign or_ln86_fu_163_p2 = (ap_sig_allocacmp_i_52 | 4'd1);

assign p_col_d0 = p_1_q0;

assign p_col_d1 = p_1_q1;

assign zext_ln88_54_fu_199_p1 = or_ln86_reg_278;

assign zext_ln88_55_fu_169_p1 = or_ln86_fu_163_p2;

assign zext_ln88_56_fu_179_p1 = add_ln88_17_fu_173_p2;

assign zext_ln88_57_fu_241_p1 = or_ln86_12_reg_288;

assign zext_ln88_58_fu_208_p1 = or_ln86_12_fu_203_p2;

assign zext_ln88_59_fu_217_p1 = add_ln88_18_fu_212_p2;

assign zext_ln88_60_fu_245_p1 = or_ln86_13_reg_298;

assign zext_ln88_61_fu_227_p1 = or_ln86_13_fu_222_p2;

assign zext_ln88_62_fu_236_p1 = add_ln88_19_fu_231_p2;

assign zext_ln88_fu_158_p1 = add_ln88_fu_152_p2;

always @ (posedge ap_clk) begin
    or_ln86_reg_278[0] <= 1'b1;
    or_ln86_12_reg_288[1] <= 1'b1;
    or_ln86_13_reg_298[1:0] <= 2'b11;
end

endmodule //tracking_backward_pass_2_Pipeline_VITIS_LOOP_86_129
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_backward_pass_2_Pipeline_VITIS_LOOP_93_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_col_address0,
        p_col_ce0,
        p_col_q0,
        p_col_address1,
        p_col_ce1,
        p_col_q1,
        mul_i12,
        p_1_address0,
        p_1_ce0,
        p_1_we0,
        p_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] p_col_address0;
output   p_col_ce0;
input  [31:0] p_col_q0;
output  [3:0] p_col_address1;
output   p_col_ce1;
input  [31:0] p_col_q1;
input  [6:0] mul_i12;
output  [6:0] p_1_address0;
output   p_1_ce0;
output   p_1_we0;
output  [31:0] p_1_d0;

reg ap_idle;
reg[3:0] p_col_address0;
reg p_col_ce0;
reg[3:0] p_col_address1;
reg p_col_ce1;
reg[6:0] p_1_address0;
reg p_1_ce0;
reg p_1_we0;
reg[31:0] p_1_d0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln93_fu_143_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
reg   [31:0] reg_129;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln93_reg_269;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_51_reg_262;
wire   [3:0] or_ln93_fu_154_p2;
reg   [3:0] or_ln93_reg_278;
wire   [3:0] or_ln93_7_fu_189_p2;
reg   [3:0] or_ln93_7_reg_288;
wire   [3:0] or_ln93_8_fu_199_p2;
reg   [3:0] or_ln93_8_reg_298;
reg   [31:0] p_col_load_3_reg_308;
wire   [6:0] add_ln95_9_fu_238_p2;
reg   [6:0] add_ln95_9_reg_313;
wire    ap_block_pp0_stage3_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] i_65_cast24_fu_149_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln95_24_fu_160_p1;
wire   [63:0] zext_ln95_fu_184_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln95_27_fu_194_p1;
wire   [63:0] zext_ln95_30_fu_204_p1;
wire   [63:0] zext_ln95_26_fu_217_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln95_29_fu_230_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln95_32_fu_243_p1;
reg   [3:0] i_fu_40;
wire   [3:0] add_ln93_fu_165_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_51;
wire   [6:0] i_65_cast7_fu_176_p1;
wire   [6:0] add_ln95_fu_179_p2;
wire   [6:0] zext_ln95_25_fu_209_p1;
wire   [6:0] add_ln95_7_fu_212_p2;
wire   [6:0] zext_ln95_28_fu_222_p1;
wire   [6:0] add_ln95_8_fu_225_p2;
wire   [6:0] zext_ln95_31_fu_235_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln93_fu_143_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_40 <= add_ln93_fu_165_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_269 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            reg_129 <= p_col_q1;
        end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            reg_129 <= p_col_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln95_9_reg_313 <= add_ln95_9_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_51_reg_262 <= ap_sig_allocacmp_i_51;
        icmp_ln93_reg_269 <= icmp_ln93_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln93_7_reg_288[0] <= or_ln93_7_fu_189_p2[0];
or_ln93_7_reg_288[3 : 2] <= or_ln93_7_fu_189_p2[3 : 2];
        or_ln93_8_reg_298[3 : 2] <= or_ln93_8_fu_199_p2[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_fu_143_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln93_reg_278[3 : 1] <= or_ln93_fu_154_p2[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_col_load_3_reg_308 <= p_col_q0;
    end
end

always @ (*) begin
    if (((icmp_ln93_fu_143_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_51 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_51 = i_fu_40;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_1_address0 = zext_ln95_32_fu_243_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_1_address0 = zext_ln95_29_fu_230_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_1_address0 = zext_ln95_26_fu_217_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_1_address0 = zext_ln95_fu_184_p1;
    end else begin
        p_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        p_1_ce0 = 1'b1;
    end else begin
        p_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_1_d0 = p_col_load_3_reg_308;
    end else if ((((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        p_1_d0 = reg_129;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_1_d0 = p_col_q1;
    end else begin
        p_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln93_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln93_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln93_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_1_we0 = 1'b1;
    end else begin
        p_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_col_address0 = zext_ln95_30_fu_204_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_col_address0 = zext_ln95_24_fu_160_p1;
        end else begin
            p_col_address0 = 'bx;
        end
    end else begin
        p_col_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_col_address1 = zext_ln95_27_fu_194_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_col_address1 = i_65_cast24_fu_149_p1;
        end else begin
            p_col_address1 = 'bx;
        end
    end else begin
        p_col_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_col_ce0 = 1'b1;
    end else begin
        p_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_col_ce1 = 1'b1;
    end else begin
        p_col_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln93_fu_165_p2 = (ap_sig_allocacmp_i_51 + 4'd4);

assign add_ln95_7_fu_212_p2 = (zext_ln95_25_fu_209_p1 + mul_i12);

assign add_ln95_8_fu_225_p2 = (zext_ln95_28_fu_222_p1 + mul_i12);

assign add_ln95_9_fu_238_p2 = (zext_ln95_31_fu_235_p1 + mul_i12);

assign add_ln95_fu_179_p2 = (i_65_cast7_fu_176_p1 + mul_i12);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_65_cast24_fu_149_p1 = ap_sig_allocacmp_i_51;

assign i_65_cast7_fu_176_p1 = i_51_reg_262;

assign icmp_ln93_fu_143_p2 = ((ap_sig_allocacmp_i_51 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln93_7_fu_189_p2 = (i_51_reg_262 | 4'd2);

assign or_ln93_8_fu_199_p2 = (i_51_reg_262 | 4'd3);

assign or_ln93_fu_154_p2 = (ap_sig_allocacmp_i_51 | 4'd1);

assign zext_ln95_24_fu_160_p1 = or_ln93_fu_154_p2;

assign zext_ln95_25_fu_209_p1 = or_ln93_reg_278;

assign zext_ln95_26_fu_217_p1 = add_ln95_7_fu_212_p2;

assign zext_ln95_27_fu_194_p1 = or_ln93_7_fu_189_p2;

assign zext_ln95_28_fu_222_p1 = or_ln93_7_reg_288;

assign zext_ln95_29_fu_230_p1 = add_ln95_8_fu_225_p2;

assign zext_ln95_30_fu_204_p1 = or_ln93_8_fu_199_p2;

assign zext_ln95_31_fu_235_p1 = or_ln93_8_reg_298;

assign zext_ln95_32_fu_243_p1 = add_ln95_9_reg_313;

assign zext_ln95_fu_184_p1 = add_ln95_fu_179_p2;

always @ (posedge ap_clk) begin
    or_ln93_reg_278[0] <= 1'b1;
    or_ln93_7_reg_288[1] <= 1'b1;
    or_ln93_8_reg_298[1:0] <= 2'b11;
end

endmodule //tracking_backward_pass_2_Pipeline_VITIS_LOOP_93_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_backward_pass_2_Pipeline_VITIS_LOOP_133_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_col_p1_load,
        p_col_p1_load_1,
        p_col_p1_load_2,
        p_col_p1_load_3,
        p_col_p1_load_4,
        p_col_p1_load_5,
        p_col_p1_load_6,
        p_col_p1_load_7,
        p_col_p1_load_8,
        p_col_p1_load_9,
        p_col_p1_load_10,
        p_col_p1_load_11,
        AmBKt_1_address0,
        AmBKt_1_ce0,
        AmBKt_1_q0,
        AmBKt_1_address1,
        AmBKt_1_ce1,
        AmBKt_1_q1,
        tiny_x1_address0,
        tiny_x1_ce0,
        tiny_x1_we0,
        tiny_x1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p_col_p1_load;
input  [31:0] p_col_p1_load_1;
input  [31:0] p_col_p1_load_2;
input  [31:0] p_col_p1_load_3;
input  [31:0] p_col_p1_load_4;
input  [31:0] p_col_p1_load_5;
input  [31:0] p_col_p1_load_6;
input  [31:0] p_col_p1_load_7;
input  [31:0] p_col_p1_load_8;
input  [31:0] p_col_p1_load_9;
input  [31:0] p_col_p1_load_10;
input  [31:0] p_col_p1_load_11;
output  [7:0] AmBKt_1_address0;
output   AmBKt_1_ce0;
input  [31:0] AmBKt_1_q0;
output  [7:0] AmBKt_1_address1;
output   AmBKt_1_ce1;
input  [31:0] AmBKt_1_q1;
output  [3:0] tiny_x1_address0;
output   tiny_x1_ce0;
output   tiny_x1_we0;
output  [31:0] tiny_x1_d0;

reg ap_idle;
reg[7:0] AmBKt_1_address0;
reg AmBKt_1_ce0;
reg[7:0] AmBKt_1_address1;
reg AmBKt_1_ce1;
reg tiny_x1_ce0;
reg tiny_x1_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state12_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_subdone;
reg   [0:0] icmp_ln133_reg_563;
reg    ap_condition_exit_pp0_iter0_stage5;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [31:0] grp_fu_293_p2;
reg   [31:0] reg_303;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_280_p2;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage5_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state15_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] grp_fu_286_p2;
reg   [3:0] i_56_reg_558;
reg   [3:0] i_56_reg_558_pp0_iter1_reg;
reg   [3:0] i_56_reg_558_pp0_iter2_reg;
wire   [0:0] icmp_ln133_fu_328_p2;
reg   [0:0] icmp_ln133_reg_563_pp0_iter1_reg;
wire   [7:0] empty_119_fu_360_p2;
reg   [7:0] empty_119_reg_567;
wire   [31:0] grp_fu_298_p2;
reg   [31:0] mul9_i_1_reg_591;
reg   [31:0] mul9_i_2_reg_606;
reg   [31:0] mul9_i_3_reg_611;
reg   [31:0] mul9_i_5_reg_626;
reg   [31:0] mul9_i_6_reg_641;
reg   [31:0] mul9_i_7_reg_646;
reg   [31:0] mul9_i_8_reg_661;
reg   [31:0] mul9_i_9_reg_666;
reg   [31:0] mul9_i_10_reg_681;
reg   [31:0] mul9_i_s_reg_686;
reg   [31:0] mul9_i_s_reg_686_pp0_iter2_reg;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage2_subdone;
wire   [63:0] zext_ln136_fu_366_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln136_27_fu_377_p1;
wire   [63:0] zext_ln136_28_fu_392_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln136_29_fu_402_p1;
wire   [63:0] zext_ln136_30_fu_412_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln136_31_fu_422_p1;
wire   [63:0] zext_ln136_32_fu_432_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln136_33_fu_442_p1;
wire   [63:0] zext_ln136_34_fu_452_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln136_35_fu_462_p1;
wire   [63:0] zext_ln136_36_fu_472_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln136_37_fu_482_p1;
wire   [63:0] i_63_cast21_fu_487_p1;
reg   [3:0] i_fu_86;
wire   [3:0] add_ln133_fu_334_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_56;
reg   [31:0] grp_fu_280_p0;
reg   [31:0] grp_fu_280_p1;
reg   [31:0] grp_fu_286_p0;
reg   [31:0] grp_fu_286_p1;
reg   [31:0] grp_fu_293_p1;
reg   [31:0] grp_fu_298_p1;
wire   [5:0] p_shl6_fu_348_p3;
wire   [7:0] p_shl5_fu_340_p3;
wire   [7:0] p_shl6_cast_fu_356_p1;
wire   [7:0] or_ln136_fu_371_p2;
wire   [7:0] or_ln136_7_fu_387_p2;
wire   [7:0] or_ln136_8_fu_397_p2;
wire   [7:0] add_ln136_4_fu_407_p2;
wire   [7:0] add_ln136_5_fu_417_p2;
wire   [7:0] add_ln136_6_fu_427_p2;
wire   [7:0] add_ln136_7_fu_437_p2;
wire   [7:0] add_ln136_8_fu_447_p2;
wire   [7:0] add_ln136_9_fu_457_p2;
wire   [7:0] add_ln136_10_fu_467_p2;
wire   [7:0] add_ln136_fu_477_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage2;
reg    ap_idle_pp0_0to0;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_fadd_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_2_full_dsp_1_U311(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_280_p0),
    .din1(grp_fu_280_p1),
    .ce(1'b1),
    .dout(grp_fu_280_p2)
);

tracking_fadd_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_2_full_dsp_1_U312(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_286_p0),
    .din1(grp_fu_286_p1),
    .ce(1'b1),
    .dout(grp_fu_286_p2)
);

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U313(
    .din0(AmBKt_1_q1),
    .din1(grp_fu_293_p1),
    .dout(grp_fu_293_p2)
);

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U314(
    .din0(AmBKt_1_q0),
    .din1(grp_fu_298_p1),
    .dout(grp_fu_298_p2)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage5),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage5)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln133_fu_328_p2 == 1'd0))) begin
            i_fu_86 <= add_ln133_fu_334_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_86 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln133_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_119_reg_567[7 : 2] <= empty_119_fu_360_p2[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_56_reg_558 <= ap_sig_allocacmp_i_56;
        i_56_reg_558_pp0_iter1_reg <= i_56_reg_558;
        i_56_reg_558_pp0_iter2_reg <= i_56_reg_558_pp0_iter1_reg;
        icmp_ln133_reg_563 <= icmp_ln133_fu_328_p2;
        icmp_ln133_reg_563_pp0_iter1_reg <= icmp_ln133_reg_563;
        mul9_i_s_reg_686_pp0_iter2_reg <= mul9_i_s_reg_686;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul9_i_10_reg_681 <= grp_fu_293_p2;
        mul9_i_s_reg_686 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul9_i_1_reg_591 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul9_i_2_reg_606 <= grp_fu_293_p2;
        mul9_i_3_reg_611 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul9_i_5_reg_626 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mul9_i_6_reg_641 <= grp_fu_293_p2;
        mul9_i_7_reg_646 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mul9_i_8_reg_661 <= grp_fu_293_p2;
        mul9_i_9_reg_666 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        reg_303 <= grp_fu_293_p2;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            AmBKt_1_address0 = zext_ln136_37_fu_482_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            AmBKt_1_address0 = zext_ln136_35_fu_462_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            AmBKt_1_address0 = zext_ln136_33_fu_442_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            AmBKt_1_address0 = zext_ln136_31_fu_422_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            AmBKt_1_address0 = zext_ln136_29_fu_402_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            AmBKt_1_address0 = zext_ln136_27_fu_377_p1;
        end else begin
            AmBKt_1_address0 = 'bx;
        end
    end else begin
        AmBKt_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            AmBKt_1_address1 = zext_ln136_36_fu_472_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            AmBKt_1_address1 = zext_ln136_34_fu_452_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            AmBKt_1_address1 = zext_ln136_32_fu_432_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            AmBKt_1_address1 = zext_ln136_30_fu_412_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            AmBKt_1_address1 = zext_ln136_28_fu_392_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            AmBKt_1_address1 = zext_ln136_fu_366_p1;
        end else begin
            AmBKt_1_address1 = 'bx;
        end
    end else begin
        AmBKt_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        AmBKt_1_ce0 = 1'b1;
    end else begin
        AmBKt_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        AmBKt_1_ce1 = 1'b1;
    end else begin
        AmBKt_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln133_reg_563 == 1'd1) & (1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln133_reg_563_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter1_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_56 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_56 = i_fu_86;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_280_p0 = grp_fu_280_p2;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_280_p0 = reg_303;
    end else begin
        grp_fu_280_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_280_p1 = mul9_i_5_reg_626;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_280_p1 = reg_303;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_280_p1 = mul9_i_3_reg_611;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_280_p1 = mul9_i_2_reg_606;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_280_p1 = mul9_i_1_reg_591;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_280_p1 = 32'd0;
    end else begin
        grp_fu_280_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_286_p0 = grp_fu_286_p2;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_286_p0 = grp_fu_280_p2;
    end else begin
        grp_fu_286_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_286_p1 = mul9_i_s_reg_686_pp0_iter2_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_286_p1 = mul9_i_10_reg_681;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_286_p1 = mul9_i_9_reg_666;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_286_p1 = mul9_i_8_reg_661;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_286_p1 = mul9_i_7_reg_646;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_286_p1 = mul9_i_6_reg_641;
    end else begin
        grp_fu_286_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_293_p1 = p_col_p1_load_10;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_293_p1 = p_col_p1_load_8;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_293_p1 = p_col_p1_load_6;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_293_p1 = p_col_p1_load_4;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_293_p1 = p_col_p1_load_2;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_293_p1 = p_col_p1_load;
    end else begin
        grp_fu_293_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_298_p1 = p_col_p1_load_11;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_298_p1 = p_col_p1_load_9;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_298_p1 = p_col_p1_load_7;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_298_p1 = p_col_p1_load_5;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_298_p1 = p_col_p1_load_3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_298_p1 = p_col_p1_load_1;
    end else begin
        grp_fu_298_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tiny_x1_ce0 = 1'b1;
    end else begin
        tiny_x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tiny_x1_we0 = 1'b1;
    end else begin
        tiny_x1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln133_fu_334_p2 = (ap_sig_allocacmp_i_56 + 4'd1);

assign add_ln136_10_fu_467_p2 = (empty_119_reg_567 + 8'd10);

assign add_ln136_4_fu_407_p2 = (empty_119_reg_567 + 8'd4);

assign add_ln136_5_fu_417_p2 = (empty_119_reg_567 + 8'd5);

assign add_ln136_6_fu_427_p2 = (empty_119_reg_567 + 8'd6);

assign add_ln136_7_fu_437_p2 = (empty_119_reg_567 + 8'd7);

assign add_ln136_8_fu_447_p2 = (empty_119_reg_567 + 8'd8);

assign add_ln136_9_fu_457_p2 = (empty_119_reg_567 + 8'd9);

assign add_ln136_fu_477_p2 = (empty_119_reg_567 + 8'd11);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage5;

assign empty_119_fu_360_p2 = (p_shl5_fu_340_p3 - p_shl6_cast_fu_356_p1);

assign i_63_cast21_fu_487_p1 = i_56_reg_558_pp0_iter2_reg;

assign icmp_ln133_fu_328_p2 = ((ap_sig_allocacmp_i_56 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln136_7_fu_387_p2 = (empty_119_reg_567 | 8'd2);

assign or_ln136_8_fu_397_p2 = (empty_119_reg_567 | 8'd3);

assign or_ln136_fu_371_p2 = (empty_119_fu_360_p2 | 8'd1);

assign p_shl5_fu_340_p3 = {{ap_sig_allocacmp_i_56}, {4'd0}};

assign p_shl6_cast_fu_356_p1 = p_shl6_fu_348_p3;

assign p_shl6_fu_348_p3 = {{ap_sig_allocacmp_i_56}, {2'd0}};

assign tiny_x1_address0 = i_63_cast21_fu_487_p1;

assign tiny_x1_d0 = grp_fu_286_p2;

assign zext_ln136_27_fu_377_p1 = or_ln136_fu_371_p2;

assign zext_ln136_28_fu_392_p1 = or_ln136_7_fu_387_p2;

assign zext_ln136_29_fu_402_p1 = or_ln136_8_fu_397_p2;

assign zext_ln136_30_fu_412_p1 = add_ln136_4_fu_407_p2;

assign zext_ln136_31_fu_422_p1 = add_ln136_5_fu_417_p2;

assign zext_ln136_32_fu_432_p1 = add_ln136_6_fu_427_p2;

assign zext_ln136_33_fu_442_p1 = add_ln136_7_fu_437_p2;

assign zext_ln136_34_fu_452_p1 = add_ln136_8_fu_447_p2;

assign zext_ln136_35_fu_462_p1 = add_ln136_9_fu_457_p2;

assign zext_ln136_36_fu_472_p1 = add_ln136_10_fu_467_p2;

assign zext_ln136_37_fu_482_p1 = add_ln136_fu_477_p2;

assign zext_ln136_fu_366_p1 = empty_119_fu_360_p2;

always @ (posedge ap_clk) begin
    empty_119_reg_567[1:0] <= 2'b00;
end

endmodule //tracking_backward_pass_2_Pipeline_VITIS_LOOP_133_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_backward_pass_2_Pipeline_VITIS_LOOP_133_130 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_1_load,
        r_1_load_1,
        r_1_load_2,
        r_1_load_3,
        KinfT_1_address0,
        KinfT_1_ce0,
        KinfT_1_q0,
        KinfT_1_address1,
        KinfT_1_ce1,
        KinfT_1_q1,
        tiny_x2_address0,
        tiny_x2_ce0,
        tiny_x2_we0,
        tiny_x2_d0,
        grp_fu_610_p_din0,
        grp_fu_610_p_din1,
        grp_fu_610_p_opcode,
        grp_fu_610_p_dout0,
        grp_fu_610_p_ce,
        grp_fu_614_p_din0,
        grp_fu_614_p_din1,
        grp_fu_614_p_opcode,
        grp_fu_614_p_dout0,
        grp_fu_614_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] r_1_load;
input  [31:0] r_1_load_1;
input  [31:0] r_1_load_2;
input  [31:0] r_1_load_3;
output  [5:0] KinfT_1_address0;
output   KinfT_1_ce0;
input  [31:0] KinfT_1_q0;
output  [5:0] KinfT_1_address1;
output   KinfT_1_ce1;
input  [31:0] KinfT_1_q1;
output  [3:0] tiny_x2_address0;
output   tiny_x2_ce0;
output   tiny_x2_we0;
output  [31:0] tiny_x2_d0;
output  [31:0] grp_fu_610_p_din0;
output  [31:0] grp_fu_610_p_din1;
output  [0:0] grp_fu_610_p_opcode;
input  [31:0] grp_fu_610_p_dout0;
output   grp_fu_610_p_ce;
output  [31:0] grp_fu_614_p_din0;
output  [31:0] grp_fu_614_p_din1;
output  [0:0] grp_fu_614_p_opcode;
input  [31:0] grp_fu_614_p_dout0;
output   grp_fu_614_p_ce;

reg ap_idle;
reg[5:0] KinfT_1_address0;
reg KinfT_1_ce0;
reg[5:0] KinfT_1_address1;
reg KinfT_1_ce1;
reg tiny_x2_ce0;
reg tiny_x2_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln133_reg_268;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_55_reg_263;
reg   [3:0] i_55_reg_263_pp0_iter1_reg;
reg   [3:0] i_55_reg_263_pp0_iter2_reg;
wire   [0:0] icmp_ln133_fu_171_p2;
reg   [0:0] icmp_ln133_reg_268_pp0_iter1_reg;
wire   [5:0] tmp_s_fu_183_p3;
reg   [5:0] tmp_s_reg_272;
wire   [31:0] grp_fu_147_p2;
reg   [31:0] mul9_i2_reg_288;
wire   [31:0] grp_fu_152_p2;
reg   [31:0] mul9_i2_1_reg_293;
reg   [31:0] mul9_i2_2_reg_308;
reg   [31:0] mul9_i2_3_reg_313;
reg   [31:0] mul9_i2_3_reg_313_pp0_iter2_reg;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln136_fu_191_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln136_24_fu_202_p1;
wire   [63:0] zext_ln136_25_fu_217_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln136_26_fu_227_p1;
wire   [63:0] i_64_cast22_fu_232_p1;
reg   [3:0] i_fu_52;
wire   [3:0] add_ln133_fu_177_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_55;
reg   [31:0] grp_fu_134_p0;
reg   [31:0] grp_fu_134_p1;
reg   [31:0] grp_fu_140_p0;
reg   [31:0] grp_fu_140_p1;
reg   [31:0] grp_fu_147_p1;
reg   [31:0] grp_fu_152_p1;
wire   [5:0] or_ln136_fu_196_p2;
wire   [5:0] or_ln136_5_fu_212_p2;
wire   [5:0] or_ln136_6_fu_222_p2;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage1_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage0;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to3;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U331(
    .din0(KinfT_1_q1),
    .din1(grp_fu_147_p1),
    .dout(grp_fu_147_p2)
);

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U332(
    .din0(KinfT_1_q0),
    .din1(grp_fu_152_p1),
    .dout(grp_fu_152_p2)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln133_fu_171_p2 == 1'd0))) begin
            i_fu_52 <= add_ln133_fu_177_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_55_reg_263 <= ap_sig_allocacmp_i_55;
        i_55_reg_263_pp0_iter1_reg <= i_55_reg_263;
        i_55_reg_263_pp0_iter2_reg <= i_55_reg_263_pp0_iter1_reg;
        icmp_ln133_reg_268 <= icmp_ln133_fu_171_p2;
        icmp_ln133_reg_268_pp0_iter1_reg <= icmp_ln133_reg_268;
        mul9_i2_3_reg_313_pp0_iter2_reg <= mul9_i2_3_reg_313;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_268 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul9_i2_1_reg_293 <= grp_fu_152_p2;
        mul9_i2_reg_288 <= grp_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul9_i2_2_reg_308 <= grp_fu_147_p2;
        mul9_i2_3_reg_313 <= grp_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln133_fu_171_p2 == 1'd0))) begin
        tmp_s_reg_272[5 : 2] <= tmp_s_fu_183_p3[5 : 2];
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            KinfT_1_address0 = zext_ln136_26_fu_227_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            KinfT_1_address0 = zext_ln136_24_fu_202_p1;
        end else begin
            KinfT_1_address0 = 'bx;
        end
    end else begin
        KinfT_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            KinfT_1_address1 = zext_ln136_25_fu_217_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            KinfT_1_address1 = zext_ln136_fu_191_p1;
        end else begin
            KinfT_1_address1 = 'bx;
        end
    end else begin
        KinfT_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        KinfT_1_ce0 = 1'b1;
    end else begin
        KinfT_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        KinfT_1_ce1 = 1'b1;
    end else begin
        KinfT_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln133_reg_268 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln133_reg_268_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_55 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_55 = i_fu_52;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_134_p0 = grp_fu_610_p_dout0;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_134_p0 = mul9_i2_reg_288;
        end else begin
            grp_fu_134_p0 = 'bx;
        end
    end else begin
        grp_fu_134_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_134_p1 = mul9_i2_1_reg_293;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_134_p1 = 32'd0;
        end else begin
            grp_fu_134_p1 = 'bx;
        end
    end else begin
        grp_fu_134_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_140_p0 = grp_fu_614_p_dout0;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_140_p0 = grp_fu_610_p_dout0;
        end else begin
            grp_fu_140_p0 = 'bx;
        end
    end else begin
        grp_fu_140_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_140_p1 = mul9_i2_3_reg_313_pp0_iter2_reg;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_140_p1 = mul9_i2_2_reg_308;
        end else begin
            grp_fu_140_p1 = 'bx;
        end
    end else begin
        grp_fu_140_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_147_p1 = r_1_load_2;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_147_p1 = r_1_load;
    end else begin
        grp_fu_147_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_152_p1 = r_1_load_3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_152_p1 = r_1_load_1;
    end else begin
        grp_fu_152_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x2_ce0 = 1'b1;
    end else begin
        tiny_x2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x2_we0 = 1'b1;
    end else begin
        tiny_x2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln133_fu_177_p2 = (ap_sig_allocacmp_i_55 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign grp_fu_610_p_ce = 1'b1;

assign grp_fu_610_p_din0 = grp_fu_134_p0;

assign grp_fu_610_p_din1 = grp_fu_134_p1;

assign grp_fu_610_p_opcode = 2'd0;

assign grp_fu_614_p_ce = 1'b1;

assign grp_fu_614_p_din0 = grp_fu_140_p0;

assign grp_fu_614_p_din1 = grp_fu_140_p1;

assign grp_fu_614_p_opcode = 2'd0;

assign i_64_cast22_fu_232_p1 = i_55_reg_263_pp0_iter2_reg;

assign icmp_ln133_fu_171_p2 = ((ap_sig_allocacmp_i_55 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln136_5_fu_212_p2 = (tmp_s_reg_272 | 6'd2);

assign or_ln136_6_fu_222_p2 = (tmp_s_reg_272 | 6'd3);

assign or_ln136_fu_196_p2 = (tmp_s_fu_183_p3 | 6'd1);

assign tiny_x2_address0 = i_64_cast22_fu_232_p1;

assign tiny_x2_d0 = grp_fu_614_p_dout0;

assign tmp_s_fu_183_p3 = {{ap_sig_allocacmp_i_55}, {2'd0}};

assign zext_ln136_24_fu_202_p1 = or_ln136_fu_196_p2;

assign zext_ln136_25_fu_217_p1 = or_ln136_5_fu_212_p2;

assign zext_ln136_26_fu_227_p1 = or_ln136_6_fu_222_p2;

assign zext_ln136_fu_191_p1 = tmp_s_fu_183_p3;

always @ (posedge ap_clk) begin
    tmp_s_reg_272[1:0] <= 2'b00;
end

endmodule //tracking_backward_pass_2_Pipeline_VITIS_LOOP_133_130
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_backward_pass_2_Pipeline_VITIS_LOOP_168_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tiny_x1_address0,
        tiny_x1_ce0,
        tiny_x1_q0,
        tiny_x2_address0,
        tiny_x2_ce0,
        tiny_x2_q0,
        tiny_x3_address0,
        tiny_x3_ce0,
        tiny_x3_we0,
        tiny_x3_d0,
        grp_fu_610_p_din0,
        grp_fu_610_p_din1,
        grp_fu_610_p_opcode,
        grp_fu_610_p_dout0,
        grp_fu_610_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] tiny_x1_address0;
output   tiny_x1_ce0;
input  [31:0] tiny_x1_q0;
output  [3:0] tiny_x2_address0;
output   tiny_x2_ce0;
input  [31:0] tiny_x2_q0;
output  [3:0] tiny_x3_address0;
output   tiny_x3_ce0;
output   tiny_x3_we0;
output  [31:0] tiny_x3_d0;
output  [31:0] grp_fu_610_p_din0;
output  [31:0] grp_fu_610_p_din1;
output  [0:0] grp_fu_610_p_opcode;
input  [31:0] grp_fu_610_p_dout0;
output   grp_fu_610_p_ce;

reg ap_idle;
reg tiny_x1_ce0;
reg tiny_x2_ce0;
reg tiny_x3_ce0;
reg tiny_x3_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln168_fu_90_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] j_cast_fu_102_p1;
reg   [63:0] j_cast_reg_124;
reg   [63:0] j_cast_reg_124_pp0_iter1_reg;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_32;
wire   [3:0] add_ln168_fu_96_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_17;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln168_fu_90_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_32 <= add_ln168_fu_96_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_32 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        j_cast_reg_124_pp0_iter1_reg[3 : 0] <= j_cast_reg_124[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln168_fu_90_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_cast_reg_124[3 : 0] <= j_cast_fu_102_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln168_fu_90_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_17 = 4'd0;
    end else begin
        ap_sig_allocacmp_j_17 = j_fu_32;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x1_ce0 = 1'b1;
    end else begin
        tiny_x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x2_ce0 = 1'b1;
    end else begin
        tiny_x2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tiny_x3_ce0 = 1'b1;
    end else begin
        tiny_x3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tiny_x3_we0 = 1'b1;
    end else begin
        tiny_x3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln168_fu_96_p2 = (ap_sig_allocacmp_j_17 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_610_p_ce = 1'b1;

assign grp_fu_610_p_din0 = tiny_x1_q0;

assign grp_fu_610_p_din1 = tiny_x2_q0;

assign grp_fu_610_p_opcode = 2'd1;

assign icmp_ln168_fu_90_p2 = ((ap_sig_allocacmp_j_17 == 4'd12) ? 1'b1 : 1'b0);

assign j_cast_fu_102_p1 = ap_sig_allocacmp_j_17;

assign tiny_x1_address0 = j_cast_fu_102_p1;

assign tiny_x2_address0 = j_cast_fu_102_p1;

assign tiny_x3_address0 = j_cast_reg_124_pp0_iter1_reg;

assign tiny_x3_d0 = grp_fu_610_p_dout0;

always @ (posedge ap_clk) begin
    j_cast_reg_124[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_cast_reg_124_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_backward_pass_2_Pipeline_VITIS_LOOP_168_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_backward_pass_2_Pipeline_VITIS_LOOP_177_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        q_col_address0,
        q_col_ce0,
        q_col_q0,
        p_col_address0,
        p_col_ce0,
        p_col_we0,
        p_col_d0,
        tiny_x3_address0,
        tiny_x3_ce0,
        tiny_x3_q0,
        grp_fu_610_p_din0,
        grp_fu_610_p_din1,
        grp_fu_610_p_opcode,
        grp_fu_610_p_dout0,
        grp_fu_610_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] q_col_address0;
output   q_col_ce0;
input  [31:0] q_col_q0;
output  [3:0] p_col_address0;
output   p_col_ce0;
output   p_col_we0;
output  [31:0] p_col_d0;
output  [3:0] tiny_x3_address0;
output   tiny_x3_ce0;
input  [31:0] tiny_x3_q0;
output  [31:0] grp_fu_610_p_din0;
output  [31:0] grp_fu_610_p_din1;
output  [0:0] grp_fu_610_p_opcode;
input  [31:0] grp_fu_610_p_dout0;
output   grp_fu_610_p_ce;

reg ap_idle;
reg q_col_ce0;
reg p_col_ce0;
reg p_col_we0;
reg tiny_x3_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln177_fu_90_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] j_38_cast_fu_102_p1;
reg   [63:0] j_38_cast_reg_124;
reg   [63:0] j_38_cast_reg_124_pp0_iter1_reg;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_32;
wire   [3:0] add_ln177_fu_96_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_16;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln177_fu_90_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_32 <= add_ln177_fu_96_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_32 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        j_38_cast_reg_124_pp0_iter1_reg[3 : 0] <= j_38_cast_reg_124[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_fu_90_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_38_cast_reg_124[3 : 0] <= j_38_cast_fu_102_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln177_fu_90_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_16 = 4'd0;
    end else begin
        ap_sig_allocacmp_j_16 = j_fu_32;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_col_ce0 = 1'b1;
    end else begin
        p_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_col_we0 = 1'b1;
    end else begin
        p_col_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_col_ce0 = 1'b1;
    end else begin
        q_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x3_ce0 = 1'b1;
    end else begin
        tiny_x3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln177_fu_96_p2 = (ap_sig_allocacmp_j_16 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_610_p_ce = 1'b1;

assign grp_fu_610_p_din0 = tiny_x3_q0;

assign grp_fu_610_p_din1 = q_col_q0;

assign grp_fu_610_p_opcode = 2'd0;

assign icmp_ln177_fu_90_p2 = ((ap_sig_allocacmp_j_16 == 4'd12) ? 1'b1 : 1'b0);

assign j_38_cast_fu_102_p1 = ap_sig_allocacmp_j_16;

assign p_col_address0 = j_38_cast_reg_124_pp0_iter1_reg;

assign p_col_d0 = grp_fu_610_p_dout0;

assign q_col_address0 = j_38_cast_fu_102_p1;

assign tiny_x3_address0 = j_38_cast_fu_102_p1;

always @ (posedge ap_clk) begin
    j_38_cast_reg_124[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_38_cast_reg_124_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_backward_pass_2_Pipeline_VITIS_LOOP_177_2
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_backward_pass_2_q_col_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0, address1, ce1, d1, we1,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 4;
parameter AddressRange = 12;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];




always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
    end
end


endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_backward_pass_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i,
        p_1_address0,
        p_1_ce0,
        p_1_we0,
        p_1_d0,
        p_1_q0,
        p_1_address1,
        p_1_ce1,
        p_1_q1,
        r_1_address0,
        r_1_ce0,
        r_1_q0,
        r_1_address1,
        r_1_ce1,
        r_1_q1,
        q_1_address0,
        q_1_ce0,
        q_1_q0,
        q_1_address1,
        q_1_ce1,
        q_1_q1,
        AmBKt_1_address0,
        AmBKt_1_ce0,
        AmBKt_1_q0,
        AmBKt_1_address1,
        AmBKt_1_ce1,
        AmBKt_1_q1,
        tiny_x1_address0,
        tiny_x1_ce0,
        tiny_x1_we0,
        tiny_x1_d0,
        tiny_x1_q0,
        KinfT_1_address0,
        KinfT_1_ce0,
        KinfT_1_q0,
        KinfT_1_address1,
        KinfT_1_ce1,
        KinfT_1_q1,
        tiny_x2_address0,
        tiny_x2_ce0,
        tiny_x2_we0,
        tiny_x2_d0,
        tiny_x2_q0,
        tiny_x3_address0,
        tiny_x3_ce0,
        tiny_x3_we0,
        tiny_x3_d0,
        tiny_x3_q0,
        grp_fu_743_p_din0,
        grp_fu_743_p_din1,
        grp_fu_743_p_opcode,
        grp_fu_743_p_dout0,
        grp_fu_743_p_ce,
        grp_fu_2073_p_din0,
        grp_fu_2073_p_din1,
        grp_fu_2073_p_opcode,
        grp_fu_2073_p_dout0,
        grp_fu_2073_p_ce
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] i;
output  [6:0] p_1_address0;
output   p_1_ce0;
output   p_1_we0;
output  [31:0] p_1_d0;
input  [31:0] p_1_q0;
output  [6:0] p_1_address1;
output   p_1_ce1;
input  [31:0] p_1_q1;
output  [5:0] r_1_address0;
output   r_1_ce0;
input  [31:0] r_1_q0;
output  [5:0] r_1_address1;
output   r_1_ce1;
input  [31:0] r_1_q1;
output  [6:0] q_1_address0;
output   q_1_ce0;
input  [31:0] q_1_q0;
output  [6:0] q_1_address1;
output   q_1_ce1;
input  [31:0] q_1_q1;
output  [7:0] AmBKt_1_address0;
output   AmBKt_1_ce0;
input  [31:0] AmBKt_1_q0;
output  [7:0] AmBKt_1_address1;
output   AmBKt_1_ce1;
input  [31:0] AmBKt_1_q1;
output  [3:0] tiny_x1_address0;
output   tiny_x1_ce0;
output   tiny_x1_we0;
output  [31:0] tiny_x1_d0;
input  [31:0] tiny_x1_q0;
output  [5:0] KinfT_1_address0;
output   KinfT_1_ce0;
input  [31:0] KinfT_1_q0;
output  [5:0] KinfT_1_address1;
output   KinfT_1_ce1;
input  [31:0] KinfT_1_q1;
output  [3:0] tiny_x2_address0;
output   tiny_x2_ce0;
output   tiny_x2_we0;
output  [31:0] tiny_x2_d0;
input  [31:0] tiny_x2_q0;
output  [3:0] tiny_x3_address0;
output   tiny_x3_ce0;
output   tiny_x3_we0;
output  [31:0] tiny_x3_d0;
input  [31:0] tiny_x3_q0;
output  [31:0] grp_fu_743_p_din0;
output  [31:0] grp_fu_743_p_din1;
output  [1:0] grp_fu_743_p_opcode;
input  [31:0] grp_fu_743_p_dout0;
output   grp_fu_743_p_ce;
output  [31:0] grp_fu_2073_p_din0;
output  [31:0] grp_fu_2073_p_din1;
output  [0:0] grp_fu_2073_p_opcode;
input  [31:0] grp_fu_2073_p_dout0;
output   grp_fu_2073_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] p_1_address0;
reg p_1_ce0;
reg p_1_we0;
reg[6:0] p_1_address1;
reg p_1_ce1;
reg[5:0] r_1_address0;
reg r_1_ce0;
reg[5:0] r_1_address1;
reg r_1_ce1;
reg[3:0] tiny_x1_address0;
reg tiny_x1_ce0;
reg tiny_x1_we0;
reg[3:0] tiny_x2_address0;
reg tiny_x2_ce0;
reg tiny_x2_we0;
reg[3:0] tiny_x3_address0;
reg tiny_x3_ce0;
reg tiny_x3_we0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] mul_i_fu_358_p2;
reg   [6:0] mul_i_reg_430;
wire   [5:0] mul_i1_fu_365_p3;
reg   [5:0] mul_i1_reg_435;
wire   [6:0] mul_i12_fu_389_p2;
reg   [6:0] mul_i12_reg_443;
wire    ap_CS_fsm_state3;
wire   [31:0] p_col_p1_q1;
reg   [31:0] p_col_p1_load_reg_460;
wire    ap_CS_fsm_state4;
wire   [31:0] p_col_p1_q0;
reg   [31:0] p_col_p1_load_1_reg_465;
reg   [31:0] p_col_p1_load_2_reg_480;
wire    ap_CS_fsm_state5;
reg   [31:0] p_col_p1_load_3_reg_485;
reg   [31:0] p_col_p1_load_4_reg_500;
wire    ap_CS_fsm_state6;
reg   [31:0] p_col_p1_load_5_reg_505;
wire    ap_CS_fsm_state7;
reg   [31:0] p_col_p1_load_6_reg_530;
reg   [31:0] p_col_p1_load_7_reg_535;
reg   [31:0] r_1_load_reg_550;
wire    ap_CS_fsm_state8;
reg   [31:0] r_1_load_1_reg_555;
reg   [31:0] p_col_p1_load_8_reg_570;
reg   [31:0] p_col_p1_load_9_reg_575;
reg   [31:0] r_1_load_2_reg_590;
wire    ap_CS_fsm_state9;
reg   [31:0] r_1_load_3_reg_595;
reg   [31:0] p_col_p1_load_10_reg_600;
reg   [31:0] p_col_p1_load_11_reg_605;
reg   [3:0] p_col_p1_address0;
reg    p_col_p1_ce0;
reg    p_col_p1_we0;
reg   [3:0] p_col_p1_address1;
reg    p_col_p1_ce1;
reg    p_col_p1_we1;
reg   [3:0] q_col_address0;
reg    q_col_ce0;
reg    q_col_we0;
wire   [31:0] q_col_q0;
reg    q_col_ce1;
reg    q_col_we1;
reg   [3:0] p_col_address0;
reg    p_col_ce0;
reg    p_col_we0;
reg   [31:0] p_col_d0;
wire   [31:0] p_col_q0;
reg   [3:0] p_col_address1;
reg    p_col_ce1;
reg    p_col_we1;
wire   [31:0] p_col_q1;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_ap_start;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_ap_done;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_ap_idle;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_ap_ready;
wire   [3:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_address0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_ce0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_we0;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_d0;
wire   [3:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_address1;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_ce1;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_we1;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_d1;
wire   [6:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_1_address0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_1_ce0;
wire   [6:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_1_address1;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_1_ce1;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_ap_start;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_ap_done;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_ap_idle;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_ap_ready;
wire   [3:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_address0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_ce0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_we0;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_d0;
wire   [3:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_address1;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_ce1;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_we1;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_d1;
wire   [6:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_1_address0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_1_ce0;
wire   [6:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_1_address1;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_1_ce1;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_ap_start;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_ap_done;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_ap_idle;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_ap_ready;
wire   [3:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_address0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_ce0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_we0;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_d0;
wire   [3:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_address1;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_ce1;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_we1;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_d1;
wire   [6:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_1_address0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_1_ce0;
wire   [6:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_1_address1;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_1_ce1;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_ap_start;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_ap_done;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_ap_idle;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_ap_ready;
wire   [7:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_AmBKt_1_address0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_AmBKt_1_ce0;
wire   [7:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_AmBKt_1_address1;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_AmBKt_1_ce1;
wire   [3:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_tiny_x1_address0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_tiny_x1_ce0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_tiny_x1_we0;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_tiny_x1_d0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_ap_start;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_ap_done;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_ap_idle;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_ap_ready;
wire   [5:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_KinfT_1_address0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_KinfT_1_ce0;
wire   [5:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_KinfT_1_address1;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_KinfT_1_ce1;
wire   [3:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_tiny_x2_address0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_tiny_x2_ce0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_tiny_x2_we0;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_tiny_x2_d0;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_610_p_din0;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_610_p_din1;
wire   [0:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_610_p_opcode;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_610_p_ce;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_614_p_din0;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_614_p_din1;
wire   [0:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_614_p_opcode;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_614_p_ce;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_ap_start;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_ap_done;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_ap_idle;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_ap_ready;
wire   [3:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x1_address0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x1_ce0;
wire   [3:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x2_address0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x2_ce0;
wire   [3:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x3_address0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x3_ce0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x3_we0;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x3_d0;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_grp_fu_610_p_din0;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_grp_fu_610_p_din1;
wire   [0:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_grp_fu_610_p_opcode;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_grp_fu_610_p_ce;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_ap_start;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_ap_done;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_ap_idle;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_ap_ready;
wire   [3:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_q_col_address0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_q_col_ce0;
wire   [3:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_p_col_address0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_p_col_ce0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_p_col_we0;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_p_col_d0;
wire   [3:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_tiny_x3_address0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_tiny_x3_ce0;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_grp_fu_610_p_din0;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_grp_fu_610_p_din1;
wire   [0:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_grp_fu_610_p_opcode;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_grp_fu_610_p_ce;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_start;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_done;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_idle;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_ready;
wire   [3:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_col_address0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_col_ce0;
wire   [3:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_col_address1;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_col_ce1;
wire   [6:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_1_address0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_1_ce0;
wire    grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_1_we0;
wire   [31:0] grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_1_d0;
reg    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_ap_start_reg;
reg    grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_ap_start_reg;
wire    ap_CS_fsm_state10;
reg    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_ap_start_reg;
reg    grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_ap_start_reg;
reg    grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg    grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_ap_start_reg;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg    grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_start_reg;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire   [63:0] zext_ln88_74_fu_396_p1;
wire   [63:0] zext_ln88_75_fu_405_p1;
wire   [63:0] zext_ln88_76_fu_415_p1;
wire   [63:0] zext_ln88_77_fu_425_p1;
wire   [3:0] add_ln48_fu_328_p2;
wire   [2:0] empty_fu_334_p1;
wire   [5:0] p_shl1_fu_346_p3;
wire   [6:0] p_shl_fu_338_p3;
wire   [6:0] p_shl1_cast_fu_354_p1;
wire   [2:0] empty_120_fu_377_p1;
wire   [6:0] p_shl2_fu_381_p3;
wire   [6:0] zext_ln88_fu_373_p1;
wire   [5:0] or_ln88_4_fu_400_p2;
wire   [5:0] or_ln88_fu_410_p2;
wire   [5:0] or_ln88_3_fu_420_p2;
reg   [31:0] grp_fu_610_p0;
reg   [31:0] grp_fu_610_p1;
reg   [1:0] grp_fu_610_opcode;
reg    grp_fu_610_ce;
reg    grp_fu_614_ce;
reg   [15:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_block_state2_on_subcall_done;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_block_state10_on_subcall_done;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_ap_start_reg = 1'b0;
#0 grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_ap_start_reg = 1'b0;
#0 grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_ap_start_reg = 1'b0;
#0 grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_ap_start_reg = 1'b0;
#0 grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_ap_start_reg = 1'b0;
#0 grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_ap_start_reg = 1'b0;
#0 grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_ap_start_reg = 1'b0;
#0 grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_start_reg = 1'b0;
end

tracking_forward_pass_2_x_col_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
p_col_p1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_col_p1_address0),
    .ce0(p_col_p1_ce0),
    .we0(p_col_p1_we0),
    .d0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_d0),
    .q0(p_col_p1_q0),
    .address1(p_col_p1_address1),
    .ce1(p_col_p1_ce1),
    .we1(p_col_p1_we1),
    .d1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_d1),
    .q1(p_col_p1_q1)
);

tracking_backward_pass_2_q_col_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
q_col_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q_col_address0),
    .ce0(q_col_ce0),
    .we0(q_col_we0),
    .d0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_d0),
    .q0(q_col_q0),
    .address1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_address1),
    .ce1(q_col_ce1),
    .we1(q_col_we1),
    .d1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_d1)
);

tracking_forward_pass_2_x_col_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
p_col_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_col_address0),
    .ce0(p_col_ce0),
    .we0(p_col_we0),
    .d0(p_col_d0),
    .q0(p_col_q0),
    .address1(p_col_address1),
    .ce1(p_col_ce1),
    .we1(p_col_we1),
    .d1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_d1),
    .q1(p_col_q1)
);

tracking_backward_pass_2_Pipeline_VITIS_LOOP_86_1 grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_ap_start),
    .ap_done(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_ap_done),
    .ap_idle(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_ap_idle),
    .ap_ready(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_ap_ready),
    .mul_i(mul_i_reg_430),
    .p_col_p1_address0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_address0),
    .p_col_p1_ce0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_ce0),
    .p_col_p1_we0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_we0),
    .p_col_p1_d0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_d0),
    .p_col_p1_address1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_address1),
    .p_col_p1_ce1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_ce1),
    .p_col_p1_we1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_we1),
    .p_col_p1_d1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_d1),
    .p_1_address0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_1_address0),
    .p_1_ce0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_1_ce0),
    .p_1_q0(p_1_q0),
    .p_1_address1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_1_address1),
    .p_1_ce1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_1_ce1),
    .p_1_q1(p_1_q1)
);

tracking_backward_pass_2_Pipeline_VITIS_LOOP_86_128 grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_ap_start),
    .ap_done(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_ap_done),
    .ap_idle(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_ap_idle),
    .ap_ready(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_ap_ready),
    .mul_i12(mul_i12_reg_443),
    .q_col_address0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_address0),
    .q_col_ce0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_ce0),
    .q_col_we0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_we0),
    .q_col_d0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_d0),
    .q_col_address1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_address1),
    .q_col_ce1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_ce1),
    .q_col_we1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_we1),
    .q_col_d1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_d1),
    .q_1_address0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_1_address0),
    .q_1_ce0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_1_ce0),
    .q_1_q0(q_1_q0),
    .q_1_address1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_1_address1),
    .q_1_ce1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_1_ce1),
    .q_1_q1(q_1_q1)
);

tracking_backward_pass_2_Pipeline_VITIS_LOOP_86_129 grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_ap_start),
    .ap_done(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_ap_done),
    .ap_idle(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_ap_idle),
    .ap_ready(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_ap_ready),
    .mul_i12(mul_i12_reg_443),
    .p_col_address0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_address0),
    .p_col_ce0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_ce0),
    .p_col_we0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_we0),
    .p_col_d0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_d0),
    .p_col_address1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_address1),
    .p_col_ce1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_ce1),
    .p_col_we1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_we1),
    .p_col_d1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_d1),
    .p_1_address0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_1_address0),
    .p_1_ce0(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_1_ce0),
    .p_1_q0(p_1_q0),
    .p_1_address1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_1_address1),
    .p_1_ce1(grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_1_ce1),
    .p_1_q1(p_1_q1)
);

tracking_backward_pass_2_Pipeline_VITIS_LOOP_133_1 grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_ap_start),
    .ap_done(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_ap_done),
    .ap_idle(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_ap_idle),
    .ap_ready(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_ap_ready),
    .p_col_p1_load(p_col_p1_load_reg_460),
    .p_col_p1_load_1(p_col_p1_load_1_reg_465),
    .p_col_p1_load_2(p_col_p1_load_2_reg_480),
    .p_col_p1_load_3(p_col_p1_load_3_reg_485),
    .p_col_p1_load_4(p_col_p1_load_4_reg_500),
    .p_col_p1_load_5(p_col_p1_load_5_reg_505),
    .p_col_p1_load_6(p_col_p1_load_6_reg_530),
    .p_col_p1_load_7(p_col_p1_load_7_reg_535),
    .p_col_p1_load_8(p_col_p1_load_8_reg_570),
    .p_col_p1_load_9(p_col_p1_load_9_reg_575),
    .p_col_p1_load_10(p_col_p1_load_10_reg_600),
    .p_col_p1_load_11(p_col_p1_load_11_reg_605),
    .AmBKt_1_address0(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_AmBKt_1_address0),
    .AmBKt_1_ce0(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_AmBKt_1_ce0),
    .AmBKt_1_q0(AmBKt_1_q0),
    .AmBKt_1_address1(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_AmBKt_1_address1),
    .AmBKt_1_ce1(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_AmBKt_1_ce1),
    .AmBKt_1_q1(AmBKt_1_q1),
    .tiny_x1_address0(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_tiny_x1_address0),
    .tiny_x1_ce0(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_tiny_x1_ce0),
    .tiny_x1_we0(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_tiny_x1_we0),
    .tiny_x1_d0(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_tiny_x1_d0)
);

tracking_backward_pass_2_Pipeline_VITIS_LOOP_133_130 grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_ap_start),
    .ap_done(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_ap_done),
    .ap_idle(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_ap_idle),
    .ap_ready(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_ap_ready),
    .r_1_load(r_1_load_reg_550),
    .r_1_load_1(r_1_load_1_reg_555),
    .r_1_load_2(r_1_load_2_reg_590),
    .r_1_load_3(r_1_load_3_reg_595),
    .KinfT_1_address0(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_KinfT_1_address0),
    .KinfT_1_ce0(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_KinfT_1_ce0),
    .KinfT_1_q0(KinfT_1_q0),
    .KinfT_1_address1(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_KinfT_1_address1),
    .KinfT_1_ce1(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_KinfT_1_ce1),
    .KinfT_1_q1(KinfT_1_q1),
    .tiny_x2_address0(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_tiny_x2_address0),
    .tiny_x2_ce0(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_tiny_x2_ce0),
    .tiny_x2_we0(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_tiny_x2_we0),
    .tiny_x2_d0(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_tiny_x2_d0),
    .grp_fu_610_p_din0(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_610_p_din0),
    .grp_fu_610_p_din1(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_610_p_din1),
    .grp_fu_610_p_opcode(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_610_p_opcode),
    .grp_fu_610_p_dout0(grp_fu_743_p_dout0),
    .grp_fu_610_p_ce(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_610_p_ce),
    .grp_fu_614_p_din0(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_614_p_din0),
    .grp_fu_614_p_din1(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_614_p_din1),
    .grp_fu_614_p_opcode(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_614_p_opcode),
    .grp_fu_614_p_dout0(grp_fu_2073_p_dout0),
    .grp_fu_614_p_ce(grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_614_p_ce)
);

tracking_backward_pass_2_Pipeline_VITIS_LOOP_168_2 grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_ap_start),
    .ap_done(grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_ap_done),
    .ap_idle(grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_ap_idle),
    .ap_ready(grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_ap_ready),
    .tiny_x1_address0(grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x1_address0),
    .tiny_x1_ce0(grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x1_ce0),
    .tiny_x1_q0(tiny_x1_q0),
    .tiny_x2_address0(grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x2_address0),
    .tiny_x2_ce0(grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x2_ce0),
    .tiny_x2_q0(tiny_x2_q0),
    .tiny_x3_address0(grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x3_address0),
    .tiny_x3_ce0(grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x3_ce0),
    .tiny_x3_we0(grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x3_we0),
    .tiny_x3_d0(grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x3_d0),
    .grp_fu_610_p_din0(grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_grp_fu_610_p_din0),
    .grp_fu_610_p_din1(grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_grp_fu_610_p_din1),
    .grp_fu_610_p_opcode(grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_grp_fu_610_p_opcode),
    .grp_fu_610_p_dout0(grp_fu_743_p_dout0),
    .grp_fu_610_p_ce(grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_grp_fu_610_p_ce)
);

tracking_backward_pass_2_Pipeline_VITIS_LOOP_177_2 grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_ap_start),
    .ap_done(grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_ap_done),
    .ap_idle(grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_ap_idle),
    .ap_ready(grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_ap_ready),
    .q_col_address0(grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_q_col_address0),
    .q_col_ce0(grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_q_col_ce0),
    .q_col_q0(q_col_q0),
    .p_col_address0(grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_p_col_address0),
    .p_col_ce0(grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_p_col_ce0),
    .p_col_we0(grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_p_col_we0),
    .p_col_d0(grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_p_col_d0),
    .tiny_x3_address0(grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_tiny_x3_address0),
    .tiny_x3_ce0(grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_tiny_x3_ce0),
    .tiny_x3_q0(tiny_x3_q0),
    .grp_fu_610_p_din0(grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_grp_fu_610_p_din0),
    .grp_fu_610_p_din1(grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_grp_fu_610_p_din1),
    .grp_fu_610_p_opcode(grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_grp_fu_610_p_opcode),
    .grp_fu_610_p_dout0(grp_fu_743_p_dout0),
    .grp_fu_610_p_ce(grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_grp_fu_610_p_ce)
);

tracking_backward_pass_2_Pipeline_VITIS_LOOP_93_1 grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_start),
    .ap_done(grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_done),
    .ap_idle(grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_idle),
    .ap_ready(grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_ready),
    .p_col_address0(grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_col_address0),
    .p_col_ce0(grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_col_ce0),
    .p_col_q0(p_col_q0),
    .p_col_address1(grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_col_address1),
    .p_col_ce1(grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_col_ce1),
    .p_col_q1(p_col_q1),
    .mul_i12(mul_i12_reg_443),
    .p_1_address0(grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_1_address0),
    .p_1_ce0(grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_1_ce0),
    .p_1_we0(grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_1_we0),
    .p_1_d0(grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_1_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_ap_start_reg <= 1'b1;
        end else if ((grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_ap_ready == 1'b1)) begin
            grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_ap_start_reg <= 1'b1;
        end else if ((grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_ap_ready == 1'b1)) begin
            grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_ap_start_reg <= 1'b1;
        end else if ((grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_ap_ready == 1'b1)) begin
            grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_ap_start_reg <= 1'b1;
        end else if ((grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_ap_ready == 1'b1)) begin
            grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_ap_start_reg <= 1'b1;
        end else if ((grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_ap_ready == 1'b1)) begin
            grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_ap_start_reg <= 1'b1;
        end else if ((grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_ap_ready == 1'b1)) begin
            grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_ap_start_reg <= 1'b1;
        end else if ((grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_ap_ready == 1'b1)) begin
            grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_start_reg <= 1'b1;
        end else if ((grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_ready == 1'b1)) begin
            grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        mul_i12_reg_443[6 : 2] <= mul_i12_fu_389_p2[6 : 2];
        mul_i1_reg_435[5 : 2] <= mul_i1_fu_365_p3[5 : 2];
        mul_i_reg_430[6 : 2] <= mul_i_fu_358_p2[6 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_col_p1_load_10_reg_600 <= p_col_p1_q1;
        p_col_p1_load_11_reg_605 <= p_col_p1_q0;
        r_1_load_2_reg_590 <= r_1_q1;
        r_1_load_3_reg_595 <= r_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_col_p1_load_1_reg_465 <= p_col_p1_q0;
        p_col_p1_load_reg_460 <= p_col_p1_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_col_p1_load_2_reg_480 <= p_col_p1_q1;
        p_col_p1_load_3_reg_485 <= p_col_p1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_col_p1_load_4_reg_500 <= p_col_p1_q1;
        p_col_p1_load_5_reg_505 <= p_col_p1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_col_p1_load_6_reg_530 <= p_col_p1_q1;
        p_col_p1_load_7_reg_535 <= p_col_p1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_col_p1_load_8_reg_570 <= p_col_p1_q1;
        p_col_p1_load_9_reg_575 <= p_col_p1_q0;
        r_1_load_1_reg_555 <= r_1_q0;
        r_1_load_reg_550 <= r_1_q1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state10_on_subcall_done)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_ap_done == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_ap_done == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_610_ce = grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_grp_fu_610_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_610_ce = grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_grp_fu_610_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_610_ce = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_610_p_ce;
    end else begin
        grp_fu_610_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_610_opcode = grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_grp_fu_610_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_610_opcode = grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_grp_fu_610_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_610_opcode = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_610_p_opcode;
    end else begin
        grp_fu_610_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_610_p0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_grp_fu_610_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_610_p0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_grp_fu_610_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_610_p0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_610_p_din0;
    end else begin
        grp_fu_610_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_610_p1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_grp_fu_610_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_610_p1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_grp_fu_610_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_610_p1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_610_p_din1;
    end else begin
        grp_fu_610_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_614_ce = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_614_p_ce;
    end else begin
        grp_fu_614_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_1_address0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_1_address0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_1_address0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_1_address0;
    end else begin
        p_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_1_address1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_1_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_1_address1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_1_address1;
    end else begin
        p_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_1_ce0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_1_ce0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_1_ce0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_1_ce0;
    end else begin
        p_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_1_ce1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_1_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_1_ce1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_1_ce1;
    end else begin
        p_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_1_we0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_1_we0;
    end else begin
        p_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_col_address0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_col_address0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        p_col_address0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_p_col_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_col_address0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_address0;
    end else begin
        p_col_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_col_address1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_col_address1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_col_address1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_address1;
    end else begin
        p_col_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_col_ce0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_col_ce0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        p_col_ce0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_p_col_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_col_ce0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_ce0;
    end else begin
        p_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_col_ce1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_col_ce1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_col_ce1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_ce1;
    end else begin
        p_col_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        p_col_d0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_p_col_d0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_col_d0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_d0;
    end else begin
        p_col_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_col_p1_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_col_p1_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_col_p1_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_col_p1_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_col_p1_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_col_p1_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_p1_address0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_address0;
    end else begin
        p_col_p1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_col_p1_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_col_p1_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_col_p1_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_col_p1_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_col_p1_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_col_p1_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_p1_address1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_address1;
    end else begin
        p_col_p1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        p_col_p1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_p1_ce0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_ce0;
    end else begin
        p_col_p1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        p_col_p1_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_p1_ce1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_ce1;
    end else begin
        p_col_p1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_p1_we0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_we0;
    end else begin
        p_col_p1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_p1_we1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_p_col_p1_we1;
    end else begin
        p_col_p1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        p_col_we0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_p_col_we0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_col_we0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_we0;
    end else begin
        p_col_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_col_we1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_p_col_we1;
    end else begin
        p_col_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        q_col_address0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_q_col_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        q_col_address0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_address0;
    end else begin
        q_col_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        q_col_ce0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_q_col_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        q_col_ce0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_ce0;
    end else begin
        q_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q_col_ce1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_ce1;
    end else begin
        q_col_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q_col_we0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_we0;
    end else begin
        q_col_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q_col_we1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_col_we1;
    end else begin
        q_col_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        r_1_address0 = zext_ln88_77_fu_425_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_1_address0 = zext_ln88_75_fu_405_p1;
    end else begin
        r_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        r_1_address1 = zext_ln88_76_fu_415_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_1_address1 = zext_ln88_74_fu_396_p1;
    end else begin
        r_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        r_1_ce0 = 1'b1;
    end else begin
        r_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        r_1_ce1 = 1'b1;
    end else begin
        r_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tiny_x1_address0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x1_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        tiny_x1_address0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_tiny_x1_address0;
    end else begin
        tiny_x1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tiny_x1_ce0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        tiny_x1_ce0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_tiny_x1_ce0;
    end else begin
        tiny_x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tiny_x1_we0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_tiny_x1_we0;
    end else begin
        tiny_x1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tiny_x2_address0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x2_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        tiny_x2_address0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_tiny_x2_address0;
    end else begin
        tiny_x2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tiny_x2_ce0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        tiny_x2_ce0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_tiny_x2_ce0;
    end else begin
        tiny_x2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tiny_x2_we0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_tiny_x2_we0;
    end else begin
        tiny_x2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tiny_x3_address0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_tiny_x3_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        tiny_x3_address0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x3_address0;
    end else begin
        tiny_x3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tiny_x3_ce0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_tiny_x3_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        tiny_x3_ce0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x3_ce0;
    end else begin
        tiny_x3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tiny_x3_we0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x3_we0;
    end else begin
        tiny_x3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AmBKt_1_address0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_AmBKt_1_address0;

assign AmBKt_1_address1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_AmBKt_1_address1;

assign AmBKt_1_ce0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_AmBKt_1_ce0;

assign AmBKt_1_ce1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_AmBKt_1_ce1;

assign KinfT_1_address0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_KinfT_1_address0;

assign KinfT_1_address1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_KinfT_1_address1;

assign KinfT_1_ce0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_KinfT_1_ce0;

assign KinfT_1_ce1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_KinfT_1_ce1;

assign add_ln48_fu_328_p2 = (i + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10_on_subcall_done = ((grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_ap_done == 1'b0) | (grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_ap_done == 1'b0) | (grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_ap_done == 1'b0) | (grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_ap_done == 1'b0));
end

assign empty_120_fu_377_p1 = i[2:0];

assign empty_fu_334_p1 = add_ln48_fu_328_p2[2:0];

assign grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_ap_start = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_ap_start_reg;

assign grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_ap_start = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_ap_start_reg;

assign grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_ap_start = grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_ap_start_reg;

assign grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_ap_start = grp_backward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_312_ap_start_reg;

assign grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_ap_start = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_ap_start_reg;

assign grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_ap_start = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_129_fu_258_ap_start_reg;

assign grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_ap_start = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_240_ap_start_reg;

assign grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_start = grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_ap_start_reg;

assign grp_fu_2073_p_ce = grp_fu_614_ce;

assign grp_fu_2073_p_din0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_614_p_din0;

assign grp_fu_2073_p_din1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_614_p_din1;

assign grp_fu_2073_p_opcode = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_grp_fu_614_p_opcode;

assign grp_fu_743_p_ce = grp_fu_610_ce;

assign grp_fu_743_p_din0 = grp_fu_610_p0;

assign grp_fu_743_p_din1 = grp_fu_610_p1;

assign grp_fu_743_p_opcode = grp_fu_610_opcode;

assign mul_i12_fu_389_p2 = (p_shl2_fu_381_p3 - zext_ln88_fu_373_p1);

assign mul_i1_fu_365_p3 = {{i}, {2'd0}};

assign mul_i_fu_358_p2 = (p_shl_fu_338_p3 - p_shl1_cast_fu_354_p1);

assign or_ln88_3_fu_420_p2 = (mul_i1_reg_435 | 6'd3);

assign or_ln88_4_fu_400_p2 = (mul_i1_reg_435 | 6'd1);

assign or_ln88_fu_410_p2 = (mul_i1_reg_435 | 6'd2);

assign p_1_d0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_320_p_1_d0;

assign p_shl1_cast_fu_354_p1 = p_shl1_fu_346_p3;

assign p_shl1_fu_346_p3 = {{add_ln48_fu_328_p2}, {2'd0}};

assign p_shl2_fu_381_p3 = {{empty_120_fu_377_p1}, {4'd0}};

assign p_shl_fu_338_p3 = {{empty_fu_334_p1}, {4'd0}};

assign q_1_address0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_1_address0;

assign q_1_address1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_1_address1;

assign q_1_ce0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_1_ce0;

assign q_1_ce1 = grp_backward_pass_2_Pipeline_VITIS_LOOP_86_128_fu_249_q_1_ce1;

assign tiny_x1_d0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_266_tiny_x1_d0;

assign tiny_x2_d0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_133_130_fu_288_tiny_x2_d0;

assign tiny_x3_d0 = grp_backward_pass_2_Pipeline_VITIS_LOOP_168_2_fu_302_tiny_x3_d0;

assign zext_ln88_74_fu_396_p1 = mul_i1_reg_435;

assign zext_ln88_75_fu_405_p1 = or_ln88_4_fu_400_p2;

assign zext_ln88_76_fu_415_p1 = or_ln88_fu_410_p2;

assign zext_ln88_77_fu_425_p1 = or_ln88_3_fu_420_p2;

assign zext_ln88_fu_373_p1 = mul_i1_fu_365_p3;

always @ (posedge ap_clk) begin
    mul_i_reg_430[1:0] <= 2'b00;
    mul_i1_reg_435[1:0] <= 2'b00;
    mul_i12_reg_443[1:0] <= 2'b00;
end

endmodule //tracking_backward_pass_2
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_Bdyn_data_ROM_AUTO_1R (
address0, ce0, q0, reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 6;
parameter AddressRange = 48;

input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_Bdyn_data_ROM_AUTO_1R.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[address0];
    end
end



endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_coeff_d2p_1_RAM_AUTO_0R0W (address0, ce0, d0, we0,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 6;
parameter AddressRange = 48;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_coeff_d2p_1_RAM_AUTO_0R0W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
    end
end


endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_coeff_d2p_data_ROM_AUTO_1R (
address0, ce0, q0, reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 6;
parameter AddressRange = 48;

input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_coeff_d2p_data_ROM_AUTO_1R.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[address0];
    end
end



endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1ns/1ps
module tracking_control_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 7,
    C_S_AXI_DATA_WIDTH = 32
)(
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    input  wire [1:0]                    inputs_address0,
    input  wire                          inputs_ce0,
    input  wire                          inputs_we0,
    input  wire [31:0]                   inputs_d0,
    output wire [31:0]                   timestep,
    input  wire [3:0]                    observations_address0,
    input  wire                          observations_ce0,
    output wire [31:0]                   observations_q0,
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle
);
//------------------------Address Info-------------------
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/COH)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read/COR)
//        bit 7  - auto_restart (Read/Write)
//        bit 9  - interrupt (Read)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0 - enable ap_done interrupt (Read/Write)
//        bit 1 - enable ap_ready interrupt (Read/Write)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/COR)
//        bit 0 - ap_done (Read/COR)
//        bit 1 - ap_ready (Read/COR)
//        others - reserved
// 0x20 : Data signal of timestep
//        bit 31~0 - timestep[31:0] (Read/Write)
// 0x24 : reserved
// 0x10 ~
// 0x1f : Memory 'inputs' (4 * 32b)
//        Word n : bit [31:0] - inputs[n]
// 0x40 ~
// 0x7f : Memory 'observations' (12 * 32b)
//        Word n : bit [31:0] - observations[n]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL           = 7'h00,
    ADDR_GIE               = 7'h04,
    ADDR_IER               = 7'h08,
    ADDR_ISR               = 7'h0c,
    ADDR_TIMESTEP_DATA_0   = 7'h20,
    ADDR_TIMESTEP_CTRL     = 7'h24,
    ADDR_INPUTS_BASE       = 7'h10,
    ADDR_INPUTS_HIGH       = 7'h1f,
    ADDR_OBSERVATIONS_BASE = 7'h40,
    ADDR_OBSERVATIONS_HIGH = 7'h7f,
    WRIDLE                 = 2'd0,
    WRDATA                 = 2'd1,
    WRRESP                 = 2'd2,
    WRRESET                = 2'd3,
    RDIDLE                 = 2'd0,
    RDDATA                 = 2'd1,
    RDRESET                = 2'd2,
    ADDR_BITS                = 7;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate = WRRESET;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [C_S_AXI_DATA_WIDTH-1:0] wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate = RDRESET;
    reg  [1:0]                    rnext;
    reg  [C_S_AXI_DATA_WIDTH-1:0] rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    reg                           int_ap_idle;
    reg                           int_ap_ready = 1'b0;
    wire                          task_ap_ready;
    reg                           int_ap_done = 1'b0;
    wire                          task_ap_done;
    reg                           int_task_ap_done = 1'b0;
    reg                           int_ap_start = 1'b0;
    reg                           int_interrupt = 1'b0;
    reg                           int_auto_restart = 1'b0;
    reg                           auto_restart_status = 1'b0;
    wire                          auto_restart_done;
    reg                           int_gie = 1'b0;
    reg  [1:0]                    int_ier = 2'b0;
    reg  [1:0]                    int_isr = 2'b0;
    reg  [31:0]                   int_timestep = 'b0;
    // memory signals
    wire [1:0]                    int_inputs_address0;
    wire                          int_inputs_ce0;
    wire [3:0]                    int_inputs_be0;
    wire [31:0]                   int_inputs_d0;
    wire [1:0]                    int_inputs_address1;
    wire                          int_inputs_ce1;
    wire [31:0]                   int_inputs_q1;
    reg                           int_inputs_read;
    reg                           int_inputs_write;
    wire [3:0]                    int_observations_address0;
    wire                          int_observations_ce0;
    wire [31:0]                   int_observations_q0;
    wire [3:0]                    int_observations_address1;
    wire                          int_observations_ce1;
    wire                          int_observations_we1;
    wire [3:0]                    int_observations_be1;
    wire [31:0]                   int_observations_d1;
    wire [31:0]                   int_observations_q1;
    reg                           int_observations_read;
    reg                           int_observations_write;

//------------------------Instantiation------------------
// int_inputs
tracking_control_s_axi_ram #(
    .MEM_STYLE ( "auto" ),
    .MEM_TYPE  ( "S2P" ),
    .BYTES     ( 4 ),
    .DEPTH     ( 4 )
) int_inputs (
    .clk0      ( ACLK ),
    .address0  ( int_inputs_address0 ),
    .ce0       ( int_inputs_ce0 ),
    .we0       ( int_inputs_be0 ),
    .d0        ( int_inputs_d0 ),
    .q0        (  ),
    .clk1      ( ACLK ),
    .address1  ( int_inputs_address1 ),
    .ce1       ( int_inputs_ce1 ),
    .we1       ( {4{1'b0}} ),
    .d1        ( {32{1'b0}} ),
    .q1        ( int_inputs_q1 )
);
// int_observations
tracking_control_s_axi_ram #(
    .MEM_STYLE ( "auto" ),
    .MEM_TYPE  ( "2P" ),
    .BYTES     ( 4 ),
    .DEPTH     ( 12 )
) int_observations (
    .clk0      ( ACLK ),
    .address0  ( int_observations_address0 ),
    .ce0       ( int_observations_ce0 ),
    .we0       ( {4{1'b0}} ),
    .d0        ( {32{1'b0}} ),
    .q0        ( int_observations_q0 ),
    .clk1      ( ACLK ),
    .address1  ( int_observations_address1 ),
    .ce1       ( int_observations_ce1 ),
    .we1       ( int_observations_be1 ),
    .d1        ( int_observations_d1 ),
    .q1        ( int_observations_q1 )
);


//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA) && (!ar_hs);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRRESET;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (w_hs)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA) & !int_inputs_read & !int_observations_read;
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDRESET;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_task_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                    rdata[9] <= int_interrupt;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_TIMESTEP_DATA_0: begin
                    rdata <= int_timestep[31:0];
                end
            endcase
        end
        else if (int_inputs_read) begin
            rdata <= int_inputs_q1;
        end
        else if (int_observations_read) begin
            rdata <= int_observations_q1;
        end
    end
end


//------------------------Register logic-----------------
assign interrupt         = int_interrupt;
assign ap_start          = int_ap_start;
assign task_ap_done      = (ap_done && !auto_restart_status) || auto_restart_done;
assign task_ap_ready     = ap_ready && !int_auto_restart;
assign auto_restart_done = auto_restart_status && (ap_idle && !int_ap_idle);
assign timestep          = int_timestep;
// int_interrupt
always @(posedge ACLK) begin
    if (ARESET)
        int_interrupt <= 1'b0;
    else if (ACLK_EN) begin
        if (int_gie && (|int_isr))
            int_interrupt <= 1'b1;
        else
            int_interrupt <= 1'b0;
    end
end

// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
            int_ap_done <= ap_done;
    end
end

// int_task_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_task_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (task_ap_done)
            int_task_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_task_ap_done <= 1'b0; // clear on read
    end
end

// int_ap_idle
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_idle <= 1'b0;
    else if (ACLK_EN) begin
            int_ap_idle <= ap_idle;
    end
end

// int_ap_ready
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_ready <= 1'b0;
    else if (ACLK_EN) begin
        if (task_ap_ready)
            int_ap_ready <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_ready <= 1'b0;
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// auto_restart_status
always @(posedge ACLK) begin
    if (ARESET)
        auto_restart_status <= 1'b0;
    else if (ACLK_EN) begin
        if (int_auto_restart)
            auto_restart_status <= 1'b1;
        else if (ap_idle)
            auto_restart_status <= 1'b0;
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (ar_hs && raddr == ADDR_ISR)
            int_isr[0] <= 1'b0; // clear on read
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (ar_hs && raddr == ADDR_ISR)
            int_isr[1] <= 1'b0; // clear on read
    end
end

// int_timestep[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_timestep[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_TIMESTEP_DATA_0)
            int_timestep[31:0] <= (WDATA[31:0] & wmask) | (int_timestep[31:0] & ~wmask);
    end
end

//synthesis translate_off
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (int_gie & ~int_isr[0] & int_ier[0] & ap_done)
            $display ("// Interrupt Monitor : interrupt for ap_done detected @ \"%0t\"", $time);
        if (int_gie & ~int_isr[1] & int_ier[1] & ap_ready)
            $display ("// Interrupt Monitor : interrupt for ap_ready detected @ \"%0t\"", $time);
    end
end
//synthesis translate_on

//------------------------Memory logic-------------------
// inputs
assign int_inputs_address0       = inputs_address0;
assign int_inputs_ce0            = inputs_ce0;
assign int_inputs_be0            = {4{inputs_we0}};
assign int_inputs_d0             = inputs_d0;
assign int_inputs_address1       = ar_hs? raddr[3:2] : waddr[3:2];
assign int_inputs_ce1            = ar_hs | (int_inputs_write & WVALID);
// observations
assign int_observations_address0 = observations_address0;
assign int_observations_ce0      = observations_ce0;
assign observations_q0           = int_observations_q0;
assign int_observations_address1 = ar_hs? raddr[5:2] : waddr[5:2];
assign int_observations_ce1      = ar_hs | (int_observations_write & WVALID);
assign int_observations_we1      = int_observations_write & w_hs;
assign int_observations_be1      = int_observations_we1 ? WSTRB : 'b0;
assign int_observations_d1       = WDATA;
// int_inputs_read
always @(posedge ACLK) begin
    if (ARESET)
        int_inputs_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_INPUTS_BASE && raddr <= ADDR_INPUTS_HIGH)
            int_inputs_read <= 1'b1;
        else
            int_inputs_read <= 1'b0;
    end
end

// int_observations_read
always @(posedge ACLK) begin
    if (ARESET)
        int_observations_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OBSERVATIONS_BASE && raddr <= ADDR_OBSERVATIONS_HIGH)
            int_observations_read <= 1'b1;
        else
            int_observations_read <= 1'b0;
    end
end

// int_observations_write
always @(posedge ACLK) begin
    if (ARESET)
        int_observations_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OBSERVATIONS_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OBSERVATIONS_HIGH)
            int_observations_write <= 1'b1;
        else if (w_hs)
            int_observations_write <= 1'b0;
    end
end


endmodule


`timescale 1ns/1ps

module tracking_control_s_axi_ram
#(parameter
    MEM_STYLE = "auto",
    MEM_TYPE  = "S2P",
    BYTES  = 4,
    DEPTH  = 256,
    AWIDTH = log2(DEPTH)
) (
    input  wire               clk0,
    input  wire [AWIDTH-1:0]  address0,
    input  wire               ce0,
    input  wire [BYTES-1:0]   we0,
    input  wire [BYTES*8-1:0] d0,
    output reg  [BYTES*8-1:0] q0,
    input  wire               clk1,
    input  wire [AWIDTH-1:0]  address1,
    input  wire               ce1,
    input  wire [BYTES-1:0]   we1,
    input  wire [BYTES*8-1:0] d1,
    output reg  [BYTES*8-1:0] q1
);
//------------------------ Parameters -------------------
localparam
    BYTE_WIDTH = 8,
    PORT0 = (MEM_TYPE == "S2P") ? "WO" : ((MEM_TYPE == "2P") ? "RO" : "RW"),
    PORT1 = (MEM_TYPE == "S2P") ? "RO" : "RW";
//------------------------Local signal-------------------
(* ram_style = MEM_STYLE*)
reg  [BYTES*8-1:0] mem[0:DEPTH-1];
wire re0, re1;
//------------------------Task and function--------------
function integer log2;
    input integer x;
    integer n, m;
begin
    n = 1;
    m = 2;
    while (m < x) begin
        n = n + 1;
        m = m * 2;
    end
    log2 = n;
end
endfunction
//------------------------Body---------------------------
generate
    if (MEM_STYLE == "hls_ultra" && PORT0 == "RW") begin
        assign re0 = ce0 & ~|we0;
    end else begin
        assign re0 = ce0;
    end
endgenerate

generate
    if (MEM_STYLE == "hls_ultra" && PORT1 == "RW") begin
        assign re1 = ce1 & ~|we1;
    end else begin
        assign re1 = ce1;
    end
endgenerate

// read port 0
generate if (PORT0 != "WO") begin
    always @(posedge clk0) begin
        if (re0) q0 <= mem[address0];
    end
end
endgenerate

// read port 1
generate if (PORT1 != "WO") begin
    always @(posedge clk1) begin
        if (re1) q1 <= mem[address1];
    end
end
endgenerate

integer i;
// write port 0
generate if (PORT0 != "RO") begin
    always @(posedge clk0) begin
        if (ce0)
        for (i = 0; i < BYTES; i = i + 1)
            if (we0[i])
                mem[address0][i*BYTE_WIDTH +: BYTE_WIDTH] <= d0[i*BYTE_WIDTH +: BYTE_WIDTH];
    end
end
endgenerate

// write port 1
generate if (PORT1 != "RO") begin
    always @(posedge clk1) begin
        if (ce1)
        for (i = 0; i < BYTES; i = i + 1)
            if (we1[i])
                mem[address1][i*BYTE_WIDTH +: BYTE_WIDTH] <= d1[i*BYTE_WIDTH +: BYTE_WIDTH];
    end
end
endgenerate

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module tracking_fadd_32ns_32ns_32_2_full_dsp_1
#(parameter
    ID         = 1,
    NUM_STAGE  = 2,
    din0_WIDTH = 32,
    din1_WIDTH = 32,
    dout_WIDTH = 32
)(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  ce,
    input  wire [din0_WIDTH-1:0] din0,
    input  wire [din1_WIDTH-1:0] din1,
    output wire [dout_WIDTH-1:0] dout
);
//------------------------Local signal-------------------
wire                  a_tvalid;
wire [31:0]           a_tdata;
wire                  b_tvalid;
wire [31:0]           b_tdata;
wire                  r_tvalid;
wire [31:0]           r_tdata;
reg  [din0_WIDTH-1:0] din0_buf1;
reg  [din1_WIDTH-1:0] din1_buf1;
reg                   ce_r;
wire [dout_WIDTH-1:0] dout_i;
reg  [dout_WIDTH-1:0] dout_r;
//------------------------Instantiation------------------
tracking_fadd_32ns_32ns_32_2_full_dsp_1_ip tracking_fadd_32ns_32ns_32_2_full_dsp_1_ip_u (
    .s_axis_a_tvalid      ( a_tvalid ),
    .s_axis_a_tdata       ( a_tdata ),
    .s_axis_b_tvalid      ( b_tvalid ),
    .s_axis_b_tdata       ( b_tdata ),
    .m_axis_result_tvalid ( r_tvalid ),
    .m_axis_result_tdata  ( r_tdata )
);
//------------------------Body---------------------------
assign a_tvalid = 1'b1;
assign a_tdata  = din0_buf1;
assign b_tvalid = 1'b1;
assign b_tdata  = din1_buf1;
assign dout_i   = r_tdata;

always @(posedge clk) begin
    if (ce) begin
        din0_buf1 <= din0;
        din1_buf1 <= din1;
    end
end

always @ (posedge clk) begin
    ce_r <= ce;
end

always @ (posedge clk) begin
    if (ce_r) begin
        dout_r <= dout_i;
    end
end

assign dout = ce_r?dout_i:dout_r;
endmodule
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module tracking_faddfsub_32ns_32ns_32_2_full_dsp_1
#(parameter
    ID         = 1,
    NUM_STAGE  = 2,
    din0_WIDTH = 32,
    din1_WIDTH = 32,
    dout_WIDTH = 32
)(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  ce,
    input  wire [din0_WIDTH-1:0] din0,
    input  wire [din1_WIDTH-1:0] din1,
    input  wire [1:0]            opcode,
    output wire [dout_WIDTH-1:0] dout
);
//------------------------Local signal-------------------
wire                  a_tvalid;
wire [din0_WIDTH-1:0] a_tdata;
wire                  b_tvalid;
wire [din1_WIDTH-1:0] b_tdata;
wire                  op_tvalid;
wire [7:0]            op_tdata;
wire                  r_tvalid;
wire [dout_WIDTH-1:0] r_tdata;
reg  [din0_WIDTH-1:0] din0_buf1;
reg  [din1_WIDTH-1:0] din1_buf1;
reg  [1:0]            opcode_buf1;
reg                   ce_r;
wire [dout_WIDTH-1:0] dout_i;
reg  [dout_WIDTH-1:0] dout_r;
//------------------------Instantiation------------------
tracking_faddfsub_32ns_32ns_32_2_full_dsp_1_ip tracking_faddfsub_32ns_32ns_32_2_full_dsp_1_ip_u (
    .s_axis_a_tvalid      ( a_tvalid ),
    .s_axis_a_tdata       ( a_tdata ),
    .s_axis_b_tvalid      ( b_tvalid ),
    .s_axis_b_tdata       ( b_tdata ),
    .s_axis_operation_tvalid ( op_tvalid ),
    .s_axis_operation_tdata  ( op_tdata ),
    .m_axis_result_tvalid ( r_tvalid ),
    .m_axis_result_tdata  ( r_tdata )
);
//------------------------Body---------------------------
assign a_tvalid = 1'b1;
assign a_tdata  = din0_buf1;
assign b_tvalid = 1'b1;
assign b_tdata  = din1_buf1;
assign op_tvalid = 1'b1;
assign op_tdata  = {6'b0, opcode_buf1};
assign dout_i   = r_tdata;

always @(posedge clk) begin
    if (ce) begin
        din0_buf1 <= din0;
        din1_buf1 <= din1;
        opcode_buf1 <= opcode;
    end
end

always @ (posedge clk) begin
    ce_r <= ce;
end

always @ (posedge clk) begin
    if (ce_r) begin
        dout_r <= dout_i;
    end
end

assign dout = ce_r?dout_i:dout_r;
endmodule
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module tracking_fcmp_32ns_32ns_1_1_no_dsp_1
#(parameter
    ID         = 1,
    NUM_STAGE  = 1,
    din0_WIDTH = 32,
    din1_WIDTH = 32,
    dout_WIDTH = 1
)(
    input  wire [din0_WIDTH-1:0] din0,
    input  wire [din1_WIDTH-1:0] din1,
    input  wire [4:0]            opcode,
    output wire [dout_WIDTH-1:0] dout
);
//------------------------Parameter----------------------
// AutoESL opcode
localparam [4:0]
    AP_OEQ = 5'b00001,
    AP_OGT = 5'b00010,
    AP_OGE = 5'b00011,
    AP_OLT = 5'b00100,
    AP_OLE = 5'b00101,
    AP_ONE = 5'b00110,
    AP_UNO = 5'b01000;
// FPV6 opcode
localparam [7:0]
    OP_EQ = 8'b00010100,
    OP_GT = 8'b00100100,
    OP_GE = 8'b00110100,
    OP_LT = 8'b00001100,
    OP_LE = 8'b00011100,
    OP_NE = 8'b00101100,
    OP_UO = 8'b00000100;
//------------------------Local signal-------------------
wire        a_tvalid;
wire [31:0] a_tdata;
wire        b_tvalid;
wire [31:0] b_tdata;
wire        op_tvalid;
reg  [7:0]  op_tdata;
wire        r_tvalid;
wire [7:0]  r_tdata;
//------------------------Instantiation------------------
tracking_fcmp_32ns_32ns_1_1_no_dsp_1_ip tracking_fcmp_32ns_32ns_1_1_no_dsp_1_ip_u (
    .s_axis_a_tvalid         ( a_tvalid ),
    .s_axis_a_tdata          ( a_tdata ),
    .s_axis_b_tvalid         ( b_tvalid ),
    .s_axis_b_tdata          ( b_tdata ),
    .s_axis_operation_tvalid ( op_tvalid ),
    .s_axis_operation_tdata  ( op_tdata ),
    .m_axis_result_tvalid    ( r_tvalid ),
    .m_axis_result_tdata     ( r_tdata )
);
//------------------------Body---------------------------
assign a_tvalid  = 1'b1;
assign a_tdata   = din0;
assign b_tvalid  = 1'b1;
assign b_tdata   = din1;
assign op_tvalid = 1'b1;
assign dout      = r_tdata[0];

always @(*) begin
    case (opcode)
        AP_OEQ  : op_tdata = OP_EQ;
        AP_OGT  : op_tdata = OP_GT;
        AP_OGE  : op_tdata = OP_GE;
        AP_OLT  : op_tdata = OP_LT;
        AP_OLE  : op_tdata = OP_LE;
        AP_ONE  : op_tdata = OP_NE;
        AP_UNO  : op_tdata = OP_UO;
        default : op_tdata = OP_EQ;
    endcase
end

endmodule
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module tracking_flow_control_loop_pipe_sequential_init(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
wire     ap_loop_init;
reg ap_loop_init_int;
reg ap_done;
reg ap_done_cache;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
#0 ap_loop_init_int = 1'b1;
#0 ap_done_cache = 1'b0;
end

assign ap_start_int = ap_start;

assign ap_continue_int = 1'b1;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_loop_exit_done == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init_int <= 1'b0;
    end
end

assign ap_loop_init = ap_loop_init_int & ap_start;

// if no ap_continue port and current module is not top module, 
// ap_done handshakes with ap_start. Internally, flow control sends out 
// ap_conintue_int = 1'b1 so the ap_done_int is asserted high for 1 clock cycle.
// ap_done_cache is used to record ap_done_int, and de-assert if ap_start_int
// is asserted, so DUT can start the next run
always @(posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_done_cache <= 1'b0;
    end else if (ap_done_int == 1'b1) begin
        ap_done_cache <= 1'b1;
    end else if (ap_start_int == 1'b1) begin
        ap_done_cache <= 1'b0;
    end
end

// if no ap_continue port and current module is not top module, ap_done handshakes with ap_start
always @(*)
begin
    if ((ap_done_int == 1'b1) || ((ap_done_cache == 1'b1) && (ap_start_int == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

endmodule
        
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module tracking_fmul_32ns_32ns_32_1_max_dsp_1
#(parameter
    ID         = 1,
    NUM_STAGE  = 1,
    din0_WIDTH = 32,
    din1_WIDTH = 32,
    dout_WIDTH = 32
)(
    input  wire [din0_WIDTH-1:0] din0,
    input  wire [din1_WIDTH-1:0] din1,
    output wire [dout_WIDTH-1:0] dout
);
//------------------------Local signal-------------------
wire        a_tvalid;
wire [31:0] a_tdata;
wire        b_tvalid;
wire [31:0] b_tdata;
wire        r_tvalid;
wire [31:0] r_tdata;
//------------------------Instantiation------------------
tracking_fmul_32ns_32ns_32_1_max_dsp_1_ip tracking_fmul_32ns_32ns_32_1_max_dsp_1_ip_u (
    .s_axis_a_tvalid      ( a_tvalid ),
    .s_axis_a_tdata       ( a_tdata ),
    .s_axis_b_tvalid      ( b_tvalid ),
    .s_axis_b_tdata       ( b_tdata ),
    .m_axis_result_tvalid ( r_tvalid ),
    .m_axis_result_tdata  ( r_tdata )
);
//------------------------Body---------------------------
assign a_tvalid = 1'b1;
assign a_tdata  = din0;
assign b_tvalid = 1'b1;
assign b_tdata  = din1;
assign dout     = r_tdata;

endmodule
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_forward_pass_2_Pipeline_VITIS_LOOP_86_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul_i,
        x_col_address0,
        x_col_ce0,
        x_col_we0,
        x_col_d0,
        x_col_address1,
        x_col_ce1,
        x_col_we1,
        x_col_d1,
        x_1_address0,
        x_1_ce0,
        x_1_q0,
        x_1_address1,
        x_1_ce1,
        x_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] mul_i;
output  [3:0] x_col_address0;
output   x_col_ce0;
output   x_col_we0;
output  [31:0] x_col_d0;
output  [3:0] x_col_address1;
output   x_col_ce1;
output   x_col_we1;
output  [31:0] x_col_d1;
output  [6:0] x_1_address0;
output   x_1_ce0;
input  [31:0] x_1_q0;
output  [6:0] x_1_address1;
output   x_1_ce1;
input  [31:0] x_1_q1;

reg ap_idle;
reg[3:0] x_col_address0;
reg x_col_ce0;
reg x_col_we0;
reg[3:0] x_col_address1;
reg x_col_ce1;
reg x_col_we1;
reg[6:0] x_1_address0;
reg x_1_ce0;
reg[6:0] x_1_address1;
reg x_1_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_142_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_48_reg_262;
reg   [0:0] icmp_ln86_reg_269;
wire   [3:0] or_ln86_fu_163_p2;
reg   [3:0] or_ln86_reg_278;
wire   [3:0] or_ln86_10_fu_203_p2;
reg   [3:0] or_ln86_10_reg_288;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] or_ln86_11_fu_222_p2;
reg   [3:0] or_ln86_11_reg_298;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln88_fu_158_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln88_46_fu_179_p1;
wire   [63:0] i_55_cast6_fu_195_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln88_44_fu_199_p1;
wire   [63:0] zext_ln88_49_fu_217_p1;
wire   [63:0] zext_ln88_52_fu_236_p1;
wire   [63:0] zext_ln88_47_fu_241_p1;
wire   [63:0] zext_ln88_50_fu_245_p1;
reg   [3:0] i_fu_40;
wire   [3:0] add_ln86_fu_184_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_48;
wire   [6:0] i_55_cast2_fu_148_p1;
wire   [6:0] add_ln88_fu_152_p2;
wire   [6:0] zext_ln88_45_fu_169_p1;
wire   [6:0] add_ln88_14_fu_173_p2;
wire   [6:0] zext_ln88_48_fu_208_p1;
wire   [6:0] add_ln88_15_fu_212_p2;
wire   [6:0] zext_ln88_51_fu_227_p1;
wire   [6:0] add_ln88_16_fu_231_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln86_fu_142_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_40 <= add_ln86_fu_184_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_48_reg_262 <= ap_sig_allocacmp_i_48;
        icmp_ln86_reg_269 <= icmp_ln86_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln86_10_reg_288[0] <= or_ln86_10_fu_203_p2[0];
or_ln86_10_reg_288[3 : 2] <= or_ln86_10_fu_203_p2[3 : 2];
        or_ln86_11_reg_298[3 : 2] <= or_ln86_11_fu_222_p2[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_142_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln86_reg_278[3 : 1] <= or_ln86_fu_163_p2[3 : 1];
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_48 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_48 = i_fu_40;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            x_1_address0 = zext_ln88_52_fu_236_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_1_address0 = zext_ln88_46_fu_179_p1;
        end else begin
            x_1_address0 = 'bx;
        end
    end else begin
        x_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            x_1_address1 = zext_ln88_49_fu_217_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_1_address1 = zext_ln88_fu_158_p1;
        end else begin
            x_1_address1 = 'bx;
        end
    end else begin
        x_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x_1_ce0 = 1'b1;
    end else begin
        x_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x_1_ce1 = 1'b1;
    end else begin
        x_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_col_address0 = zext_ln88_50_fu_245_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        x_col_address0 = zext_ln88_44_fu_199_p1;
    end else begin
        x_col_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_col_address1 = zext_ln88_47_fu_241_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        x_col_address1 = i_55_cast6_fu_195_p1;
    end else begin
        x_col_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x_col_ce0 = 1'b1;
    end else begin
        x_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x_col_ce1 = 1'b1;
    end else begin
        x_col_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x_col_we0 = 1'b1;
    end else begin
        x_col_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x_col_we1 = 1'b1;
    end else begin
        x_col_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln86_fu_184_p2 = (ap_sig_allocacmp_i_48 + 4'd4);

assign add_ln88_14_fu_173_p2 = (zext_ln88_45_fu_169_p1 + mul_i);

assign add_ln88_15_fu_212_p2 = (zext_ln88_48_fu_208_p1 + mul_i);

assign add_ln88_16_fu_231_p2 = (zext_ln88_51_fu_227_p1 + mul_i);

assign add_ln88_fu_152_p2 = (i_55_cast2_fu_148_p1 + mul_i);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_55_cast2_fu_148_p1 = ap_sig_allocacmp_i_48;

assign i_55_cast6_fu_195_p1 = i_48_reg_262;

assign icmp_ln86_fu_142_p2 = ((ap_sig_allocacmp_i_48 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln86_10_fu_203_p2 = (i_48_reg_262 | 4'd2);

assign or_ln86_11_fu_222_p2 = (i_48_reg_262 | 4'd3);

assign or_ln86_fu_163_p2 = (ap_sig_allocacmp_i_48 | 4'd1);

assign x_col_d0 = x_1_q0;

assign x_col_d1 = x_1_q1;

assign zext_ln88_44_fu_199_p1 = or_ln86_reg_278;

assign zext_ln88_45_fu_169_p1 = or_ln86_fu_163_p2;

assign zext_ln88_46_fu_179_p1 = add_ln88_14_fu_173_p2;

assign zext_ln88_47_fu_241_p1 = or_ln86_10_reg_288;

assign zext_ln88_48_fu_208_p1 = or_ln86_10_fu_203_p2;

assign zext_ln88_49_fu_217_p1 = add_ln88_15_fu_212_p2;

assign zext_ln88_50_fu_245_p1 = or_ln86_11_reg_298;

assign zext_ln88_51_fu_227_p1 = or_ln86_11_fu_222_p2;

assign zext_ln88_52_fu_236_p1 = add_ln88_16_fu_231_p2;

assign zext_ln88_fu_158_p1 = add_ln88_fu_152_p2;

always @ (posedge ap_clk) begin
    or_ln86_reg_278[0] <= 1'b1;
    or_ln86_10_reg_288[1] <= 1'b1;
    or_ln86_11_reg_298[1:0] <= 2'b11;
end

endmodule //tracking_forward_pass_2_Pipeline_VITIS_LOOP_86_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_forward_pass_2_Pipeline_VITIS_LOOP_86_126 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul_i12,
        x_col_p1_address0,
        x_col_p1_ce0,
        x_col_p1_we0,
        x_col_p1_d0,
        x_col_p1_address1,
        x_col_p1_ce1,
        x_col_p1_we1,
        x_col_p1_d1,
        x_1_address0,
        x_1_ce0,
        x_1_q0,
        x_1_address1,
        x_1_ce1,
        x_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] mul_i12;
output  [3:0] x_col_p1_address0;
output   x_col_p1_ce0;
output   x_col_p1_we0;
output  [31:0] x_col_p1_d0;
output  [3:0] x_col_p1_address1;
output   x_col_p1_ce1;
output   x_col_p1_we1;
output  [31:0] x_col_p1_d1;
output  [6:0] x_1_address0;
output   x_1_ce0;
input  [31:0] x_1_q0;
output  [6:0] x_1_address1;
output   x_1_ce1;
input  [31:0] x_1_q1;

reg ap_idle;
reg[3:0] x_col_p1_address0;
reg x_col_p1_ce0;
reg x_col_p1_we0;
reg[3:0] x_col_p1_address1;
reg x_col_p1_ce1;
reg x_col_p1_we1;
reg[6:0] x_1_address0;
reg x_1_ce0;
reg[6:0] x_1_address1;
reg x_1_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_142_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_47_reg_262;
reg   [0:0] icmp_ln86_reg_269;
wire   [3:0] or_ln86_fu_163_p2;
reg   [3:0] or_ln86_reg_278;
wire   [3:0] or_ln86_8_fu_203_p2;
reg   [3:0] or_ln86_8_reg_288;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] or_ln86_9_fu_222_p2;
reg   [3:0] or_ln86_9_reg_298;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln88_fu_158_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln88_37_fu_179_p1;
wire   [63:0] i_56_cast11_fu_195_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln88_35_fu_199_p1;
wire   [63:0] zext_ln88_40_fu_217_p1;
wire   [63:0] zext_ln88_43_fu_236_p1;
wire   [63:0] zext_ln88_38_fu_241_p1;
wire   [63:0] zext_ln88_41_fu_245_p1;
reg   [3:0] i_fu_40;
wire   [3:0] add_ln86_fu_184_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_47;
wire   [6:0] i_56_cast3_fu_148_p1;
wire   [6:0] add_ln88_fu_152_p2;
wire   [6:0] zext_ln88_36_fu_169_p1;
wire   [6:0] add_ln88_11_fu_173_p2;
wire   [6:0] zext_ln88_39_fu_208_p1;
wire   [6:0] add_ln88_12_fu_212_p2;
wire   [6:0] zext_ln88_42_fu_227_p1;
wire   [6:0] add_ln88_13_fu_231_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln86_fu_142_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_40 <= add_ln86_fu_184_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_47_reg_262 <= ap_sig_allocacmp_i_47;
        icmp_ln86_reg_269 <= icmp_ln86_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln86_8_reg_288[0] <= or_ln86_8_fu_203_p2[0];
or_ln86_8_reg_288[3 : 2] <= or_ln86_8_fu_203_p2[3 : 2];
        or_ln86_9_reg_298[3 : 2] <= or_ln86_9_fu_222_p2[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_142_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln86_reg_278[3 : 1] <= or_ln86_fu_163_p2[3 : 1];
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_47 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_47 = i_fu_40;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            x_1_address0 = zext_ln88_43_fu_236_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_1_address0 = zext_ln88_37_fu_179_p1;
        end else begin
            x_1_address0 = 'bx;
        end
    end else begin
        x_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            x_1_address1 = zext_ln88_40_fu_217_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_1_address1 = zext_ln88_fu_158_p1;
        end else begin
            x_1_address1 = 'bx;
        end
    end else begin
        x_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x_1_ce0 = 1'b1;
    end else begin
        x_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x_1_ce1 = 1'b1;
    end else begin
        x_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_col_p1_address0 = zext_ln88_41_fu_245_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        x_col_p1_address0 = zext_ln88_35_fu_199_p1;
    end else begin
        x_col_p1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_col_p1_address1 = zext_ln88_38_fu_241_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        x_col_p1_address1 = i_56_cast11_fu_195_p1;
    end else begin
        x_col_p1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x_col_p1_ce0 = 1'b1;
    end else begin
        x_col_p1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x_col_p1_ce1 = 1'b1;
    end else begin
        x_col_p1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x_col_p1_we0 = 1'b1;
    end else begin
        x_col_p1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x_col_p1_we1 = 1'b1;
    end else begin
        x_col_p1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln86_fu_184_p2 = (ap_sig_allocacmp_i_47 + 4'd4);

assign add_ln88_11_fu_173_p2 = (zext_ln88_36_fu_169_p1 + mul_i12);

assign add_ln88_12_fu_212_p2 = (zext_ln88_39_fu_208_p1 + mul_i12);

assign add_ln88_13_fu_231_p2 = (zext_ln88_42_fu_227_p1 + mul_i12);

assign add_ln88_fu_152_p2 = (i_56_cast3_fu_148_p1 + mul_i12);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_56_cast11_fu_195_p1 = i_47_reg_262;

assign i_56_cast3_fu_148_p1 = ap_sig_allocacmp_i_47;

assign icmp_ln86_fu_142_p2 = ((ap_sig_allocacmp_i_47 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln86_8_fu_203_p2 = (i_47_reg_262 | 4'd2);

assign or_ln86_9_fu_222_p2 = (i_47_reg_262 | 4'd3);

assign or_ln86_fu_163_p2 = (ap_sig_allocacmp_i_47 | 4'd1);

assign x_col_p1_d0 = x_1_q0;

assign x_col_p1_d1 = x_1_q1;

assign zext_ln88_35_fu_199_p1 = or_ln86_reg_278;

assign zext_ln88_36_fu_169_p1 = or_ln86_fu_163_p2;

assign zext_ln88_37_fu_179_p1 = add_ln88_11_fu_173_p2;

assign zext_ln88_38_fu_241_p1 = or_ln86_8_reg_288;

assign zext_ln88_39_fu_208_p1 = or_ln86_8_fu_203_p2;

assign zext_ln88_40_fu_217_p1 = add_ln88_12_fu_212_p2;

assign zext_ln88_41_fu_245_p1 = or_ln86_9_reg_298;

assign zext_ln88_42_fu_227_p1 = or_ln86_9_fu_222_p2;

assign zext_ln88_43_fu_236_p1 = add_ln88_13_fu_231_p2;

assign zext_ln88_fu_158_p1 = add_ln88_fu_152_p2;

always @ (posedge ap_clk) begin
    or_ln86_reg_278[0] <= 1'b1;
    or_ln86_8_reg_288[1] <= 1'b1;
    or_ln86_9_reg_298[1:0] <= 2'b11;
end

endmodule //tracking_forward_pass_2_Pipeline_VITIS_LOOP_86_126
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_forward_pass_2_Pipeline_VITIS_LOOP_93_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_col_p1_address0,
        x_col_p1_ce0,
        x_col_p1_q0,
        x_col_p1_address1,
        x_col_p1_ce1,
        x_col_p1_q1,
        mul_i12,
        x_1_address0,
        x_1_ce0,
        x_1_we0,
        x_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] x_col_p1_address0;
output   x_col_p1_ce0;
input  [31:0] x_col_p1_q0;
output  [3:0] x_col_p1_address1;
output   x_col_p1_ce1;
input  [31:0] x_col_p1_q1;
input  [6:0] mul_i12;
output  [6:0] x_1_address0;
output   x_1_ce0;
output   x_1_we0;
output  [31:0] x_1_d0;

reg ap_idle;
reg[3:0] x_col_p1_address0;
reg x_col_p1_ce0;
reg[3:0] x_col_p1_address1;
reg x_col_p1_ce1;
reg[6:0] x_1_address0;
reg x_1_ce0;
reg x_1_we0;
reg[31:0] x_1_d0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln93_fu_143_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
reg   [31:0] reg_129;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln93_reg_269;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_46_reg_262;
wire   [3:0] or_ln93_fu_154_p2;
reg   [3:0] or_ln93_reg_278;
wire   [3:0] or_ln93_5_fu_189_p2;
reg   [3:0] or_ln93_5_reg_288;
wire   [3:0] or_ln93_6_fu_199_p2;
reg   [3:0] or_ln93_6_reg_298;
reg   [31:0] x_col_p1_load_3_reg_308;
wire   [6:0] add_ln95_6_fu_238_p2;
reg   [6:0] add_ln95_6_reg_313;
wire    ap_block_pp0_stage3_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] i_59_cast18_fu_149_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln95_15_fu_160_p1;
wire   [63:0] zext_ln95_fu_184_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln95_18_fu_194_p1;
wire   [63:0] zext_ln95_21_fu_204_p1;
wire   [63:0] zext_ln95_17_fu_217_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln95_20_fu_230_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln95_23_fu_243_p1;
reg   [3:0] i_fu_40;
wire   [3:0] add_ln93_fu_165_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_46;
wire   [6:0] i_59_cast5_fu_176_p1;
wire   [6:0] add_ln95_fu_179_p2;
wire   [6:0] zext_ln95_16_fu_209_p1;
wire   [6:0] add_ln95_4_fu_212_p2;
wire   [6:0] zext_ln95_19_fu_222_p1;
wire   [6:0] add_ln95_5_fu_225_p2;
wire   [6:0] zext_ln95_22_fu_235_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln93_fu_143_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_40 <= add_ln93_fu_165_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_269 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            reg_129 <= x_col_p1_q1;
        end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            reg_129 <= x_col_p1_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln95_6_reg_313 <= add_ln95_6_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_46_reg_262 <= ap_sig_allocacmp_i_46;
        icmp_ln93_reg_269 <= icmp_ln93_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln93_5_reg_288[0] <= or_ln93_5_fu_189_p2[0];
or_ln93_5_reg_288[3 : 2] <= or_ln93_5_fu_189_p2[3 : 2];
        or_ln93_6_reg_298[3 : 2] <= or_ln93_6_fu_199_p2[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_fu_143_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln93_reg_278[3 : 1] <= or_ln93_fu_154_p2[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        x_col_p1_load_3_reg_308 <= x_col_p1_q0;
    end
end

always @ (*) begin
    if (((icmp_ln93_fu_143_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_46 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_46 = i_fu_40;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_1_address0 = zext_ln95_23_fu_243_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        x_1_address0 = zext_ln95_20_fu_230_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        x_1_address0 = zext_ln95_17_fu_217_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        x_1_address0 = zext_ln95_fu_184_p1;
    end else begin
        x_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        x_1_ce0 = 1'b1;
    end else begin
        x_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_1_d0 = x_col_p1_load_3_reg_308;
    end else if ((((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        x_1_d0 = reg_129;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        x_1_d0 = x_col_p1_q1;
    end else begin
        x_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln93_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln93_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln93_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        x_1_we0 = 1'b1;
    end else begin
        x_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            x_col_p1_address0 = zext_ln95_21_fu_204_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_col_p1_address0 = zext_ln95_15_fu_160_p1;
        end else begin
            x_col_p1_address0 = 'bx;
        end
    end else begin
        x_col_p1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            x_col_p1_address1 = zext_ln95_18_fu_194_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_col_p1_address1 = i_59_cast18_fu_149_p1;
        end else begin
            x_col_p1_address1 = 'bx;
        end
    end else begin
        x_col_p1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        x_col_p1_ce0 = 1'b1;
    end else begin
        x_col_p1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        x_col_p1_ce1 = 1'b1;
    end else begin
        x_col_p1_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln93_fu_165_p2 = (ap_sig_allocacmp_i_46 + 4'd4);

assign add_ln95_4_fu_212_p2 = (zext_ln95_16_fu_209_p1 + mul_i12);

assign add_ln95_5_fu_225_p2 = (zext_ln95_19_fu_222_p1 + mul_i12);

assign add_ln95_6_fu_238_p2 = (zext_ln95_22_fu_235_p1 + mul_i12);

assign add_ln95_fu_179_p2 = (i_59_cast5_fu_176_p1 + mul_i12);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_59_cast18_fu_149_p1 = ap_sig_allocacmp_i_46;

assign i_59_cast5_fu_176_p1 = i_46_reg_262;

assign icmp_ln93_fu_143_p2 = ((ap_sig_allocacmp_i_46 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln93_5_fu_189_p2 = (i_46_reg_262 | 4'd2);

assign or_ln93_6_fu_199_p2 = (i_46_reg_262 | 4'd3);

assign or_ln93_fu_154_p2 = (ap_sig_allocacmp_i_46 | 4'd1);

assign zext_ln95_15_fu_160_p1 = or_ln93_fu_154_p2;

assign zext_ln95_16_fu_209_p1 = or_ln93_reg_278;

assign zext_ln95_17_fu_217_p1 = add_ln95_4_fu_212_p2;

assign zext_ln95_18_fu_194_p1 = or_ln93_5_fu_189_p2;

assign zext_ln95_19_fu_222_p1 = or_ln93_5_reg_288;

assign zext_ln95_20_fu_230_p1 = add_ln95_5_fu_225_p2;

assign zext_ln95_21_fu_204_p1 = or_ln93_6_fu_199_p2;

assign zext_ln95_22_fu_235_p1 = or_ln93_6_reg_298;

assign zext_ln95_23_fu_243_p1 = add_ln95_6_reg_313;

assign zext_ln95_fu_184_p1 = add_ln95_fu_179_p2;

always @ (posedge ap_clk) begin
    or_ln93_reg_278[0] <= 1'b1;
    or_ln93_5_reg_288[1] <= 1'b1;
    or_ln93_6_reg_298[1:0] <= 2'b11;
end

endmodule //tracking_forward_pass_2_Pipeline_VITIS_LOOP_93_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_forward_pass_2_Pipeline_VITIS_LOOP_133_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_col_load,
        x_col_load_1,
        x_col_load_2,
        x_col_load_3,
        x_col_load_4,
        x_col_load_5,
        x_col_load_6,
        x_col_load_7,
        x_col_load_8,
        x_col_load_9,
        x_col_load_10,
        x_col_load_11,
        Adyn_1_address0,
        Adyn_1_ce0,
        Adyn_1_q0,
        Adyn_1_address1,
        Adyn_1_ce1,
        Adyn_1_q1,
        tiny_x1_address0,
        tiny_x1_ce0,
        tiny_x1_we0,
        tiny_x1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x_col_load;
input  [31:0] x_col_load_1;
input  [31:0] x_col_load_2;
input  [31:0] x_col_load_3;
input  [31:0] x_col_load_4;
input  [31:0] x_col_load_5;
input  [31:0] x_col_load_6;
input  [31:0] x_col_load_7;
input  [31:0] x_col_load_8;
input  [31:0] x_col_load_9;
input  [31:0] x_col_load_10;
input  [31:0] x_col_load_11;
output  [7:0] Adyn_1_address0;
output   Adyn_1_ce0;
input  [31:0] Adyn_1_q0;
output  [7:0] Adyn_1_address1;
output   Adyn_1_ce1;
input  [31:0] Adyn_1_q1;
output  [3:0] tiny_x1_address0;
output   tiny_x1_ce0;
output   tiny_x1_we0;
output  [31:0] tiny_x1_d0;

reg ap_idle;
reg[7:0] Adyn_1_address0;
reg Adyn_1_ce0;
reg[7:0] Adyn_1_address1;
reg Adyn_1_ce1;
reg tiny_x1_ce0;
reg tiny_x1_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state12_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_subdone;
reg   [0:0] icmp_ln133_reg_563;
reg    ap_condition_exit_pp0_iter0_stage5;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [31:0] grp_fu_293_p2;
reg   [31:0] reg_303;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_280_p2;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage5_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state15_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] grp_fu_286_p2;
reg   [3:0] i_50_reg_558;
reg   [3:0] i_50_reg_558_pp0_iter1_reg;
reg   [3:0] i_50_reg_558_pp0_iter2_reg;
wire   [0:0] icmp_ln133_fu_328_p2;
reg   [0:0] icmp_ln133_reg_563_pp0_iter1_reg;
wire   [7:0] empty_118_fu_360_p2;
reg   [7:0] empty_118_reg_567;
wire   [31:0] grp_fu_298_p2;
reg   [31:0] mul9_i_1_reg_591;
reg   [31:0] mul9_i_2_reg_606;
reg   [31:0] mul9_i_3_reg_611;
reg   [31:0] mul9_i_5_reg_626;
reg   [31:0] mul9_i_6_reg_641;
reg   [31:0] mul9_i_7_reg_646;
reg   [31:0] mul9_i_8_reg_661;
reg   [31:0] mul9_i_9_reg_666;
reg   [31:0] mul9_i_10_reg_681;
reg   [31:0] mul9_i_s_reg_686;
reg   [31:0] mul9_i_s_reg_686_pp0_iter2_reg;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage2_subdone;
wire   [63:0] zext_ln136_fu_366_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln136_13_fu_377_p1;
wire   [63:0] zext_ln136_14_fu_392_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln136_15_fu_402_p1;
wire   [63:0] zext_ln136_16_fu_412_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln136_17_fu_422_p1;
wire   [63:0] zext_ln136_18_fu_432_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln136_19_fu_442_p1;
wire   [63:0] zext_ln136_20_fu_452_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln136_21_fu_462_p1;
wire   [63:0] zext_ln136_22_fu_472_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln136_23_fu_482_p1;
wire   [63:0] i_57_cast15_fu_487_p1;
reg   [3:0] i_fu_86;
wire   [3:0] add_ln133_fu_334_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_50;
reg   [31:0] grp_fu_280_p0;
reg   [31:0] grp_fu_280_p1;
reg   [31:0] grp_fu_286_p0;
reg   [31:0] grp_fu_286_p1;
reg   [31:0] grp_fu_293_p1;
reg   [31:0] grp_fu_298_p1;
wire   [5:0] p_shl3_fu_348_p3;
wire   [7:0] p_shl2_fu_340_p3;
wire   [7:0] p_shl3_cast_fu_356_p1;
wire   [7:0] or_ln136_fu_371_p2;
wire   [7:0] or_ln136_3_fu_387_p2;
wire   [7:0] or_ln136_4_fu_397_p2;
wire   [7:0] add_ln136_4_fu_407_p2;
wire   [7:0] add_ln136_5_fu_417_p2;
wire   [7:0] add_ln136_6_fu_427_p2;
wire   [7:0] add_ln136_7_fu_437_p2;
wire   [7:0] add_ln136_fu_447_p2;
wire   [7:0] add_ln136_8_fu_457_p2;
wire   [7:0] add_ln136_9_fu_467_p2;
wire   [7:0] add_ln136_10_fu_477_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage2;
reg    ap_idle_pp0_0to0;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_fadd_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_2_full_dsp_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_280_p0),
    .din1(grp_fu_280_p1),
    .ce(1'b1),
    .dout(grp_fu_280_p2)
);

tracking_fadd_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_2_full_dsp_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_286_p0),
    .din1(grp_fu_286_p1),
    .ce(1'b1),
    .dout(grp_fu_286_p2)
);

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U36(
    .din0(Adyn_1_q1),
    .din1(grp_fu_293_p1),
    .dout(grp_fu_293_p2)
);

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U37(
    .din0(Adyn_1_q0),
    .din1(grp_fu_298_p1),
    .dout(grp_fu_298_p2)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage5),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage5)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln133_fu_328_p2 == 1'd0))) begin
            i_fu_86 <= add_ln133_fu_334_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_86 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln133_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_118_reg_567[7 : 2] <= empty_118_fu_360_p2[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_50_reg_558 <= ap_sig_allocacmp_i_50;
        i_50_reg_558_pp0_iter1_reg <= i_50_reg_558;
        i_50_reg_558_pp0_iter2_reg <= i_50_reg_558_pp0_iter1_reg;
        icmp_ln133_reg_563 <= icmp_ln133_fu_328_p2;
        icmp_ln133_reg_563_pp0_iter1_reg <= icmp_ln133_reg_563;
        mul9_i_s_reg_686_pp0_iter2_reg <= mul9_i_s_reg_686;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul9_i_10_reg_681 <= grp_fu_293_p2;
        mul9_i_s_reg_686 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul9_i_1_reg_591 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul9_i_2_reg_606 <= grp_fu_293_p2;
        mul9_i_3_reg_611 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul9_i_5_reg_626 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mul9_i_6_reg_641 <= grp_fu_293_p2;
        mul9_i_7_reg_646 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mul9_i_8_reg_661 <= grp_fu_293_p2;
        mul9_i_9_reg_666 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        reg_303 <= grp_fu_293_p2;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            Adyn_1_address0 = zext_ln136_23_fu_482_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            Adyn_1_address0 = zext_ln136_21_fu_462_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            Adyn_1_address0 = zext_ln136_19_fu_442_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            Adyn_1_address0 = zext_ln136_17_fu_422_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            Adyn_1_address0 = zext_ln136_15_fu_402_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            Adyn_1_address0 = zext_ln136_13_fu_377_p1;
        end else begin
            Adyn_1_address0 = 'bx;
        end
    end else begin
        Adyn_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            Adyn_1_address1 = zext_ln136_22_fu_472_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            Adyn_1_address1 = zext_ln136_20_fu_452_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            Adyn_1_address1 = zext_ln136_18_fu_432_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            Adyn_1_address1 = zext_ln136_16_fu_412_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            Adyn_1_address1 = zext_ln136_14_fu_392_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            Adyn_1_address1 = zext_ln136_fu_366_p1;
        end else begin
            Adyn_1_address1 = 'bx;
        end
    end else begin
        Adyn_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        Adyn_1_ce0 = 1'b1;
    end else begin
        Adyn_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        Adyn_1_ce1 = 1'b1;
    end else begin
        Adyn_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln133_reg_563 == 1'd1) & (1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln133_reg_563_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter1_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_50 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_50 = i_fu_86;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_280_p0 = grp_fu_280_p2;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_280_p0 = reg_303;
    end else begin
        grp_fu_280_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_280_p1 = mul9_i_5_reg_626;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_280_p1 = reg_303;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_280_p1 = mul9_i_3_reg_611;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_280_p1 = mul9_i_2_reg_606;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_280_p1 = mul9_i_1_reg_591;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_280_p1 = 32'd0;
    end else begin
        grp_fu_280_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_286_p0 = grp_fu_286_p2;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_286_p0 = grp_fu_280_p2;
    end else begin
        grp_fu_286_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_286_p1 = mul9_i_s_reg_686_pp0_iter2_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_286_p1 = mul9_i_10_reg_681;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_286_p1 = mul9_i_9_reg_666;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_286_p1 = mul9_i_8_reg_661;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_286_p1 = mul9_i_7_reg_646;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_286_p1 = mul9_i_6_reg_641;
    end else begin
        grp_fu_286_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_293_p1 = x_col_load_10;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_293_p1 = x_col_load_8;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_293_p1 = x_col_load_6;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_293_p1 = x_col_load_4;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_293_p1 = x_col_load_2;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_293_p1 = x_col_load;
    end else begin
        grp_fu_293_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_298_p1 = x_col_load_11;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_298_p1 = x_col_load_9;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_298_p1 = x_col_load_7;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_298_p1 = x_col_load_5;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_298_p1 = x_col_load_3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_298_p1 = x_col_load_1;
    end else begin
        grp_fu_298_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tiny_x1_ce0 = 1'b1;
    end else begin
        tiny_x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tiny_x1_we0 = 1'b1;
    end else begin
        tiny_x1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln133_fu_334_p2 = (ap_sig_allocacmp_i_50 + 4'd1);

assign add_ln136_10_fu_477_p2 = (empty_118_reg_567 + 8'd11);

assign add_ln136_4_fu_407_p2 = (empty_118_reg_567 + 8'd4);

assign add_ln136_5_fu_417_p2 = (empty_118_reg_567 + 8'd5);

assign add_ln136_6_fu_427_p2 = (empty_118_reg_567 + 8'd6);

assign add_ln136_7_fu_437_p2 = (empty_118_reg_567 + 8'd7);

assign add_ln136_8_fu_457_p2 = (empty_118_reg_567 + 8'd9);

assign add_ln136_9_fu_467_p2 = (empty_118_reg_567 + 8'd10);

assign add_ln136_fu_447_p2 = (empty_118_reg_567 + 8'd8);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage5;

assign empty_118_fu_360_p2 = (p_shl2_fu_340_p3 - p_shl3_cast_fu_356_p1);

assign i_57_cast15_fu_487_p1 = i_50_reg_558_pp0_iter2_reg;

assign icmp_ln133_fu_328_p2 = ((ap_sig_allocacmp_i_50 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln136_3_fu_387_p2 = (empty_118_reg_567 | 8'd2);

assign or_ln136_4_fu_397_p2 = (empty_118_reg_567 | 8'd3);

assign or_ln136_fu_371_p2 = (empty_118_fu_360_p2 | 8'd1);

assign p_shl2_fu_340_p3 = {{ap_sig_allocacmp_i_50}, {4'd0}};

assign p_shl3_cast_fu_356_p1 = p_shl3_fu_348_p3;

assign p_shl3_fu_348_p3 = {{ap_sig_allocacmp_i_50}, {2'd0}};

assign tiny_x1_address0 = i_57_cast15_fu_487_p1;

assign tiny_x1_d0 = grp_fu_286_p2;

assign zext_ln136_13_fu_377_p1 = or_ln136_fu_371_p2;

assign zext_ln136_14_fu_392_p1 = or_ln136_3_fu_387_p2;

assign zext_ln136_15_fu_402_p1 = or_ln136_4_fu_397_p2;

assign zext_ln136_16_fu_412_p1 = add_ln136_4_fu_407_p2;

assign zext_ln136_17_fu_422_p1 = add_ln136_5_fu_417_p2;

assign zext_ln136_18_fu_432_p1 = add_ln136_6_fu_427_p2;

assign zext_ln136_19_fu_442_p1 = add_ln136_7_fu_437_p2;

assign zext_ln136_20_fu_452_p1 = add_ln136_fu_447_p2;

assign zext_ln136_21_fu_462_p1 = add_ln136_8_fu_457_p2;

assign zext_ln136_22_fu_472_p1 = add_ln136_9_fu_467_p2;

assign zext_ln136_23_fu_482_p1 = add_ln136_10_fu_477_p2;

assign zext_ln136_fu_366_p1 = empty_118_fu_360_p2;

always @ (posedge ap_clk) begin
    empty_118_reg_567[1:0] <= 2'b00;
end

endmodule //tracking_forward_pass_2_Pipeline_VITIS_LOOP_133_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_forward_pass_2_Pipeline_VITIS_LOOP_133_127 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        u_1_load,
        u_1_load_4,
        u_1_load_5,
        u_1_load_6,
        Bdyn_1_address0,
        Bdyn_1_ce0,
        Bdyn_1_q0,
        Bdyn_1_address1,
        Bdyn_1_ce1,
        Bdyn_1_q1,
        tiny_x2_address0,
        tiny_x2_ce0,
        tiny_x2_we0,
        tiny_x2_d0,
        grp_fu_549_p_din0,
        grp_fu_549_p_din1,
        grp_fu_549_p_opcode,
        grp_fu_549_p_dout0,
        grp_fu_549_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] u_1_load;
input  [31:0] u_1_load_4;
input  [31:0] u_1_load_5;
input  [31:0] u_1_load_6;
output  [5:0] Bdyn_1_address0;
output   Bdyn_1_ce0;
input  [31:0] Bdyn_1_q0;
output  [5:0] Bdyn_1_address1;
output   Bdyn_1_ce1;
input  [31:0] Bdyn_1_q1;
output  [3:0] tiny_x2_address0;
output   tiny_x2_ce0;
output   tiny_x2_we0;
output  [31:0] tiny_x2_d0;
output  [31:0] grp_fu_549_p_din0;
output  [31:0] grp_fu_549_p_din1;
output  [1:0] grp_fu_549_p_opcode;
input  [31:0] grp_fu_549_p_dout0;
output   grp_fu_549_p_ce;

reg ap_idle;
reg[5:0] Bdyn_1_address0;
reg Bdyn_1_ce0;
reg[5:0] Bdyn_1_address1;
reg Bdyn_1_ce1;
reg tiny_x2_ce0;
reg tiny_x2_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln133_reg_268;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_49_reg_263;
reg   [3:0] i_49_reg_263_pp0_iter1_reg;
reg   [3:0] i_49_reg_263_pp0_iter2_reg;
wire   [0:0] icmp_ln133_fu_171_p2;
reg   [0:0] icmp_ln133_reg_268_pp0_iter1_reg;
wire   [5:0] tmp_s_fu_183_p3;
reg   [5:0] tmp_s_reg_272;
wire   [31:0] grp_fu_147_p2;
reg   [31:0] mul9_i1_reg_288;
wire   [31:0] grp_fu_152_p2;
reg   [31:0] mul9_i1_1_reg_293;
reg   [31:0] mul9_i1_2_reg_308;
reg   [31:0] mul9_i1_3_reg_313;
reg   [31:0] mul9_i1_3_reg_313_pp0_iter2_reg;
wire   [31:0] grp_fu_140_p2;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln136_fu_191_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln136_19_fu_202_p1;
wire   [63:0] zext_ln136_20_fu_217_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln136_21_fu_227_p1;
wire   [63:0] i_58_cast16_fu_232_p1;
reg   [3:0] i_fu_52;
wire   [3:0] add_ln133_fu_177_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_49;
reg   [31:0] grp_fu_134_p0;
reg   [31:0] grp_fu_134_p1;
reg   [31:0] grp_fu_140_p0;
reg   [31:0] grp_fu_140_p1;
reg   [31:0] grp_fu_147_p1;
reg   [31:0] grp_fu_152_p1;
wire   [5:0] or_ln136_fu_196_p2;
wire   [5:0] or_ln136_3_fu_212_p2;
wire   [5:0] or_ln136_4_fu_222_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage0;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to3;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage1_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_fadd_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_2_full_dsp_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_140_p0),
    .din1(grp_fu_140_p1),
    .ce(1'b1),
    .dout(grp_fu_140_p2)
);

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U56(
    .din0(Bdyn_1_q1),
    .din1(grp_fu_147_p1),
    .dout(grp_fu_147_p2)
);

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U57(
    .din0(Bdyn_1_q0),
    .din1(grp_fu_152_p1),
    .dout(grp_fu_152_p2)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln133_fu_171_p2 == 1'd0))) begin
            i_fu_52 <= add_ln133_fu_177_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_49_reg_263 <= ap_sig_allocacmp_i_49;
        i_49_reg_263_pp0_iter1_reg <= i_49_reg_263;
        i_49_reg_263_pp0_iter2_reg <= i_49_reg_263_pp0_iter1_reg;
        icmp_ln133_reg_268 <= icmp_ln133_fu_171_p2;
        icmp_ln133_reg_268_pp0_iter1_reg <= icmp_ln133_reg_268;
        mul9_i1_3_reg_313_pp0_iter2_reg <= mul9_i1_3_reg_313;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_268 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul9_i1_1_reg_293 <= grp_fu_152_p2;
        mul9_i1_reg_288 <= grp_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul9_i1_2_reg_308 <= grp_fu_147_p2;
        mul9_i1_3_reg_313 <= grp_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln133_fu_171_p2 == 1'd0))) begin
        tmp_s_reg_272[5 : 2] <= tmp_s_fu_183_p3[5 : 2];
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            Bdyn_1_address0 = zext_ln136_21_fu_227_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            Bdyn_1_address0 = zext_ln136_19_fu_202_p1;
        end else begin
            Bdyn_1_address0 = 'bx;
        end
    end else begin
        Bdyn_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            Bdyn_1_address1 = zext_ln136_20_fu_217_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            Bdyn_1_address1 = zext_ln136_fu_191_p1;
        end else begin
            Bdyn_1_address1 = 'bx;
        end
    end else begin
        Bdyn_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        Bdyn_1_ce0 = 1'b1;
    end else begin
        Bdyn_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        Bdyn_1_ce1 = 1'b1;
    end else begin
        Bdyn_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln133_reg_268 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln133_reg_268_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_49 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_49 = i_fu_52;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_134_p0 = grp_fu_549_p_dout0;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_134_p0 = mul9_i1_reg_288;
        end else begin
            grp_fu_134_p0 = 'bx;
        end
    end else begin
        grp_fu_134_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_134_p1 = mul9_i1_1_reg_293;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_134_p1 = 32'd0;
        end else begin
            grp_fu_134_p1 = 'bx;
        end
    end else begin
        grp_fu_134_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_140_p0 = grp_fu_140_p2;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_140_p0 = grp_fu_549_p_dout0;
        end else begin
            grp_fu_140_p0 = 'bx;
        end
    end else begin
        grp_fu_140_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_140_p1 = mul9_i1_3_reg_313_pp0_iter2_reg;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_140_p1 = mul9_i1_2_reg_308;
        end else begin
            grp_fu_140_p1 = 'bx;
        end
    end else begin
        grp_fu_140_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_147_p1 = u_1_load_5;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_147_p1 = u_1_load;
    end else begin
        grp_fu_147_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_152_p1 = u_1_load_6;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_152_p1 = u_1_load_4;
    end else begin
        grp_fu_152_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x2_ce0 = 1'b1;
    end else begin
        tiny_x2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x2_we0 = 1'b1;
    end else begin
        tiny_x2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln133_fu_177_p2 = (ap_sig_allocacmp_i_49 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign grp_fu_549_p_ce = 1'b1;

assign grp_fu_549_p_din0 = grp_fu_134_p0;

assign grp_fu_549_p_din1 = grp_fu_134_p1;

assign grp_fu_549_p_opcode = 2'd0;

assign i_58_cast16_fu_232_p1 = i_49_reg_263_pp0_iter2_reg;

assign icmp_ln133_fu_171_p2 = ((ap_sig_allocacmp_i_49 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln136_3_fu_212_p2 = (tmp_s_reg_272 | 6'd2);

assign or_ln136_4_fu_222_p2 = (tmp_s_reg_272 | 6'd3);

assign or_ln136_fu_196_p2 = (tmp_s_fu_183_p3 | 6'd1);

assign tiny_x2_address0 = i_58_cast16_fu_232_p1;

assign tiny_x2_d0 = grp_fu_140_p2;

assign tmp_s_fu_183_p3 = {{ap_sig_allocacmp_i_49}, {2'd0}};

assign zext_ln136_19_fu_202_p1 = or_ln136_fu_196_p2;

assign zext_ln136_20_fu_217_p1 = or_ln136_3_fu_212_p2;

assign zext_ln136_21_fu_227_p1 = or_ln136_4_fu_222_p2;

assign zext_ln136_fu_191_p1 = tmp_s_fu_183_p3;

always @ (posedge ap_clk) begin
    tmp_s_reg_272[1:0] <= 2'b00;
end

endmodule //tracking_forward_pass_2_Pipeline_VITIS_LOOP_133_127
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_forward_pass_2_Pipeline_VITIS_LOOP_177_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_col_p1_address0,
        x_col_p1_ce0,
        x_col_p1_we0,
        x_col_p1_d0,
        tiny_x1_address0,
        tiny_x1_ce0,
        tiny_x1_q0,
        tiny_x2_address0,
        tiny_x2_ce0,
        tiny_x2_q0,
        grp_fu_549_p_din0,
        grp_fu_549_p_din1,
        grp_fu_549_p_opcode,
        grp_fu_549_p_dout0,
        grp_fu_549_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] x_col_p1_address0;
output   x_col_p1_ce0;
output   x_col_p1_we0;
output  [31:0] x_col_p1_d0;
output  [3:0] tiny_x1_address0;
output   tiny_x1_ce0;
input  [31:0] tiny_x1_q0;
output  [3:0] tiny_x2_address0;
output   tiny_x2_ce0;
input  [31:0] tiny_x2_q0;
output  [31:0] grp_fu_549_p_din0;
output  [31:0] grp_fu_549_p_din1;
output  [1:0] grp_fu_549_p_opcode;
input  [31:0] grp_fu_549_p_dout0;
output   grp_fu_549_p_ce;

reg ap_idle;
reg x_col_p1_ce0;
reg x_col_p1_we0;
reg tiny_x1_ce0;
reg tiny_x2_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln177_fu_90_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] j_cast_fu_102_p1;
reg   [63:0] j_cast_reg_124;
reg   [63:0] j_cast_reg_124_pp0_iter1_reg;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_32;
wire   [3:0] add_ln177_fu_96_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_15;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage0_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln177_fu_90_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_32 <= add_ln177_fu_96_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_32 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        j_cast_reg_124_pp0_iter1_reg[3 : 0] <= j_cast_reg_124[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_fu_90_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_cast_reg_124[3 : 0] <= j_cast_fu_102_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln177_fu_90_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_15 = 4'd0;
    end else begin
        ap_sig_allocacmp_j_15 = j_fu_32;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x1_ce0 = 1'b1;
    end else begin
        tiny_x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x2_ce0 = 1'b1;
    end else begin
        tiny_x2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        x_col_p1_ce0 = 1'b1;
    end else begin
        x_col_p1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        x_col_p1_we0 = 1'b1;
    end else begin
        x_col_p1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln177_fu_96_p2 = (ap_sig_allocacmp_j_15 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_549_p_ce = 1'b1;

assign grp_fu_549_p_din0 = tiny_x1_q0;

assign grp_fu_549_p_din1 = tiny_x2_q0;

assign grp_fu_549_p_opcode = 2'd0;

assign icmp_ln177_fu_90_p2 = ((ap_sig_allocacmp_j_15 == 4'd12) ? 1'b1 : 1'b0);

assign j_cast_fu_102_p1 = ap_sig_allocacmp_j_15;

assign tiny_x1_address0 = j_cast_fu_102_p1;

assign tiny_x2_address0 = j_cast_fu_102_p1;

assign x_col_p1_address0 = j_cast_reg_124_pp0_iter1_reg;

assign x_col_p1_d0 = grp_fu_549_p_dout0;

always @ (posedge ap_clk) begin
    j_cast_reg_124[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_cast_reg_124_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_forward_pass_2_Pipeline_VITIS_LOOP_177_2
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_forward_pass_2_x_col_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0, address1, ce1, d1, we1, q1,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 4;
parameter AddressRange = 12;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1;
output reg[DataWidth-1:0] q1;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];




always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
        q1 <= ram[address1];
    end
end


endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_forward_pass_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i,
        x_1_address0,
        x_1_ce0,
        x_1_we0,
        x_1_d0,
        x_1_q0,
        x_1_address1,
        x_1_ce1,
        x_1_q1,
        u_1_address0,
        u_1_ce0,
        u_1_q0,
        u_1_address1,
        u_1_ce1,
        u_1_q1,
        Adyn_1_address0,
        Adyn_1_ce0,
        Adyn_1_q0,
        Adyn_1_address1,
        Adyn_1_ce1,
        Adyn_1_q1,
        tiny_x1_address0,
        tiny_x1_ce0,
        tiny_x1_we0,
        tiny_x1_d0,
        tiny_x1_q0,
        Bdyn_1_address0,
        Bdyn_1_ce0,
        Bdyn_1_q0,
        Bdyn_1_address1,
        Bdyn_1_ce1,
        Bdyn_1_q1,
        tiny_x2_address0,
        tiny_x2_ce0,
        tiny_x2_we0,
        tiny_x2_d0,
        tiny_x2_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] i;
output  [6:0] x_1_address0;
output   x_1_ce0;
output   x_1_we0;
output  [31:0] x_1_d0;
input  [31:0] x_1_q0;
output  [6:0] x_1_address1;
output   x_1_ce1;
input  [31:0] x_1_q1;
output  [5:0] u_1_address0;
output   u_1_ce0;
input  [31:0] u_1_q0;
output  [5:0] u_1_address1;
output   u_1_ce1;
input  [31:0] u_1_q1;
output  [7:0] Adyn_1_address0;
output   Adyn_1_ce0;
input  [31:0] Adyn_1_q0;
output  [7:0] Adyn_1_address1;
output   Adyn_1_ce1;
input  [31:0] Adyn_1_q1;
output  [3:0] tiny_x1_address0;
output   tiny_x1_ce0;
output   tiny_x1_we0;
output  [31:0] tiny_x1_d0;
input  [31:0] tiny_x1_q0;
output  [5:0] Bdyn_1_address0;
output   Bdyn_1_ce0;
input  [31:0] Bdyn_1_q0;
output  [5:0] Bdyn_1_address1;
output   Bdyn_1_ce1;
input  [31:0] Bdyn_1_q1;
output  [3:0] tiny_x2_address0;
output   tiny_x2_ce0;
output   tiny_x2_we0;
output  [31:0] tiny_x2_d0;
input  [31:0] tiny_x2_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] x_1_address0;
reg x_1_ce0;
reg x_1_we0;
reg[6:0] x_1_address1;
reg x_1_ce1;
reg[5:0] u_1_address0;
reg u_1_ce0;
reg[5:0] u_1_address1;
reg u_1_ce1;
reg[3:0] tiny_x1_address0;
reg tiny_x1_ce0;
reg tiny_x1_we0;
reg[3:0] tiny_x2_address0;
reg tiny_x2_ce0;
reg tiny_x2_we0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] p_shl1_fu_310_p3;
reg   [5:0] p_shl1_reg_369;
wire   [6:0] mul_i_fu_322_p2;
reg   [6:0] mul_i_reg_377;
wire    ap_CS_fsm_state3;
wire   [31:0] x_col_q1;
reg   [31:0] x_col_load_reg_393;
wire    ap_CS_fsm_state4;
wire   [31:0] x_col_q0;
reg   [31:0] x_col_load_1_reg_398;
reg   [31:0] x_col_load_2_reg_413;
wire    ap_CS_fsm_state5;
reg   [31:0] x_col_load_3_reg_418;
reg   [31:0] x_col_load_4_reg_433;
wire    ap_CS_fsm_state6;
reg   [31:0] x_col_load_5_reg_438;
wire    ap_CS_fsm_state7;
reg   [31:0] x_col_load_6_reg_463;
reg   [31:0] x_col_load_7_reg_468;
reg   [31:0] u_1_load_reg_483;
wire    ap_CS_fsm_state8;
reg   [31:0] u_1_load_4_reg_488;
reg   [31:0] x_col_load_8_reg_503;
reg   [31:0] x_col_load_9_reg_508;
reg   [31:0] u_1_load_5_reg_523;
wire    ap_CS_fsm_state9;
reg   [31:0] u_1_load_6_reg_528;
wire   [6:0] mul_i12_fu_363_p2;
reg   [6:0] mul_i12_reg_533;
reg   [31:0] x_col_load_10_reg_539;
reg   [31:0] x_col_load_11_reg_544;
reg   [3:0] x_col_address0;
reg    x_col_ce0;
reg    x_col_we0;
reg   [3:0] x_col_address1;
reg    x_col_ce1;
reg    x_col_we1;
reg   [3:0] x_col_p1_address0;
reg    x_col_p1_ce0;
reg    x_col_p1_we0;
reg   [31:0] x_col_p1_d0;
wire   [31:0] x_col_p1_q0;
reg   [3:0] x_col_p1_address1;
reg    x_col_p1_ce1;
reg    x_col_p1_we1;
wire   [31:0] x_col_p1_q1;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_ap_start;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_ap_done;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_ap_idle;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_ap_ready;
wire   [3:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_address0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_ce0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_we0;
wire   [31:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_d0;
wire   [3:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_address1;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_ce1;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_we1;
wire   [31:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_d1;
wire   [6:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_1_address0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_1_ce0;
wire   [6:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_1_address1;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_1_ce1;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_ap_start;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_ap_done;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_ap_idle;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_ap_ready;
wire   [3:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_address0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_ce0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_we0;
wire   [31:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_d0;
wire   [3:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_address1;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_ce1;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_we1;
wire   [31:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_d1;
wire   [6:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_1_address0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_1_ce0;
wire   [6:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_1_address1;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_1_ce1;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_ap_start;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_ap_done;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_ap_idle;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_ap_ready;
wire   [7:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_Adyn_1_address0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_Adyn_1_ce0;
wire   [7:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_Adyn_1_address1;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_Adyn_1_ce1;
wire   [3:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_tiny_x1_address0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_tiny_x1_ce0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_tiny_x1_we0;
wire   [31:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_tiny_x1_d0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_ap_start;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_ap_done;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_ap_idle;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_ap_ready;
wire   [5:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_Bdyn_1_address0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_Bdyn_1_ce0;
wire   [5:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_Bdyn_1_address1;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_Bdyn_1_ce1;
wire   [3:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_tiny_x2_address0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_tiny_x2_ce0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_tiny_x2_we0;
wire   [31:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_tiny_x2_d0;
wire   [31:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_grp_fu_549_p_din0;
wire   [31:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_grp_fu_549_p_din1;
wire   [1:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_grp_fu_549_p_opcode;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_grp_fu_549_p_ce;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_ap_start;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_ap_done;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_ap_idle;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_ap_ready;
wire   [3:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_x_col_p1_address0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_x_col_p1_ce0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_x_col_p1_we0;
wire   [31:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_x_col_p1_d0;
wire   [3:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_tiny_x1_address0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_tiny_x1_ce0;
wire   [3:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_tiny_x2_address0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_tiny_x2_ce0;
wire   [31:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_grp_fu_549_p_din0;
wire   [31:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_grp_fu_549_p_din1;
wire   [1:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_grp_fu_549_p_opcode;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_grp_fu_549_p_ce;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_start;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_done;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_idle;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_ready;
wire   [3:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_col_p1_address0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_col_p1_ce0;
wire   [3:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_col_p1_address1;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_col_p1_ce1;
wire   [6:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_1_address0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_1_ce0;
wire    grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_1_we0;
wire   [31:0] grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_1_d0;
reg    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_ap_start_reg;
wire    ap_CS_fsm_state10;
reg    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_ap_start_reg;
reg    grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_ap_start_reg;
reg    grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg    grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_start_reg;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln88_fu_329_p1;
wire   [63:0] zext_ln88_51_fu_338_p1;
wire   [63:0] zext_ln88_52_fu_348_p1;
wire   [63:0] zext_ln88_53_fu_358_p1;
wire   [2:0] empty_fu_298_p1;
wire   [6:0] p_shl_fu_302_p3;
wire   [6:0] p_shl1_cast_fu_318_p1;
wire   [5:0] or_ln88_fu_333_p2;
wire   [5:0] or_ln88_1_fu_343_p2;
wire   [5:0] or_ln88_2_fu_353_p2;
wire   [31:0] grp_fu_549_p2;
reg   [31:0] grp_fu_549_p0;
reg   [31:0] grp_fu_549_p1;
reg    grp_fu_549_ce;
reg   [13:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_block_state10_on_subcall_done;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_ap_start_reg = 1'b0;
#0 grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_ap_start_reg = 1'b0;
#0 grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_ap_start_reg = 1'b0;
#0 grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_ap_start_reg = 1'b0;
#0 grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_ap_start_reg = 1'b0;
#0 grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_start_reg = 1'b0;
end

tracking_forward_pass_2_x_col_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
x_col_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_col_address0),
    .ce0(x_col_ce0),
    .we0(x_col_we0),
    .d0(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_d0),
    .q0(x_col_q0),
    .address1(x_col_address1),
    .ce1(x_col_ce1),
    .we1(x_col_we1),
    .d1(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_d1),
    .q1(x_col_q1)
);

tracking_forward_pass_2_x_col_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
x_col_p1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_col_p1_address0),
    .ce0(x_col_p1_ce0),
    .we0(x_col_p1_we0),
    .d0(x_col_p1_d0),
    .q0(x_col_p1_q0),
    .address1(x_col_p1_address1),
    .ce1(x_col_p1_ce1),
    .we1(x_col_p1_we1),
    .d1(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_d1),
    .q1(x_col_p1_q1)
);

tracking_forward_pass_2_Pipeline_VITIS_LOOP_86_1 grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_ap_start),
    .ap_done(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_ap_done),
    .ap_idle(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_ap_idle),
    .ap_ready(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_ap_ready),
    .mul_i(mul_i_reg_377),
    .x_col_address0(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_address0),
    .x_col_ce0(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_ce0),
    .x_col_we0(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_we0),
    .x_col_d0(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_d0),
    .x_col_address1(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_address1),
    .x_col_ce1(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_ce1),
    .x_col_we1(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_we1),
    .x_col_d1(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_d1),
    .x_1_address0(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_1_address0),
    .x_1_ce0(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_1_ce0),
    .x_1_q0(x_1_q0),
    .x_1_address1(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_1_address1),
    .x_1_ce1(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_1_ce1),
    .x_1_q1(x_1_q1)
);

tracking_forward_pass_2_Pipeline_VITIS_LOOP_86_126 grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_ap_start),
    .ap_done(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_ap_done),
    .ap_idle(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_ap_idle),
    .ap_ready(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_ap_ready),
    .mul_i12(mul_i12_reg_533),
    .x_col_p1_address0(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_address0),
    .x_col_p1_ce0(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_ce0),
    .x_col_p1_we0(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_we0),
    .x_col_p1_d0(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_d0),
    .x_col_p1_address1(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_address1),
    .x_col_p1_ce1(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_ce1),
    .x_col_p1_we1(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_we1),
    .x_col_p1_d1(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_d1),
    .x_1_address0(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_1_address0),
    .x_1_ce0(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_1_ce0),
    .x_1_q0(x_1_q0),
    .x_1_address1(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_1_address1),
    .x_1_ce1(grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_1_ce1),
    .x_1_q1(x_1_q1)
);

tracking_forward_pass_2_Pipeline_VITIS_LOOP_133_1 grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_ap_start),
    .ap_done(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_ap_done),
    .ap_idle(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_ap_idle),
    .ap_ready(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_ap_ready),
    .x_col_load(x_col_load_reg_393),
    .x_col_load_1(x_col_load_1_reg_398),
    .x_col_load_2(x_col_load_2_reg_413),
    .x_col_load_3(x_col_load_3_reg_418),
    .x_col_load_4(x_col_load_4_reg_433),
    .x_col_load_5(x_col_load_5_reg_438),
    .x_col_load_6(x_col_load_6_reg_463),
    .x_col_load_7(x_col_load_7_reg_468),
    .x_col_load_8(x_col_load_8_reg_503),
    .x_col_load_9(x_col_load_9_reg_508),
    .x_col_load_10(x_col_load_10_reg_539),
    .x_col_load_11(x_col_load_11_reg_544),
    .Adyn_1_address0(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_Adyn_1_address0),
    .Adyn_1_ce0(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_Adyn_1_ce0),
    .Adyn_1_q0(Adyn_1_q0),
    .Adyn_1_address1(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_Adyn_1_address1),
    .Adyn_1_ce1(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_Adyn_1_ce1),
    .Adyn_1_q1(Adyn_1_q1),
    .tiny_x1_address0(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_tiny_x1_address0),
    .tiny_x1_ce0(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_tiny_x1_ce0),
    .tiny_x1_we0(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_tiny_x1_we0),
    .tiny_x1_d0(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_tiny_x1_d0)
);

tracking_forward_pass_2_Pipeline_VITIS_LOOP_133_127 grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_ap_start),
    .ap_done(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_ap_done),
    .ap_idle(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_ap_idle),
    .ap_ready(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_ap_ready),
    .u_1_load(u_1_load_reg_483),
    .u_1_load_4(u_1_load_4_reg_488),
    .u_1_load_5(u_1_load_5_reg_523),
    .u_1_load_6(u_1_load_6_reg_528),
    .Bdyn_1_address0(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_Bdyn_1_address0),
    .Bdyn_1_ce0(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_Bdyn_1_ce0),
    .Bdyn_1_q0(Bdyn_1_q0),
    .Bdyn_1_address1(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_Bdyn_1_address1),
    .Bdyn_1_ce1(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_Bdyn_1_ce1),
    .Bdyn_1_q1(Bdyn_1_q1),
    .tiny_x2_address0(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_tiny_x2_address0),
    .tiny_x2_ce0(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_tiny_x2_ce0),
    .tiny_x2_we0(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_tiny_x2_we0),
    .tiny_x2_d0(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_tiny_x2_d0),
    .grp_fu_549_p_din0(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_grp_fu_549_p_din0),
    .grp_fu_549_p_din1(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_grp_fu_549_p_din1),
    .grp_fu_549_p_opcode(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_grp_fu_549_p_opcode),
    .grp_fu_549_p_dout0(grp_fu_549_p2),
    .grp_fu_549_p_ce(grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_grp_fu_549_p_ce)
);

tracking_forward_pass_2_Pipeline_VITIS_LOOP_177_2 grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_ap_start),
    .ap_done(grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_ap_done),
    .ap_idle(grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_ap_idle),
    .ap_ready(grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_ap_ready),
    .x_col_p1_address0(grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_x_col_p1_address0),
    .x_col_p1_ce0(grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_x_col_p1_ce0),
    .x_col_p1_we0(grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_x_col_p1_we0),
    .x_col_p1_d0(grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_x_col_p1_d0),
    .tiny_x1_address0(grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_tiny_x1_address0),
    .tiny_x1_ce0(grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_tiny_x1_ce0),
    .tiny_x1_q0(tiny_x1_q0),
    .tiny_x2_address0(grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_tiny_x2_address0),
    .tiny_x2_ce0(grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_tiny_x2_ce0),
    .tiny_x2_q0(tiny_x2_q0),
    .grp_fu_549_p_din0(grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_grp_fu_549_p_din0),
    .grp_fu_549_p_din1(grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_grp_fu_549_p_din1),
    .grp_fu_549_p_opcode(grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_grp_fu_549_p_opcode),
    .grp_fu_549_p_dout0(grp_fu_549_p2),
    .grp_fu_549_p_ce(grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_grp_fu_549_p_ce)
);

tracking_forward_pass_2_Pipeline_VITIS_LOOP_93_1 grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_start),
    .ap_done(grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_done),
    .ap_idle(grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_idle),
    .ap_ready(grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_ready),
    .x_col_p1_address0(grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_col_p1_address0),
    .x_col_p1_ce0(grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_col_p1_ce0),
    .x_col_p1_q0(x_col_p1_q0),
    .x_col_p1_address1(grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_col_p1_address1),
    .x_col_p1_ce1(grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_col_p1_ce1),
    .x_col_p1_q1(x_col_p1_q1),
    .mul_i12(mul_i12_reg_533),
    .x_1_address0(grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_1_address0),
    .x_1_ce0(grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_1_ce0),
    .x_1_we0(grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_1_we0),
    .x_1_d0(grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_1_d0)
);

tracking_fadd_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_2_full_dsp_1_U71(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_549_p0),
    .din1(grp_fu_549_p1),
    .ce(grp_fu_549_ce),
    .dout(grp_fu_549_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_ap_start_reg <= 1'b1;
        end else if ((grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_ap_ready == 1'b1)) begin
            grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_ap_start_reg <= 1'b1;
        end else if ((grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_ap_ready == 1'b1)) begin
            grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_ap_start_reg <= 1'b1;
        end else if ((grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_ap_ready == 1'b1)) begin
            grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_ap_start_reg <= 1'b1;
        end else if ((grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_ap_ready == 1'b1)) begin
            grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_ap_start_reg <= 1'b1;
        end else if ((grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_ap_ready == 1'b1)) begin
            grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_start_reg <= 1'b1;
        end else if ((grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_ready == 1'b1)) begin
            grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul_i12_reg_533[6 : 2] <= mul_i12_fu_363_p2[6 : 2];
        u_1_load_5_reg_523 <= u_1_q1;
        u_1_load_6_reg_528 <= u_1_q0;
        x_col_load_10_reg_539 <= x_col_q1;
        x_col_load_11_reg_544 <= x_col_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        mul_i_reg_377[6 : 2] <= mul_i_fu_322_p2[6 : 2];
        p_shl1_reg_369[5 : 2] <= p_shl1_fu_310_p3[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        u_1_load_4_reg_488 <= u_1_q0;
        u_1_load_reg_483 <= u_1_q1;
        x_col_load_8_reg_503 <= x_col_q1;
        x_col_load_9_reg_508 <= x_col_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_col_load_1_reg_398 <= x_col_q0;
        x_col_load_reg_393 <= x_col_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x_col_load_2_reg_413 <= x_col_q1;
        x_col_load_3_reg_418 <= x_col_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_col_load_4_reg_433 <= x_col_q1;
        x_col_load_5_reg_438 <= x_col_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_col_load_6_reg_463 <= x_col_q1;
        x_col_load_7_reg_468 <= x_col_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state10_on_subcall_done)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_ap_done == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_done == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_549_ce = grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_grp_fu_549_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_549_ce = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_grp_fu_549_p_ce;
    end else begin
        grp_fu_549_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_549_p0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_grp_fu_549_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_549_p0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_grp_fu_549_p_din0;
    end else begin
        grp_fu_549_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_549_p1 = grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_grp_fu_549_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_549_p1 = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_grp_fu_549_p_din1;
    end else begin
        grp_fu_549_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tiny_x1_address0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_tiny_x1_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        tiny_x1_address0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_tiny_x1_address0;
    end else begin
        tiny_x1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tiny_x1_ce0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_tiny_x1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        tiny_x1_ce0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_tiny_x1_ce0;
    end else begin
        tiny_x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tiny_x1_we0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_tiny_x1_we0;
    end else begin
        tiny_x1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tiny_x2_address0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_tiny_x2_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        tiny_x2_address0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_tiny_x2_address0;
    end else begin
        tiny_x2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tiny_x2_ce0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_tiny_x2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        tiny_x2_ce0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_tiny_x2_ce0;
    end else begin
        tiny_x2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tiny_x2_we0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_tiny_x2_we0;
    end else begin
        tiny_x2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        u_1_address0 = zext_ln88_53_fu_358_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        u_1_address0 = zext_ln88_51_fu_338_p1;
    end else begin
        u_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        u_1_address1 = zext_ln88_52_fu_348_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        u_1_address1 = zext_ln88_fu_329_p1;
    end else begin
        u_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        u_1_ce0 = 1'b1;
    end else begin
        u_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        u_1_ce1 = 1'b1;
    end else begin
        u_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        x_1_address0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        x_1_address0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_1_address0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_1_address0;
    end else begin
        x_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        x_1_address1 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_1_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_1_address1 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_1_address1;
    end else begin
        x_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        x_1_ce0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        x_1_ce0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_1_ce0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_1_ce0;
    end else begin
        x_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        x_1_ce1 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_1_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_1_ce1 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_1_ce1;
    end else begin
        x_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        x_1_we0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_1_we0;
    end else begin
        x_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        x_col_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        x_col_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        x_col_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_col_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        x_col_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_col_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_col_address0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_address0;
    end else begin
        x_col_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        x_col_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        x_col_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        x_col_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_col_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        x_col_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_col_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_col_address1 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_address1;
    end else begin
        x_col_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        x_col_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_col_ce0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_ce0;
    end else begin
        x_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        x_col_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_col_ce1 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_ce1;
    end else begin
        x_col_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        x_col_p1_address0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_col_p1_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        x_col_p1_address0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_x_col_p1_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        x_col_p1_address0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_address0;
    end else begin
        x_col_p1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        x_col_p1_address1 = grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_col_p1_address1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        x_col_p1_address1 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_address1;
    end else begin
        x_col_p1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        x_col_p1_ce0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_col_p1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        x_col_p1_ce0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_x_col_p1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        x_col_p1_ce0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_ce0;
    end else begin
        x_col_p1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        x_col_p1_ce1 = grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_col_p1_ce1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        x_col_p1_ce1 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_ce1;
    end else begin
        x_col_p1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        x_col_p1_d0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_x_col_p1_d0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        x_col_p1_d0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_d0;
    end else begin
        x_col_p1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        x_col_p1_we0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_x_col_p1_we0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        x_col_p1_we0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_we0;
    end else begin
        x_col_p1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        x_col_p1_we1 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_x_col_p1_we1;
    end else begin
        x_col_p1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_col_we0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_we0;
    end else begin
        x_col_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_col_we1 = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_x_col_we1;
    end else begin
        x_col_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Adyn_1_address0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_Adyn_1_address0;

assign Adyn_1_address1 = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_Adyn_1_address1;

assign Adyn_1_ce0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_Adyn_1_ce0;

assign Adyn_1_ce1 = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_Adyn_1_ce1;

assign Bdyn_1_address0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_Bdyn_1_address0;

assign Bdyn_1_address1 = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_Bdyn_1_address1;

assign Bdyn_1_ce0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_Bdyn_1_ce0;

assign Bdyn_1_ce1 = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_Bdyn_1_ce1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10_on_subcall_done = ((grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_ap_done == 1'b0) | (grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_ap_done == 1'b0) | (grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_ap_done == 1'b0));
end

assign empty_fu_298_p1 = i[2:0];

assign grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_ap_start = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_ap_start_reg;

assign grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_ap_start = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_ap_start_reg;

assign grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_ap_start = grp_forward_pass_2_Pipeline_VITIS_LOOP_177_2_fu_281_ap_start_reg;

assign grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_ap_start = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_126_fu_237_ap_start_reg;

assign grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_ap_start = grp_forward_pass_2_Pipeline_VITIS_LOOP_86_1_fu_228_ap_start_reg;

assign grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_start = grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_ap_start_reg;

assign mul_i12_fu_363_p2 = (mul_i_reg_377 + 7'd12);

assign mul_i_fu_322_p2 = (p_shl_fu_302_p3 - p_shl1_cast_fu_318_p1);

assign or_ln88_1_fu_343_p2 = (p_shl1_reg_369 | 6'd2);

assign or_ln88_2_fu_353_p2 = (p_shl1_reg_369 | 6'd3);

assign or_ln88_fu_333_p2 = (p_shl1_reg_369 | 6'd1);

assign p_shl1_cast_fu_318_p1 = p_shl1_fu_310_p3;

assign p_shl1_fu_310_p3 = {{i}, {2'd0}};

assign p_shl_fu_302_p3 = {{empty_fu_298_p1}, {4'd0}};

assign tiny_x1_d0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_1_fu_245_tiny_x1_d0;

assign tiny_x2_d0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_133_127_fu_267_tiny_x2_d0;

assign x_1_d0 = grp_forward_pass_2_Pipeline_VITIS_LOOP_93_1_fu_290_x_1_d0;

assign zext_ln88_51_fu_338_p1 = or_ln88_fu_333_p2;

assign zext_ln88_52_fu_348_p1 = or_ln88_1_fu_343_p2;

assign zext_ln88_53_fu_358_p1 = or_ln88_2_fu_353_p2;

assign zext_ln88_fu_329_p1 = p_shl1_reg_369;

always @ (posedge ap_clk) begin
    p_shl1_reg_369[1:0] <= 2'b00;
    mul_i_reg_377[1:0] <= 2'b00;
    mul_i12_reg_533[1:0] <= 2'b00;
end

endmodule //tracking_forward_pass_2
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_Kinf_1_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 6;
parameter AddressRange = 48;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_Kinf_1_RAM_AUTO_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_KinfT_1_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0, address1, ce1, q1,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 6;
parameter AddressRange = 48;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_KinfT_1_RAM_AUTO_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        q1 <= ram[address1];
    end
end


endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module tracking_mux_42_32_1_1 #(
parameter
    ID                = 0,
    NUM_STAGE         = 1,
    din0_WIDTH       = 32,
    din1_WIDTH       = 32,
    din2_WIDTH       = 32,
    din3_WIDTH       = 32,
    din4_WIDTH         = 32,
    dout_WIDTH            = 32
)(
    input  [31 : 0]     din0,
    input  [31 : 0]     din1,
    input  [31 : 0]     din2,
    input  [31 : 0]     din3,
    input  [1 : 0]    din4,
    output [31 : 0]   dout);

// puts internal signals
wire [1 : 0]     sel;
// level 1 signals
wire [31 : 0]         mux_1_0;
wire [31 : 0]         mux_1_1;
// level 2 signals
wire [31 : 0]         mux_2_0;

assign sel = din4;

// Generate level 1 logic
assign mux_1_0 = (sel[0] == 0)? din0 : din1;
assign mux_1_1 = (sel[0] == 0)? din2 : din3;

// Generate level 2 logic
assign mux_2_0 = (sel[1] == 0)? mux_1_0 : mux_1_1;

// output logic
assign dout = mux_2_0;

endmodule
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_Pinf_1_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 8;
parameter AddressRange = 144;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_Pinf_1_RAM_AUTO_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_Pinf_data_ROM_AUTO_1R (
address0, ce0, q0, reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 8;
parameter AddressRange = 144;

input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_Pinf_data_ROM_AUTO_1R.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[address0];
    end
end



endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_PinfT_1_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0, address1, ce1, q1,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 8;
parameter AddressRange = 144;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_PinfT_1_RAM_AUTO_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        q1 <= ram[address1];
    end
end


endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_Quu_inv_1_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0, address1, ce1, q1,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 4;
parameter AddressRange = 16;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_Quu_inv_1_RAM_AUTO_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        q1 <= ram[address1];
    end
end


endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_set_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_we0,
        a_d0,
        observations_address0,
        observations_ce0,
        observations_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] a_address0;
output   a_ce0;
output   a_we0;
output  [31:0] a_d0;
output  [3:0] observations_address0;
output   observations_ce0;
input  [31:0] observations_q0;

reg ap_idle;
reg a_ce0;
reg a_we0;
reg observations_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln100_fu_82_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] i_cast_fu_94_p1;
reg   [63:0] i_cast_reg_119;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [3:0] i_fu_44;
wire   [3:0] add_ln100_fu_88_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_45;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln100_fu_82_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_44 <= add_ln100_fu_88_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_44 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_82_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast_reg_119[3 : 0] <= i_cast_fu_94_p1[3 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln100_fu_82_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_45 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_45 = i_fu_44;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        observations_ce0 = 1'b1;
    end else begin
        observations_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = i_cast_reg_119;

assign a_d0 = observations_q0;

assign add_ln100_fu_88_p2 = (ap_sig_allocacmp_i_45 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_cast_fu_94_p1 = ap_sig_allocacmp_i_45;

assign icmp_ln100_fu_82_p2 = ((ap_sig_allocacmp_i_45 == 4'd12) ? 1'b1 : 1'b0);

assign observations_address0 = i_cast_fu_94_p1;

always @ (posedge ap_clk) begin
    i_cast_reg_119[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_set_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_set_16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_we0,
        a_d0,
        data_address0,
        data_ce0,
        data_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] a_address0;
output   a_ce0;
output   a_we0;
output  [31:0] a_d0;
output  [7:0] data_address0;
output   data_ce0;
input  [31:0] data_q0;

reg ap_idle;
reg a_ce0;
reg a_we0;
reg data_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln102_fu_86_p2;
wire   [0:0] icmp_ln100_fu_69_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] icmp_ln100_reg_104;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] i_cast1_fu_81_p1;
reg   [63:0] i_cast1_reg_108;
wire    ap_block_pp0_stage0;
reg   [7:0] i_fu_30;
wire   [7:0] add_ln100_fu_75_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i_44;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_151;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_151)) begin
            i_fu_30 <= add_ln100_fu_75_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_30 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_69_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast1_reg_108[7 : 0] <= i_cast1_fu_81_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln100_reg_104 <= icmp_ln100_fu_69_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln100_reg_104 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((icmp_ln100_fu_69_p2 == 1'd0) | (icmp_ln102_fu_86_p2 == 1'd1)))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_44 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_44 = i_fu_30;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = i_cast1_reg_108;

assign a_d0 = data_q0;

assign add_ln100_fu_75_p2 = (ap_sig_allocacmp_i_44 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_151 = ((icmp_ln100_fu_69_p2 == 1'd1) & (icmp_ln102_fu_86_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign data_address0 = i_cast1_fu_81_p1;

assign i_cast1_fu_81_p1 = ap_sig_allocacmp_i_44;

assign icmp_ln100_fu_69_p2 = ((ap_sig_allocacmp_i_44 < 8'd144) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_86_p2 = ((ap_sig_allocacmp_i_44 == 8'd144) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    i_cast1_reg_108[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_set_16
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_set_1613 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_we0,
        a_d0,
        data_address0,
        data_ce0,
        data_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] a_address0;
output   a_ce0;
output   a_we0;
output  [31:0] a_d0;
output  [5:0] data_address0;
output   data_ce0;
input  [31:0] data_q0;

reg ap_idle;
reg a_ce0;
reg a_we0;
reg data_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln100_fu_69_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] i_cast2_fu_81_p1;
reg   [63:0] i_cast2_reg_101;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [5:0] i_fu_30;
wire   [5:0] add_ln100_fu_75_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_43;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln100_fu_69_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_30 <= add_ln100_fu_75_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_30 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_69_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast2_reg_101[5 : 0] <= i_cast2_fu_81_p1[5 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln100_fu_69_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_43 = 6'd0;
    end else begin
        ap_sig_allocacmp_i_43 = i_fu_30;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = i_cast2_reg_101;

assign a_d0 = data_q0;

assign add_ln100_fu_75_p2 = (ap_sig_allocacmp_i_43 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign data_address0 = i_cast2_fu_81_p1;

assign i_cast2_fu_81_p1 = ap_sig_allocacmp_i_43;

assign icmp_ln100_fu_69_p2 = ((ap_sig_allocacmp_i_43 == 6'd48) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    i_cast2_reg_101[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_set_1613
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps

module tracking_srem_32ns_2ns_1_36_seq_1_divseq
#(parameter
    in0_WIDTH = 32,
    in1_WIDTH = 32,
    out_WIDTH = 32
)
(
    input                       clk,
    input                       reset,
    input                       ce,
    input                       start,
    input       [in0_WIDTH-1:0] dividend,
    input       [in1_WIDTH-1:0] divisor,
    input       [1:0]           sign_i,
    output wire [1:0]           sign_o,
    output wire                 done,
    output wire [out_WIDTH-1:0] quot,
    output wire [out_WIDTH-1:0] remd
);

localparam cal_WIDTH = (in0_WIDTH > in1_WIDTH)? in0_WIDTH : in1_WIDTH;

//------------------------Local signal-------------------
reg     [in0_WIDTH-1:0] dividend0;
reg     [in1_WIDTH-1:0] divisor0;
reg     [1:0]           sign0;
reg     [in0_WIDTH-1:0] dividend_tmp;
reg     [in0_WIDTH-1:0] remd_tmp;
wire    [in0_WIDTH-1:0] dividend_tmp_mux;
wire    [in0_WIDTH-1:0] remd_tmp_mux;
wire    [in0_WIDTH-1:0] comb_tmp;
wire    [cal_WIDTH:0]   cal_tmp;

//------------------------Body---------------------------
assign  quot   = dividend_tmp;
assign  remd   = remd_tmp;
assign  sign_o = sign0;

// dividend0, divisor0
always @(posedge clk)
begin
    if (start) begin
        dividend0 <= dividend;
        divisor0  <= divisor;
        sign0     <= sign_i;
    end
end

// One-Hot Register
// r_stage[0]=1:accept input; r_stage[in0_WIDTH]=1:done
reg     [in0_WIDTH:0]     r_stage;
assign done = r_stage[in0_WIDTH];
always @(posedge clk)
begin
    if (reset == 1'b1)
        r_stage[in0_WIDTH:0] <= {in0_WIDTH{1'b0}};
    else if (ce)
        r_stage[in0_WIDTH:0] <= {r_stage[in0_WIDTH-1:0], start};
end

// MUXs
assign  dividend_tmp_mux = r_stage[0]? dividend0 : dividend_tmp;
assign  remd_tmp_mux     = r_stage[0]? {in0_WIDTH{1'b0}} : remd_tmp;

if (in0_WIDTH == 1) assign comb_tmp = dividend_tmp_mux[0];
else                assign comb_tmp = {remd_tmp_mux[in0_WIDTH-2:0], dividend_tmp_mux[in0_WIDTH-1]};

assign  cal_tmp  = {1'b0, comb_tmp} - {1'b0, divisor0};

always @(posedge clk)
begin
    if (ce) begin
        if (in0_WIDTH == 1) dividend_tmp <= ~cal_tmp[cal_WIDTH];
        else           dividend_tmp <= {dividend_tmp_mux[in0_WIDTH-2:0], ~cal_tmp[cal_WIDTH]};
        remd_tmp     <= cal_tmp[cal_WIDTH]? comb_tmp : cal_tmp[in0_WIDTH-1:0];
    end
end

endmodule

module tracking_srem_32ns_2ns_1_36_seq_1 
#(parameter
        ID   = 1,
        NUM_STAGE   = 2,
        din0_WIDTH   = 32,
        din1_WIDTH   = 32,
        dout_WIDTH   = 32
)
(
        input                           clk,
        input                           reset,
        input                           ce,
        input                           start,
        output  reg                     done,
        input           [din0_WIDTH-1:0] din0,
        input           [din1_WIDTH-1:0] din1,
        output          [dout_WIDTH-1:0] dout
);
//------------------------Local signal-------------------
reg                       start0 = 'b0;
wire                      done0;
reg     [din0_WIDTH-1:0] dividend0;
reg     [din1_WIDTH-1:0] divisor0;
wire    [din0_WIDTH-1:0] dividend_u;
wire    [din1_WIDTH-1:0] divisor_u;
wire    [dout_WIDTH-1:0] quot_u;
wire    [dout_WIDTH-1:0] remd_u;
reg     [dout_WIDTH-1:0] quot;
reg     [dout_WIDTH-1:0] remd;
wire    [1:0]   sign_i;
wire    [1:0]   sign_o;
//------------------------Instantiation------------------
tracking_srem_32ns_2ns_1_36_seq_1_divseq #(
    .in0_WIDTH      ( din0_WIDTH ),
    .in1_WIDTH      ( din1_WIDTH ),
    .out_WIDTH      ( dout_WIDTH )
) tracking_srem_32ns_2ns_1_36_seq_1_divseq_u (
    .clk      ( clk ),
    .reset    ( reset ),
    .ce       ( ce ),
    .start    ( start0 ),
    .done     ( done0 ),
    .dividend ( dividend_u ),
    .divisor  ( divisor_u ),
    .sign_i   ( sign_i ),
    .sign_o   ( sign_o ),
    .quot     ( quot_u ),
    .remd     ( remd_u )
);
//------------------------Body---------------------------
assign sign_i     = {dividend0[din0_WIDTH-1] ^ divisor0[din1_WIDTH-1], dividend0[din0_WIDTH-1]};
assign dividend_u = dividend0[din0_WIDTH-1]? ~dividend0[din0_WIDTH-1:0] + 1'b1 :
                                              dividend0[din0_WIDTH-1:0];
assign divisor_u  = divisor0[din1_WIDTH-1]?  ~divisor0[din1_WIDTH-1:0] + 1'b1 :
                                              divisor0[din1_WIDTH-1:0];

always @(posedge clk)
begin
    if (ce) begin
        dividend0 <= din0;
        divisor0  <= din1;
        start0    <= start;
    end
end

always @(posedge clk)
begin
    done <= done0;
end

always @(posedge clk)
begin
    if (done0) begin
        if (sign_o[1])
            quot <= ~quot_u + 1'b1;
        else
            quot <= quot_u;
    end
end

always @(posedge clk)
begin
    if (done0) begin
        if (sign_o[0])
            remd <= ~remd_u + 1'b1;
        else
            remd <= remd_u;
    end
end

assign dout = remd;

endmodule


// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_tiny_Q_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 4;
parameter AddressRange = 12;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_tiny_Q_RAM_AUTO_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_tiny_solve_d_1_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0, address1, ce1, d1, we1, q1,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 6;
parameter AddressRange = 36;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1;
output reg[DataWidth-1:0] q1;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_tiny_solve_d_1_RAM_AUTO_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
        q1 <= ram[address1];
    end
end


endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_tiny_solve_g_1_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0, address1, ce1, q1,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 7;
parameter AddressRange = 120;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_tiny_solve_g_1_RAM_AUTO_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        q1 <= ram[address1];
    end
end


endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_1_out,
        max_1_out_ap_vld,
        s2_1_address0,
        s2_1_ce0,
        s2_1_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] max_1_out;
output   max_1_out_ap_vld;
output  [6:0] s2_1_address0;
output   s2_1_ce0;
input  [31:0] s2_1_q0;

reg ap_idle;
reg max_1_out_ap_vld;
reg s2_1_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln50_fu_155_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln52_fu_246_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] max_1_fu_58;
wire   [31:0] max_fu_360_p3;
wire    ap_loop_init;
reg   [3:0] j_fu_62;
wire   [3:0] add_ln51_fu_251_p2;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_66;
wire   [3:0] select_ln50_2_fu_228_p3;
reg   [3:0] ap_sig_allocacmp_i_33;
reg   [6:0] indvar_flatten19_fu_70;
wire   [6:0] add_ln50_3_fu_161_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten19_load;
wire    ap_block_pp0_stage0_01001;
wire   [2:0] empty_fu_125_p1;
wire   [5:0] p_shl9_fu_137_p3;
wire   [6:0] p_shl8_fu_129_p3;
wire   [6:0] p_shl9_cast_fu_145_p1;
wire   [0:0] icmp_ln51_fu_176_p2;
wire   [3:0] add_ln50_fu_170_p2;
wire   [2:0] empty_99_fu_190_p1;
wire   [5:0] p_shl9_mid1_fu_202_p3;
wire   [6:0] p_shl8_mid1_fu_194_p3;
wire   [6:0] p_shl9_cast_mid1_fu_210_p1;
wire   [6:0] p_mid117_fu_214_p2;
wire   [6:0] empty_97_fu_149_p2;
wire   [3:0] select_ln50_fu_182_p3;
wire   [6:0] j_28_cast_fu_236_p1;
wire   [6:0] select_ln50_1_fu_220_p3;
wire   [6:0] add_ln52_fu_240_p2;
wire   [31:0] bitcast_ln52_fu_276_p1;
wire   [31:0] bitcast_ln52_1_fu_294_p1;
wire   [7:0] tmp_s_fu_280_p4;
wire   [22:0] trunc_ln52_fu_290_p1;
wire   [0:0] icmp_ln52_1_fu_318_p2;
wire   [0:0] icmp_ln52_fu_312_p2;
wire   [7:0] tmp_14_fu_298_p4;
wire   [22:0] trunc_ln52_4_fu_308_p1;
wire   [0:0] icmp_ln52_3_fu_336_p2;
wire   [0:0] icmp_ln52_2_fu_330_p2;
wire   [0:0] or_ln52_fu_324_p2;
wire   [0:0] or_ln52_1_fu_342_p2;
wire   [0:0] and_ln52_fu_348_p2;
wire   [0:0] tmp_15_fu_94_p2;
wire   [0:0] and_ln52_1_fu_354_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U368(
    .din0(s2_1_q0),
    .din1(max_1_fu_58),
    .opcode(5'd2),
    .dout(tmp_15_fu_94_p2)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln50_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_66 <= select_ln50_2_fu_228_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_66 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln50_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten19_fu_70 <= add_ln50_3_fu_161_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten19_fu_70 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln50_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_62 <= add_ln51_fu_251_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_62 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            max_1_fu_58 <= 32'd8388608;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            max_1_fu_58 <= max_fu_360_p3;
        end
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_155_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_33 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_33 = i_fu_66;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten19_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten19_load = indvar_flatten19_fu_70;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_62;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_155_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_1_out_ap_vld = 1'b1;
    end else begin
        max_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s2_1_ce0 = 1'b1;
    end else begin
        s2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_3_fu_161_p2 = (ap_sig_allocacmp_indvar_flatten19_load + 7'd1);

assign add_ln50_fu_170_p2 = (ap_sig_allocacmp_i_33 + 4'd1);

assign add_ln51_fu_251_p2 = (select_ln50_fu_182_p3 + 4'd1);

assign add_ln52_fu_240_p2 = (j_28_cast_fu_236_p1 + select_ln50_1_fu_220_p3);

assign and_ln52_1_fu_354_p2 = (tmp_15_fu_94_p2 & and_ln52_fu_348_p2);

assign and_ln52_fu_348_p2 = (or_ln52_fu_324_p2 & or_ln52_1_fu_342_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln52_1_fu_294_p1 = max_1_fu_58;

assign bitcast_ln52_fu_276_p1 = s2_1_q0;

assign empty_97_fu_149_p2 = (p_shl8_fu_129_p3 - p_shl9_cast_fu_145_p1);

assign empty_99_fu_190_p1 = add_ln50_fu_170_p2[2:0];

assign empty_fu_125_p1 = ap_sig_allocacmp_i_33[2:0];

assign icmp_ln50_fu_155_p2 = ((ap_sig_allocacmp_indvar_flatten19_load == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_176_p2 = ((ap_sig_allocacmp_j_load == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_318_p2 = ((trunc_ln52_fu_290_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_2_fu_330_p2 = ((tmp_14_fu_298_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln52_3_fu_336_p2 = ((trunc_ln52_4_fu_308_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_312_p2 = ((tmp_s_fu_280_p4 != 8'd255) ? 1'b1 : 1'b0);

assign j_28_cast_fu_236_p1 = select_ln50_fu_182_p3;

assign max_1_out = max_1_fu_58;

assign max_fu_360_p3 = ((and_ln52_1_fu_354_p2[0:0] == 1'b1) ? s2_1_q0 : max_1_fu_58);

assign or_ln52_1_fu_342_p2 = (icmp_ln52_3_fu_336_p2 | icmp_ln52_2_fu_330_p2);

assign or_ln52_fu_324_p2 = (icmp_ln52_fu_312_p2 | icmp_ln52_1_fu_318_p2);

assign p_mid117_fu_214_p2 = (p_shl8_mid1_fu_194_p3 - p_shl9_cast_mid1_fu_210_p1);

assign p_shl8_fu_129_p3 = {{empty_fu_125_p1}, {4'd0}};

assign p_shl8_mid1_fu_194_p3 = {{empty_99_fu_190_p1}, {4'd0}};

assign p_shl9_cast_fu_145_p1 = p_shl9_fu_137_p3;

assign p_shl9_cast_mid1_fu_210_p1 = p_shl9_mid1_fu_202_p3;

assign p_shl9_fu_137_p3 = {{ap_sig_allocacmp_i_33}, {2'd0}};

assign p_shl9_mid1_fu_202_p3 = {{add_ln50_fu_170_p2}, {2'd0}};

assign s2_1_address0 = zext_ln52_fu_246_p1;

assign select_ln50_1_fu_220_p3 = ((icmp_ln51_fu_176_p2[0:0] == 1'b1) ? p_mid117_fu_214_p2 : empty_97_fu_149_p2);

assign select_ln50_2_fu_228_p3 = ((icmp_ln51_fu_176_p2[0:0] == 1'b1) ? add_ln50_fu_170_p2 : ap_sig_allocacmp_i_33);

assign select_ln50_fu_182_p3 = ((icmp_ln51_fu_176_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign tmp_14_fu_298_p4 = {{bitcast_ln52_1_fu_294_p1[30:23]}};

assign tmp_s_fu_280_p4 = {{bitcast_ln52_fu_276_p1[30:23]}};

assign trunc_ln52_4_fu_308_p1 = bitcast_ln52_1_fu_294_p1[22:0];

assign trunc_ln52_fu_290_p1 = bitcast_ln52_fu_276_p1[22:0];

assign zext_ln52_fu_246_p1 = add_ln52_fu_240_p2;

endmodule //tracking_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_2_out,
        max_2_out_ap_vld,
        s2_1_address0,
        s2_1_ce0,
        s2_1_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] max_2_out;
output   max_2_out_ap_vld;
output  [6:0] s2_1_address0;
output   s2_1_ce0;
input  [31:0] s2_1_q0;

reg ap_idle;
reg max_2_out_ap_vld;
reg s2_1_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln50_fu_155_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln52_fu_246_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] max_2_fu_58;
wire   [31:0] max_fu_360_p3;
wire    ap_loop_init;
reg   [3:0] j_fu_62;
wire   [3:0] add_ln51_fu_251_p2;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_66;
wire   [3:0] select_ln50_4_fu_228_p3;
reg   [3:0] ap_sig_allocacmp_i_32;
reg   [6:0] indvar_flatten49_fu_70;
wire   [6:0] add_ln50_fu_161_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten49_load;
wire    ap_block_pp0_stage0_01001;
wire   [2:0] empty_fu_125_p1;
wire   [5:0] p_shl2_fu_137_p3;
wire   [6:0] p_shl_fu_129_p3;
wire   [6:0] p_shl15_cast_fu_145_p1;
wire   [0:0] icmp_ln51_fu_176_p2;
wire   [3:0] add_ln50_1_fu_170_p2;
wire   [2:0] empty_96_fu_190_p1;
wire   [5:0] p_shl15_mid1_fu_202_p3;
wire   [6:0] p_shl14_mid1_fu_194_p3;
wire   [6:0] p_shl15_cast_mid1_fu_210_p1;
wire   [6:0] p_mid147_fu_214_p2;
wire   [6:0] empty_94_fu_149_p2;
wire   [3:0] select_ln50_fu_182_p3;
wire   [6:0] j_31_cast_fu_236_p1;
wire   [6:0] select_ln50_3_fu_220_p3;
wire   [6:0] add_ln52_fu_240_p2;
wire   [31:0] bitcast_ln52_2_fu_276_p1;
wire   [31:0] bitcast_ln52_fu_294_p1;
wire   [7:0] tmp_s_fu_280_p4;
wire   [22:0] trunc_ln52_fu_290_p1;
wire   [0:0] icmp_ln52_5_fu_318_p2;
wire   [0:0] icmp_ln52_4_fu_312_p2;
wire   [7:0] tmp_12_fu_298_p4;
wire   [22:0] trunc_ln52_3_fu_308_p1;
wire   [0:0] icmp_ln52_fu_336_p2;
wire   [0:0] icmp_ln52_6_fu_330_p2;
wire   [0:0] or_ln52_2_fu_324_p2;
wire   [0:0] or_ln52_fu_342_p2;
wire   [0:0] and_ln52_2_fu_348_p2;
wire   [0:0] tmp_13_fu_94_p2;
wire   [0:0] and_ln52_fu_354_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U377(
    .din0(s2_1_q0),
    .din1(max_2_fu_58),
    .opcode(5'd2),
    .dout(tmp_13_fu_94_p2)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln50_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_66 <= select_ln50_4_fu_228_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_66 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln50_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten49_fu_70 <= add_ln50_fu_161_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten49_fu_70 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln50_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_62 <= add_ln51_fu_251_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_62 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            max_2_fu_58 <= 32'd8388608;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            max_2_fu_58 <= max_fu_360_p3;
        end
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_155_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_32 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_32 = i_fu_66;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten49_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten49_load = indvar_flatten49_fu_70;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_62;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_155_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_2_out_ap_vld = 1'b1;
    end else begin
        max_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s2_1_ce0 = 1'b1;
    end else begin
        s2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_1_fu_170_p2 = (ap_sig_allocacmp_i_32 + 4'd1);

assign add_ln50_fu_161_p2 = (ap_sig_allocacmp_indvar_flatten49_load + 7'd1);

assign add_ln51_fu_251_p2 = (select_ln50_fu_182_p3 + 4'd1);

assign add_ln52_fu_240_p2 = (j_31_cast_fu_236_p1 + select_ln50_3_fu_220_p3);

assign and_ln52_2_fu_348_p2 = (or_ln52_fu_342_p2 & or_ln52_2_fu_324_p2);

assign and_ln52_fu_354_p2 = (tmp_13_fu_94_p2 & and_ln52_2_fu_348_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln52_2_fu_276_p1 = s2_1_q0;

assign bitcast_ln52_fu_294_p1 = max_2_fu_58;

assign empty_94_fu_149_p2 = (p_shl_fu_129_p3 - p_shl15_cast_fu_145_p1);

assign empty_96_fu_190_p1 = add_ln50_1_fu_170_p2[2:0];

assign empty_fu_125_p1 = ap_sig_allocacmp_i_32[2:0];

assign icmp_ln50_fu_155_p2 = ((ap_sig_allocacmp_indvar_flatten49_load == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_176_p2 = ((ap_sig_allocacmp_j_load == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln52_4_fu_312_p2 = ((tmp_s_fu_280_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln52_5_fu_318_p2 = ((trunc_ln52_fu_290_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_6_fu_330_p2 = ((tmp_12_fu_298_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_336_p2 = ((trunc_ln52_3_fu_308_p1 == 23'd0) ? 1'b1 : 1'b0);

assign j_31_cast_fu_236_p1 = select_ln50_fu_182_p3;

assign max_2_out = max_2_fu_58;

assign max_fu_360_p3 = ((and_ln52_fu_354_p2[0:0] == 1'b1) ? s2_1_q0 : max_2_fu_58);

assign or_ln52_2_fu_324_p2 = (icmp_ln52_5_fu_318_p2 | icmp_ln52_4_fu_312_p2);

assign or_ln52_fu_342_p2 = (icmp_ln52_fu_336_p2 | icmp_ln52_6_fu_330_p2);

assign p_mid147_fu_214_p2 = (p_shl14_mid1_fu_194_p3 - p_shl15_cast_mid1_fu_210_p1);

assign p_shl14_mid1_fu_194_p3 = {{empty_96_fu_190_p1}, {4'd0}};

assign p_shl15_cast_fu_145_p1 = p_shl2_fu_137_p3;

assign p_shl15_cast_mid1_fu_210_p1 = p_shl15_mid1_fu_202_p3;

assign p_shl15_mid1_fu_202_p3 = {{add_ln50_1_fu_170_p2}, {2'd0}};

assign p_shl2_fu_137_p3 = {{ap_sig_allocacmp_i_32}, {2'd0}};

assign p_shl_fu_129_p3 = {{empty_fu_125_p1}, {4'd0}};

assign s2_1_address0 = zext_ln52_fu_246_p1;

assign select_ln50_3_fu_220_p3 = ((icmp_ln51_fu_176_p2[0:0] == 1'b1) ? p_mid147_fu_214_p2 : empty_94_fu_149_p2);

assign select_ln50_4_fu_228_p3 = ((icmp_ln51_fu_176_p2[0:0] == 1'b1) ? add_ln50_1_fu_170_p2 : ap_sig_allocacmp_i_32);

assign select_ln50_fu_182_p3 = ((icmp_ln51_fu_176_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign tmp_12_fu_298_p4 = {{bitcast_ln52_fu_294_p1[30:23]}};

assign tmp_s_fu_280_p4 = {{bitcast_ln52_2_fu_276_p1[30:23]}};

assign trunc_ln52_3_fu_308_p1 = bitcast_ln52_fu_294_p1[22:0];

assign trunc_ln52_fu_290_p1 = bitcast_ln52_2_fu_276_p1[22:0];

assign zext_ln52_fu_246_p1 = add_ln52_fu_240_p2;

endmodule //tracking_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_3_out,
        max_3_out_ap_vld,
        m2_1_address0,
        m2_1_ce0,
        m2_1_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] max_3_out;
output   max_3_out_ap_vld;
output  [5:0] m2_1_address0;
output   m2_1_ce0;
input  [31:0] m2_1_q0;

reg ap_idle;
reg max_3_out_ap_vld;
reg m2_1_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln50_fu_124_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln52_fu_188_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] max_fu_60;
wire   [31:0] max_4_fu_302_p3;
wire    ap_loop_init;
reg   [2:0] j_fu_64;
wire   [2:0] add_ln51_fu_193_p2;
reg   [2:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_68;
wire   [3:0] select_ln50_2_fu_162_p3;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [5:0] indvar_flatten79_fu_72;
wire   [5:0] add_ln50_fu_130_p2;
reg   [5:0] ap_sig_allocacmp_indvar_flatten79_load;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln51_fu_148_p2;
wire   [3:0] add_ln50_2_fu_142_p2;
wire   [2:0] select_ln50_fu_154_p3;
wire   [5:0] j_34_cast_fu_178_p1;
wire   [5:0] p_mid3_fu_170_p3;
wire   [5:0] add_ln52_fu_182_p2;
wire   [31:0] bitcast_ln52_fu_218_p1;
wire   [31:0] bitcast_ln52_2_fu_236_p1;
wire   [7:0] tmp_s_fu_222_p4;
wire   [22:0] trunc_ln52_fu_232_p1;
wire   [0:0] icmp_ln52_4_fu_260_p2;
wire   [0:0] icmp_ln52_fu_254_p2;
wire   [7:0] tmp_10_fu_240_p4;
wire   [22:0] trunc_ln52_2_fu_250_p1;
wire   [0:0] icmp_ln52_6_fu_278_p2;
wire   [0:0] icmp_ln52_5_fu_272_p2;
wire   [0:0] or_ln52_fu_266_p2;
wire   [0:0] or_ln52_2_fu_284_p2;
wire   [0:0] and_ln52_fu_290_p2;
wire   [0:0] tmp_11_fu_96_p2;
wire   [0:0] and_ln52_2_fu_296_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U386(
    .din0(m2_1_q0),
    .din1(max_fu_60),
    .opcode(5'd2),
    .dout(tmp_11_fu_96_p2)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln50_fu_124_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_68 <= select_ln50_2_fu_162_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_68 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln50_fu_124_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten79_fu_72 <= add_ln50_fu_130_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten79_fu_72 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln50_fu_124_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_64 <= add_ln51_fu_193_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_64 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            max_fu_60 <= 32'd8388608;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            max_fu_60 <= max_4_fu_302_p3;
        end
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_124_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_68;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten79_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten79_load = indvar_flatten79_fu_72;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m2_1_ce0 = 1'b1;
    end else begin
        m2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_124_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_3_out_ap_vld = 1'b1;
    end else begin
        max_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_2_fu_142_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign add_ln50_fu_130_p2 = (ap_sig_allocacmp_indvar_flatten79_load + 6'd1);

assign add_ln51_fu_193_p2 = (select_ln50_fu_154_p3 + 3'd1);

assign add_ln52_fu_182_p2 = (j_34_cast_fu_178_p1 + p_mid3_fu_170_p3);

assign and_ln52_2_fu_296_p2 = (tmp_11_fu_96_p2 & and_ln52_fu_290_p2);

assign and_ln52_fu_290_p2 = (or_ln52_fu_266_p2 & or_ln52_2_fu_284_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln52_2_fu_236_p1 = max_fu_60;

assign bitcast_ln52_fu_218_p1 = m2_1_q0;

assign icmp_ln50_fu_124_p2 = ((ap_sig_allocacmp_indvar_flatten79_load == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_148_p2 = ((ap_sig_allocacmp_j_load == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln52_4_fu_260_p2 = ((trunc_ln52_fu_232_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_5_fu_272_p2 = ((tmp_10_fu_240_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln52_6_fu_278_p2 = ((trunc_ln52_2_fu_250_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_254_p2 = ((tmp_s_fu_222_p4 != 8'd255) ? 1'b1 : 1'b0);

assign j_34_cast_fu_178_p1 = select_ln50_fu_154_p3;

assign m2_1_address0 = zext_ln52_fu_188_p1;

assign max_3_out = max_fu_60;

assign max_4_fu_302_p3 = ((and_ln52_2_fu_296_p2[0:0] == 1'b1) ? m2_1_q0 : max_fu_60);

assign or_ln52_2_fu_284_p2 = (icmp_ln52_6_fu_278_p2 | icmp_ln52_5_fu_272_p2);

assign or_ln52_fu_266_p2 = (icmp_ln52_fu_254_p2 | icmp_ln52_4_fu_260_p2);

assign p_mid3_fu_170_p3 = {{select_ln50_2_fu_162_p3}, {2'd0}};

assign select_ln50_2_fu_162_p3 = ((icmp_ln51_fu_148_p2[0:0] == 1'b1) ? add_ln50_2_fu_142_p2 : ap_sig_allocacmp_i_load);

assign select_ln50_fu_154_p3 = ((icmp_ln51_fu_148_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_load);

assign tmp_10_fu_240_p4 = {{bitcast_ln52_2_fu_236_p1[30:23]}};

assign tmp_s_fu_222_p4 = {{bitcast_ln52_fu_218_p1[30:23]}};

assign trunc_ln52_2_fu_250_p1 = bitcast_ln52_2_fu_236_p1[22:0];

assign trunc_ln52_fu_232_p1 = bitcast_ln52_fu_218_p1[22:0];

assign zext_ln52_fu_188_p1 = add_ln52_fu_182_p2;

endmodule //tracking_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_4_out,
        max_4_out_ap_vld,
        m2_1_address0,
        m2_1_ce0,
        m2_1_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] max_4_out;
output   max_4_out_ap_vld;
output  [5:0] m2_1_address0;
output   m2_1_ce0;
input  [31:0] m2_1_q0;

reg ap_idle;
reg max_4_out_ap_vld;
reg m2_1_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln50_fu_124_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln52_fu_188_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] max_fu_60;
wire   [31:0] max_2_fu_302_p3;
wire    ap_loop_init;
reg   [2:0] j_fu_64;
wire   [2:0] add_ln51_fu_193_p2;
reg   [2:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_68;
wire   [3:0] select_ln50_1_fu_162_p3;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [5:0] indvar_flatten109_fu_72;
wire   [5:0] add_ln50_fu_130_p2;
reg   [5:0] ap_sig_allocacmp_indvar_flatten109_load;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln51_fu_148_p2;
wire   [3:0] add_ln50_1_fu_142_p2;
wire   [2:0] select_ln50_fu_154_p3;
wire   [5:0] j_37_cast_fu_178_p1;
wire   [5:0] p_mid6_fu_170_p3;
wire   [5:0] add_ln52_fu_182_p2;
wire   [31:0] bitcast_ln52_fu_218_p1;
wire   [31:0] bitcast_ln52_1_fu_236_p1;
wire   [7:0] tmp_s_fu_222_p4;
wire   [22:0] trunc_ln52_fu_232_p1;
wire   [0:0] icmp_ln52_1_fu_260_p2;
wire   [0:0] icmp_ln52_fu_254_p2;
wire   [7:0] tmp_8_fu_240_p4;
wire   [22:0] trunc_ln52_1_fu_250_p1;
wire   [0:0] icmp_ln52_3_fu_278_p2;
wire   [0:0] icmp_ln52_2_fu_272_p2;
wire   [0:0] or_ln52_fu_266_p2;
wire   [0:0] or_ln52_1_fu_284_p2;
wire   [0:0] and_ln52_fu_290_p2;
wire   [0:0] tmp_9_fu_96_p2;
wire   [0:0] and_ln52_1_fu_296_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U395(
    .din0(m2_1_q0),
    .din1(max_fu_60),
    .opcode(5'd2),
    .dout(tmp_9_fu_96_p2)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln50_fu_124_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_68 <= select_ln50_1_fu_162_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_68 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln50_fu_124_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten109_fu_72 <= add_ln50_fu_130_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten109_fu_72 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln50_fu_124_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_64 <= add_ln51_fu_193_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_64 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            max_fu_60 <= 32'd8388608;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            max_fu_60 <= max_2_fu_302_p3;
        end
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_124_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_68;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten109_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten109_load = indvar_flatten109_fu_72;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m2_1_ce0 = 1'b1;
    end else begin
        m2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_124_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_4_out_ap_vld = 1'b1;
    end else begin
        max_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_1_fu_142_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign add_ln50_fu_130_p2 = (ap_sig_allocacmp_indvar_flatten109_load + 6'd1);

assign add_ln51_fu_193_p2 = (select_ln50_fu_154_p3 + 3'd1);

assign add_ln52_fu_182_p2 = (j_37_cast_fu_178_p1 + p_mid6_fu_170_p3);

assign and_ln52_1_fu_296_p2 = (tmp_9_fu_96_p2 & and_ln52_fu_290_p2);

assign and_ln52_fu_290_p2 = (or_ln52_fu_266_p2 & or_ln52_1_fu_284_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln52_1_fu_236_p1 = max_fu_60;

assign bitcast_ln52_fu_218_p1 = m2_1_q0;

assign icmp_ln50_fu_124_p2 = ((ap_sig_allocacmp_indvar_flatten109_load == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_148_p2 = ((ap_sig_allocacmp_j_load == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_260_p2 = ((trunc_ln52_fu_232_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_2_fu_272_p2 = ((tmp_8_fu_240_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln52_3_fu_278_p2 = ((trunc_ln52_1_fu_250_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_254_p2 = ((tmp_s_fu_222_p4 != 8'd255) ? 1'b1 : 1'b0);

assign j_37_cast_fu_178_p1 = select_ln50_fu_154_p3;

assign m2_1_address0 = zext_ln52_fu_188_p1;

assign max_2_fu_302_p3 = ((and_ln52_1_fu_296_p2[0:0] == 1'b1) ? m2_1_q0 : max_fu_60);

assign max_4_out = max_fu_60;

assign or_ln52_1_fu_284_p2 = (icmp_ln52_3_fu_278_p2 | icmp_ln52_2_fu_272_p2);

assign or_ln52_fu_266_p2 = (icmp_ln52_fu_254_p2 | icmp_ln52_1_fu_260_p2);

assign p_mid6_fu_170_p3 = {{select_ln50_1_fu_162_p3}, {2'd0}};

assign select_ln50_1_fu_162_p3 = ((icmp_ln51_fu_148_p2[0:0] == 1'b1) ? add_ln50_1_fu_142_p2 : ap_sig_allocacmp_i_load);

assign select_ln50_fu_154_p3 = ((icmp_ln51_fu_148_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_load);

assign tmp_8_fu_240_p4 = {{bitcast_ln52_1_fu_236_p1[30:23]}};

assign tmp_s_fu_222_p4 = {{bitcast_ln52_fu_218_p1[30:23]}};

assign trunc_ln52_1_fu_250_p1 = bitcast_ln52_1_fu_236_p1[22:0];

assign trunc_ln52_fu_232_p1 = bitcast_ln52_fu_218_p1[22:0];

assign zext_ln52_fu_188_p1 = add_ln52_fu_182_p2;

endmodule //tracking_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tiny_solve_Pipeline_VITIS_LOOP_100_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vnew_1_address0,
        vnew_1_ce0,
        vnew_1_q0,
        v_1_address0,
        v_1_ce0,
        v_1_we0,
        v_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] vnew_1_address0;
output   vnew_1_ce0;
input  [31:0] vnew_1_q0;
output  [6:0] v_1_address0;
output   v_1_ce0;
output   v_1_we0;
output  [31:0] v_1_d0;

reg ap_idle;
reg vnew_1_ce0;
reg v_1_ce0;
reg v_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln100_fu_69_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] i_50_cast_fu_81_p1;
reg   [63:0] i_50_cast_reg_101;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [6:0] i_fu_30;
wire   [6:0] add_ln100_fu_75_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_37;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln100_fu_69_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_30 <= add_ln100_fu_75_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_30 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_69_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_50_cast_reg_101[6 : 0] <= i_50_cast_fu_81_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln100_fu_69_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_37 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_37 = i_fu_30;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_1_ce0 = 1'b1;
    end else begin
        v_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_1_we0 = 1'b1;
    end else begin
        v_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vnew_1_ce0 = 1'b1;
    end else begin
        vnew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_75_p2 = (ap_sig_allocacmp_i_37 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_50_cast_fu_81_p1 = ap_sig_allocacmp_i_37;

assign icmp_ln100_fu_69_p2 = ((ap_sig_allocacmp_i_37 == 7'd120) ? 1'b1 : 1'b0);

assign v_1_address0 = i_50_cast_reg_101;

assign v_1_d0 = vnew_1_q0;

assign vnew_1_address0 = i_50_cast_fu_81_p1;

always @ (posedge ap_clk) begin
    i_50_cast_reg_101[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_tiny_solve_Pipeline_VITIS_LOOP_100_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s1_1_address0,
        s1_1_ce0,
        s1_1_q0,
        s2_1_address0,
        s2_1_ce0,
        s2_1_we0,
        s2_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] s1_1_address0;
output   s1_1_ce0;
input  [31:0] s1_1_q0;
output  [6:0] s2_1_address0;
output   s2_1_ce0;
output   s2_1_we0;
output  [31:0] s2_1_d0;

reg ap_idle;
reg s1_1_ce0;
reg s2_1_ce0;
reg s2_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln80_fu_137_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln82_fu_228_p1;
reg   [63:0] zext_ln82_reg_299;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_48;
wire   [3:0] add_ln81_fu_233_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_52;
wire   [3:0] select_ln80_2_fu_210_p3;
reg   [3:0] ap_sig_allocacmp_i_31;
reg   [6:0] indvar_flatten9_fu_56;
wire   [6:0] add_ln80_3_fu_143_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten9_load;
wire   [2:0] empty_fu_107_p1;
wire   [5:0] p_shl7_fu_119_p3;
wire   [6:0] p_shl6_fu_111_p3;
wire   [6:0] p_shl7_cast_fu_127_p1;
wire   [0:0] icmp_ln81_fu_158_p2;
wire   [3:0] add_ln80_fu_152_p2;
wire   [2:0] empty_93_fu_172_p1;
wire   [5:0] p_shl7_mid1_fu_184_p3;
wire   [6:0] p_shl6_mid1_fu_176_p3;
wire   [6:0] p_shl7_cast_mid1_fu_192_p1;
wire   [6:0] p_mid17_fu_196_p2;
wire   [6:0] empty_91_fu_131_p2;
wire   [3:0] select_ln80_fu_164_p3;
wire   [6:0] j_27_cast_fu_218_p1;
wire   [6:0] select_ln80_1_fu_202_p3;
wire   [6:0] add_ln82_fu_222_p2;
wire   [31:0] data_V_fu_254_p1;
wire   [30:0] trunc_ln368_fu_258_p1;
wire   [31:0] p_Result_s_fu_262_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln80_fu_137_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_52 <= select_ln80_2_fu_210_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln80_fu_137_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten9_fu_56 <= add_ln80_3_fu_143_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten9_fu_56 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln80_fu_137_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_48 <= add_ln81_fu_233_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_48 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_fu_137_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln82_reg_299[6 : 0] <= zext_ln82_fu_228_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln80_fu_137_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_31 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_31 = i_fu_52;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten9_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten9_load = indvar_flatten9_fu_56;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s1_1_ce0 = 1'b1;
    end else begin
        s1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s2_1_ce0 = 1'b1;
    end else begin
        s2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s2_1_we0 = 1'b1;
    end else begin
        s2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln80_3_fu_143_p2 = (ap_sig_allocacmp_indvar_flatten9_load + 7'd1);

assign add_ln80_fu_152_p2 = (ap_sig_allocacmp_i_31 + 4'd1);

assign add_ln81_fu_233_p2 = (select_ln80_fu_164_p3 + 4'd1);

assign add_ln82_fu_222_p2 = (j_27_cast_fu_218_p1 + select_ln80_1_fu_202_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign data_V_fu_254_p1 = s1_1_q0;

assign empty_91_fu_131_p2 = (p_shl6_fu_111_p3 - p_shl7_cast_fu_127_p1);

assign empty_93_fu_172_p1 = add_ln80_fu_152_p2[2:0];

assign empty_fu_107_p1 = ap_sig_allocacmp_i_31[2:0];

assign icmp_ln80_fu_137_p2 = ((ap_sig_allocacmp_indvar_flatten9_load == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_158_p2 = ((ap_sig_allocacmp_j_load == 4'd12) ? 1'b1 : 1'b0);

assign j_27_cast_fu_218_p1 = select_ln80_fu_164_p3;

assign p_Result_s_fu_262_p3 = {{1'd0}, {trunc_ln368_fu_258_p1}};

assign p_mid17_fu_196_p2 = (p_shl6_mid1_fu_176_p3 - p_shl7_cast_mid1_fu_192_p1);

assign p_shl6_fu_111_p3 = {{empty_fu_107_p1}, {4'd0}};

assign p_shl6_mid1_fu_176_p3 = {{empty_93_fu_172_p1}, {4'd0}};

assign p_shl7_cast_fu_127_p1 = p_shl7_fu_119_p3;

assign p_shl7_cast_mid1_fu_192_p1 = p_shl7_mid1_fu_184_p3;

assign p_shl7_fu_119_p3 = {{ap_sig_allocacmp_i_31}, {2'd0}};

assign p_shl7_mid1_fu_184_p3 = {{add_ln80_fu_152_p2}, {2'd0}};

assign s1_1_address0 = zext_ln82_fu_228_p1;

assign s2_1_address0 = zext_ln82_reg_299;

assign s2_1_d0 = p_Result_s_fu_262_p3;

assign select_ln80_1_fu_202_p3 = ((icmp_ln81_fu_158_p2[0:0] == 1'b1) ? p_mid17_fu_196_p2 : empty_91_fu_131_p2);

assign select_ln80_2_fu_210_p3 = ((icmp_ln81_fu_158_p2[0:0] == 1'b1) ? add_ln80_fu_152_p2 : ap_sig_allocacmp_i_31);

assign select_ln80_fu_164_p3 = ((icmp_ln81_fu_158_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign trunc_ln368_fu_258_p1 = data_V_fu_254_p1[30:0];

assign zext_ln82_fu_228_p1 = add_ln82_fu_222_p2;

always @ (posedge ap_clk) begin
    zext_ln82_reg_299[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s1_1_address0,
        s1_1_ce0,
        s1_1_q0,
        s2_1_address0,
        s2_1_ce0,
        s2_1_we0,
        s2_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] s1_1_address0;
output   s1_1_ce0;
input  [31:0] s1_1_q0;
output  [6:0] s2_1_address0;
output   s2_1_ce0;
output   s2_1_we0;
output  [31:0] s2_1_d0;

reg ap_idle;
reg s1_1_ce0;
reg s2_1_ce0;
reg s2_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln80_fu_137_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln82_fu_228_p1;
reg   [63:0] zext_ln82_reg_299;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_48;
wire   [3:0] add_ln81_fu_233_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_52;
wire   [3:0] select_ln80_4_fu_210_p3;
reg   [3:0] ap_sig_allocacmp_i_30;
reg   [6:0] indvar_flatten39_fu_56;
wire   [6:0] add_ln80_fu_143_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten39_load;
wire   [2:0] empty_fu_107_p1;
wire   [5:0] p_shl1_fu_119_p3;
wire   [6:0] p_shl_fu_111_p3;
wire   [6:0] p_shl13_cast_fu_127_p1;
wire   [0:0] icmp_ln81_fu_158_p2;
wire   [3:0] add_ln80_1_fu_152_p2;
wire   [2:0] empty_90_fu_172_p1;
wire   [5:0] p_shl13_mid1_fu_184_p3;
wire   [6:0] p_shl12_mid1_fu_176_p3;
wire   [6:0] p_shl13_cast_mid1_fu_192_p1;
wire   [6:0] p_mid137_fu_196_p2;
wire   [6:0] empty_88_fu_131_p2;
wire   [3:0] select_ln80_fu_164_p3;
wire   [6:0] j_30_cast_fu_218_p1;
wire   [6:0] select_ln80_3_fu_202_p3;
wire   [6:0] add_ln82_fu_222_p2;
wire   [31:0] data_V_fu_254_p1;
wire   [30:0] trunc_ln368_fu_258_p1;
wire   [31:0] p_Result_s_fu_262_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln80_fu_137_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_52 <= select_ln80_4_fu_210_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln80_fu_137_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten39_fu_56 <= add_ln80_fu_143_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten39_fu_56 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln80_fu_137_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_48 <= add_ln81_fu_233_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_48 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_fu_137_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln82_reg_299[6 : 0] <= zext_ln82_fu_228_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln80_fu_137_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_30 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_30 = i_fu_52;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten39_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten39_load = indvar_flatten39_fu_56;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s1_1_ce0 = 1'b1;
    end else begin
        s1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s2_1_ce0 = 1'b1;
    end else begin
        s2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s2_1_we0 = 1'b1;
    end else begin
        s2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln80_1_fu_152_p2 = (ap_sig_allocacmp_i_30 + 4'd1);

assign add_ln80_fu_143_p2 = (ap_sig_allocacmp_indvar_flatten39_load + 7'd1);

assign add_ln81_fu_233_p2 = (select_ln80_fu_164_p3 + 4'd1);

assign add_ln82_fu_222_p2 = (j_30_cast_fu_218_p1 + select_ln80_3_fu_202_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign data_V_fu_254_p1 = s1_1_q0;

assign empty_88_fu_131_p2 = (p_shl_fu_111_p3 - p_shl13_cast_fu_127_p1);

assign empty_90_fu_172_p1 = add_ln80_1_fu_152_p2[2:0];

assign empty_fu_107_p1 = ap_sig_allocacmp_i_30[2:0];

assign icmp_ln80_fu_137_p2 = ((ap_sig_allocacmp_indvar_flatten39_load == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_158_p2 = ((ap_sig_allocacmp_j_load == 4'd12) ? 1'b1 : 1'b0);

assign j_30_cast_fu_218_p1 = select_ln80_fu_164_p3;

assign p_Result_s_fu_262_p3 = {{1'd0}, {trunc_ln368_fu_258_p1}};

assign p_mid137_fu_196_p2 = (p_shl12_mid1_fu_176_p3 - p_shl13_cast_mid1_fu_192_p1);

assign p_shl12_mid1_fu_176_p3 = {{empty_90_fu_172_p1}, {4'd0}};

assign p_shl13_cast_fu_127_p1 = p_shl1_fu_119_p3;

assign p_shl13_cast_mid1_fu_192_p1 = p_shl13_mid1_fu_184_p3;

assign p_shl13_mid1_fu_184_p3 = {{add_ln80_1_fu_152_p2}, {2'd0}};

assign p_shl1_fu_119_p3 = {{ap_sig_allocacmp_i_30}, {2'd0}};

assign p_shl_fu_111_p3 = {{empty_fu_107_p1}, {4'd0}};

assign s1_1_address0 = zext_ln82_fu_228_p1;

assign s2_1_address0 = zext_ln82_reg_299;

assign s2_1_d0 = p_Result_s_fu_262_p3;

assign select_ln80_3_fu_202_p3 = ((icmp_ln81_fu_158_p2[0:0] == 1'b1) ? p_mid137_fu_196_p2 : empty_88_fu_131_p2);

assign select_ln80_4_fu_210_p3 = ((icmp_ln81_fu_158_p2[0:0] == 1'b1) ? add_ln80_1_fu_152_p2 : ap_sig_allocacmp_i_30);

assign select_ln80_fu_164_p3 = ((icmp_ln81_fu_158_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign trunc_ln368_fu_258_p1 = data_V_fu_254_p1[30:0];

assign zext_ln82_fu_228_p1 = add_ln82_fu_222_p2;

always @ (posedge ap_clk) begin
    zext_ln82_reg_299[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m1_1_address0,
        m1_1_ce0,
        m1_1_q0,
        m2_1_address0,
        m2_1_ce0,
        m2_1_we0,
        m2_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] m1_1_address0;
output   m1_1_ce0;
input  [31:0] m1_1_q0;
output  [5:0] m2_1_address0;
output   m2_1_ce0;
output   m2_1_we0;
output  [31:0] m2_1_d0;

reg ap_idle;
reg m1_1_ce0;
reg m2_1_ce0;
reg m2_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln80_fu_106_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln82_fu_170_p1;
reg   [63:0] zext_ln82_reg_241;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [2:0] j_fu_50;
wire   [2:0] add_ln81_fu_175_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_54;
wire   [3:0] select_ln80_2_fu_144_p3;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [5:0] indvar_flatten69_fu_58;
wire   [5:0] add_ln80_fu_112_p2;
reg   [5:0] ap_sig_allocacmp_indvar_flatten69_load;
wire   [0:0] icmp_ln81_fu_130_p2;
wire   [3:0] add_ln80_2_fu_124_p2;
wire   [2:0] select_ln80_fu_136_p3;
wire   [5:0] j_33_cast_fu_160_p1;
wire   [5:0] p_mid2_fu_152_p3;
wire   [5:0] add_ln82_fu_164_p2;
wire   [31:0] data_V_fu_196_p1;
wire   [30:0] trunc_ln368_fu_200_p1;
wire   [31:0] p_Result_s_fu_204_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln80_fu_106_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_54 <= select_ln80_2_fu_144_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_54 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln80_fu_106_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten69_fu_58 <= add_ln80_fu_112_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten69_fu_58 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln80_fu_106_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_50 <= add_ln81_fu_175_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_50 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_fu_106_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln82_reg_241[5 : 0] <= zext_ln82_fu_170_p1[5 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln80_fu_106_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_54;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten69_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten69_load = indvar_flatten69_fu_58;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m1_1_ce0 = 1'b1;
    end else begin
        m1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m2_1_ce0 = 1'b1;
    end else begin
        m2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m2_1_we0 = 1'b1;
    end else begin
        m2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln80_2_fu_124_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign add_ln80_fu_112_p2 = (ap_sig_allocacmp_indvar_flatten69_load + 6'd1);

assign add_ln81_fu_175_p2 = (select_ln80_fu_136_p3 + 3'd1);

assign add_ln82_fu_164_p2 = (j_33_cast_fu_160_p1 + p_mid2_fu_152_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign data_V_fu_196_p1 = m1_1_q0;

assign icmp_ln80_fu_106_p2 = ((ap_sig_allocacmp_indvar_flatten69_load == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_130_p2 = ((ap_sig_allocacmp_j_load == 3'd4) ? 1'b1 : 1'b0);

assign j_33_cast_fu_160_p1 = select_ln80_fu_136_p3;

assign m1_1_address0 = zext_ln82_fu_170_p1;

assign m2_1_address0 = zext_ln82_reg_241;

assign m2_1_d0 = p_Result_s_fu_204_p3;

assign p_Result_s_fu_204_p3 = {{1'd0}, {trunc_ln368_fu_200_p1}};

assign p_mid2_fu_152_p3 = {{select_ln80_2_fu_144_p3}, {2'd0}};

assign select_ln80_2_fu_144_p3 = ((icmp_ln81_fu_130_p2[0:0] == 1'b1) ? add_ln80_2_fu_124_p2 : ap_sig_allocacmp_i_load);

assign select_ln80_fu_136_p3 = ((icmp_ln81_fu_130_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_load);

assign trunc_ln368_fu_200_p1 = data_V_fu_196_p1[30:0];

assign zext_ln82_fu_170_p1 = add_ln82_fu_164_p2;

always @ (posedge ap_clk) begin
    zext_ln82_reg_241[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m1_1_address0,
        m1_1_ce0,
        m1_1_q0,
        m2_1_address0,
        m2_1_ce0,
        m2_1_we0,
        m2_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] m1_1_address0;
output   m1_1_ce0;
input  [31:0] m1_1_q0;
output  [5:0] m2_1_address0;
output   m2_1_ce0;
output   m2_1_we0;
output  [31:0] m2_1_d0;

reg ap_idle;
reg m1_1_ce0;
reg m2_1_ce0;
reg m2_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln80_fu_106_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln82_fu_170_p1;
reg   [63:0] zext_ln82_reg_241;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [2:0] j_fu_50;
wire   [2:0] add_ln81_fu_175_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_54;
wire   [3:0] select_ln80_1_fu_144_p3;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [5:0] indvar_flatten99_fu_58;
wire   [5:0] add_ln80_fu_112_p2;
reg   [5:0] ap_sig_allocacmp_indvar_flatten99_load;
wire   [0:0] icmp_ln81_fu_130_p2;
wire   [3:0] add_ln80_1_fu_124_p2;
wire   [2:0] select_ln80_fu_136_p3;
wire   [5:0] j_36_cast_fu_160_p1;
wire   [5:0] p_mid5_fu_152_p3;
wire   [5:0] add_ln82_fu_164_p2;
wire   [31:0] data_V_fu_196_p1;
wire   [30:0] trunc_ln368_fu_200_p1;
wire   [31:0] p_Result_s_fu_204_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln80_fu_106_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_54 <= select_ln80_1_fu_144_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_54 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln80_fu_106_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten99_fu_58 <= add_ln80_fu_112_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten99_fu_58 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln80_fu_106_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_50 <= add_ln81_fu_175_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_50 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_fu_106_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln82_reg_241[5 : 0] <= zext_ln82_fu_170_p1[5 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln80_fu_106_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_54;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten99_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten99_load = indvar_flatten99_fu_58;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m1_1_ce0 = 1'b1;
    end else begin
        m1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m2_1_ce0 = 1'b1;
    end else begin
        m2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m2_1_we0 = 1'b1;
    end else begin
        m2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln80_1_fu_124_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign add_ln80_fu_112_p2 = (ap_sig_allocacmp_indvar_flatten99_load + 6'd1);

assign add_ln81_fu_175_p2 = (select_ln80_fu_136_p3 + 3'd1);

assign add_ln82_fu_164_p2 = (j_36_cast_fu_160_p1 + p_mid5_fu_152_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign data_V_fu_196_p1 = m1_1_q0;

assign icmp_ln80_fu_106_p2 = ((ap_sig_allocacmp_indvar_flatten99_load == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_130_p2 = ((ap_sig_allocacmp_j_load == 3'd4) ? 1'b1 : 1'b0);

assign j_36_cast_fu_160_p1 = select_ln80_fu_136_p3;

assign m1_1_address0 = zext_ln82_fu_170_p1;

assign m2_1_address0 = zext_ln82_reg_241;

assign m2_1_d0 = p_Result_s_fu_204_p3;

assign p_Result_s_fu_204_p3 = {{1'd0}, {trunc_ln368_fu_200_p1}};

assign p_mid5_fu_152_p3 = {{select_ln80_1_fu_144_p3}, {2'd0}};

assign select_ln80_1_fu_144_p3 = ((icmp_ln81_fu_130_p2[0:0] == 1'b1) ? add_ln80_1_fu_124_p2 : ap_sig_allocacmp_i_load);

assign select_ln80_fu_136_p3 = ((icmp_ln81_fu_130_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_load);

assign trunc_ln368_fu_200_p1 = data_V_fu_196_p1[30:0];

assign zext_ln82_fu_170_p1 = add_ln82_fu_164_p2;

always @ (posedge ap_clk) begin
    zext_ln82_reg_241[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tiny_solve_Pipeline_VITIS_LOOP_100_125 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        znew_1_address0,
        znew_1_ce0,
        znew_1_q0,
        z_1_address0,
        z_1_ce0,
        z_1_we0,
        z_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] znew_1_address0;
output   znew_1_ce0;
input  [31:0] znew_1_q0;
output  [5:0] z_1_address0;
output   z_1_ce0;
output   z_1_we0;
output  [31:0] z_1_d0;

reg ap_idle;
reg znew_1_ce0;
reg z_1_ce0;
reg z_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln100_fu_69_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] i_52_cast_fu_81_p1;
reg   [63:0] i_52_cast_reg_101;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [5:0] i_fu_30;
wire   [5:0] add_ln100_fu_75_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_36;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln100_fu_69_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_30 <= add_ln100_fu_75_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_30 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_69_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_52_cast_reg_101[5 : 0] <= i_52_cast_fu_81_p1[5 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln100_fu_69_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_36 = 6'd0;
    end else begin
        ap_sig_allocacmp_i_36 = i_fu_30;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_1_ce0 = 1'b1;
    end else begin
        z_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_1_we0 = 1'b1;
    end else begin
        z_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        znew_1_ce0 = 1'b1;
    end else begin
        znew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_75_p2 = (ap_sig_allocacmp_i_36 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_52_cast_fu_81_p1 = ap_sig_allocacmp_i_36;

assign icmp_ln100_fu_69_p2 = ((ap_sig_allocacmp_i_36 == 6'd36) ? 1'b1 : 1'b0);

assign z_1_address0 = i_52_cast_reg_101;

assign z_1_d0 = znew_1_q0;

assign znew_1_address0 = i_52_cast_fu_81_p1;

always @ (posedge ap_clk) begin
    i_52_cast_reg_101[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_tiny_solve_Pipeline_VITIS_LOOP_100_125
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_address0,
        x_1_ce0,
        x_1_q0,
        vnew_1_address0,
        vnew_1_ce0,
        vnew_1_q0,
        s1_1_address0,
        s1_1_ce0,
        s1_1_we0,
        s1_1_d0,
        grp_fu_2073_p_din0,
        grp_fu_2073_p_din1,
        grp_fu_2073_p_opcode,
        grp_fu_2073_p_dout0,
        grp_fu_2073_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] x_1_address0;
output   x_1_ce0;
input  [31:0] x_1_q0;
output  [6:0] vnew_1_address0;
output   vnew_1_ce0;
input  [31:0] vnew_1_q0;
output  [6:0] s1_1_address0;
output   s1_1_ce0;
output   s1_1_we0;
output  [31:0] s1_1_d0;
output  [31:0] grp_fu_2073_p_din0;
output  [31:0] grp_fu_2073_p_din1;
output  [0:0] grp_fu_2073_p_opcode;
input  [31:0] grp_fu_2073_p_dout0;
output   grp_fu_2073_p_ce;

reg ap_idle;
reg x_1_ce0;
reg vnew_1_ce0;
reg s1_1_ce0;
reg s1_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln167_fu_155_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln169_fu_246_p1;
reg   [63:0] zext_ln169_reg_298;
reg   [63:0] zext_ln169_reg_298_pp0_iter1_reg;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_46;
wire   [3:0] add_ln168_fu_252_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_50;
wire   [3:0] select_ln167_9_fu_228_p3;
reg   [3:0] ap_sig_allocacmp_i_35;
reg   [6:0] indvar_flatten_fu_54;
wire   [6:0] add_ln167_5_fu_161_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [2:0] empty_fu_125_p1;
wire   [5:0] p_shl5_fu_137_p3;
wire   [6:0] p_shl4_fu_129_p3;
wire   [6:0] p_shl5_cast_fu_145_p1;
wire   [0:0] icmp_ln168_fu_176_p2;
wire   [3:0] add_ln167_fu_170_p2;
wire   [2:0] empty_105_fu_190_p1;
wire   [5:0] p_shl5_mid1_fu_202_p3;
wire   [6:0] p_shl4_mid1_fu_194_p3;
wire   [6:0] p_shl5_cast_mid1_fu_210_p1;
wire   [6:0] p_mid1_fu_214_p2;
wire   [6:0] empty_103_fu_149_p2;
wire   [3:0] select_ln167_fu_182_p3;
wire   [6:0] j_25_cast_fu_236_p1;
wire   [6:0] select_ln167_8_fu_220_p3;
wire   [6:0] add_ln169_fu_240_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_50 <= select_ln167_9_fu_228_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_54 <= add_ln167_5_fu_161_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_54 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_46 <= add_ln168_fu_252_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_46 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        zext_ln169_reg_298_pp0_iter1_reg[6 : 0] <= zext_ln169_reg_298[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_fu_155_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln169_reg_298[6 : 0] <= zext_ln169_fu_246_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln167_fu_155_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_35 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_35 = i_fu_50;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_54;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s1_1_ce0 = 1'b1;
    end else begin
        s1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s1_1_we0 = 1'b1;
    end else begin
        s1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vnew_1_ce0 = 1'b1;
    end else begin
        vnew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_1_ce0 = 1'b1;
    end else begin
        x_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln167_5_fu_161_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln167_fu_170_p2 = (ap_sig_allocacmp_i_35 + 4'd1);

assign add_ln168_fu_252_p2 = (select_ln167_fu_182_p3 + 4'd1);

assign add_ln169_fu_240_p2 = (j_25_cast_fu_236_p1 + select_ln167_8_fu_220_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_103_fu_149_p2 = (p_shl4_fu_129_p3 - p_shl5_cast_fu_145_p1);

assign empty_105_fu_190_p1 = add_ln167_fu_170_p2[2:0];

assign empty_fu_125_p1 = ap_sig_allocacmp_i_35[2:0];

assign grp_fu_2073_p_ce = 1'b1;

assign grp_fu_2073_p_din0 = x_1_q0;

assign grp_fu_2073_p_din1 = vnew_1_q0;

assign grp_fu_2073_p_opcode = 2'd1;

assign icmp_ln167_fu_155_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln168_fu_176_p2 = ((ap_sig_allocacmp_j_load == 4'd12) ? 1'b1 : 1'b0);

assign j_25_cast_fu_236_p1 = select_ln167_fu_182_p3;

assign p_mid1_fu_214_p2 = (p_shl4_mid1_fu_194_p3 - p_shl5_cast_mid1_fu_210_p1);

assign p_shl4_fu_129_p3 = {{empty_fu_125_p1}, {4'd0}};

assign p_shl4_mid1_fu_194_p3 = {{empty_105_fu_190_p1}, {4'd0}};

assign p_shl5_cast_fu_145_p1 = p_shl5_fu_137_p3;

assign p_shl5_cast_mid1_fu_210_p1 = p_shl5_mid1_fu_202_p3;

assign p_shl5_fu_137_p3 = {{ap_sig_allocacmp_i_35}, {2'd0}};

assign p_shl5_mid1_fu_202_p3 = {{add_ln167_fu_170_p2}, {2'd0}};

assign s1_1_address0 = zext_ln169_reg_298_pp0_iter1_reg;

assign s1_1_d0 = grp_fu_2073_p_dout0;

assign select_ln167_8_fu_220_p3 = ((icmp_ln168_fu_176_p2[0:0] == 1'b1) ? p_mid1_fu_214_p2 : empty_103_fu_149_p2);

assign select_ln167_9_fu_228_p3 = ((icmp_ln168_fu_176_p2[0:0] == 1'b1) ? add_ln167_fu_170_p2 : ap_sig_allocacmp_i_35);

assign select_ln167_fu_182_p3 = ((icmp_ln168_fu_176_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign vnew_1_address0 = zext_ln169_fu_246_p1;

assign x_1_address0 = zext_ln169_fu_246_p1;

assign zext_ln169_fu_246_p1 = add_ln169_fu_240_p2;

always @ (posedge ap_clk) begin
    zext_ln169_reg_298[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln169_reg_298_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v_1_address0,
        v_1_ce0,
        v_1_q0,
        vnew_1_address0,
        vnew_1_ce0,
        vnew_1_q0,
        s1_1_address0,
        s1_1_ce0,
        s1_1_we0,
        s1_1_d0,
        grp_fu_743_p_din0,
        grp_fu_743_p_din1,
        grp_fu_743_p_opcode,
        grp_fu_743_p_dout0,
        grp_fu_743_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] v_1_address0;
output   v_1_ce0;
input  [31:0] v_1_q0;
output  [6:0] vnew_1_address0;
output   vnew_1_ce0;
input  [31:0] vnew_1_q0;
output  [6:0] s1_1_address0;
output   s1_1_ce0;
output   s1_1_we0;
output  [31:0] s1_1_d0;
output  [31:0] grp_fu_743_p_din0;
output  [31:0] grp_fu_743_p_din1;
output  [0:0] grp_fu_743_p_opcode;
input  [31:0] grp_fu_743_p_dout0;
output   grp_fu_743_p_ce;

reg ap_idle;
reg v_1_ce0;
reg vnew_1_ce0;
reg s1_1_ce0;
reg s1_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln167_fu_155_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln169_fu_246_p1;
reg   [63:0] zext_ln169_reg_298;
reg   [63:0] zext_ln169_reg_298_pp0_iter1_reg;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_46;
wire   [3:0] add_ln168_fu_252_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_50;
wire   [3:0] select_ln167_8_fu_228_p3;
reg   [3:0] ap_sig_allocacmp_i_34;
reg   [6:0] indvar_flatten29_fu_54;
wire   [6:0] add_ln167_fu_161_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten29_load;
wire   [2:0] empty_fu_125_p1;
wire   [5:0] p_shl3_fu_137_p3;
wire   [6:0] p_shl_fu_129_p3;
wire   [6:0] p_shl11_cast_fu_145_p1;
wire   [0:0] icmp_ln168_fu_176_p2;
wire   [3:0] add_ln167_4_fu_170_p2;
wire   [2:0] empty_102_fu_190_p1;
wire   [5:0] p_shl11_mid1_fu_202_p3;
wire   [6:0] p_shl10_mid1_fu_194_p3;
wire   [6:0] p_shl11_cast_mid1_fu_210_p1;
wire   [6:0] p_mid127_fu_214_p2;
wire   [6:0] empty_100_fu_149_p2;
wire   [3:0] select_ln167_fu_182_p3;
wire   [6:0] j_29_cast_fu_236_p1;
wire   [6:0] select_ln167_7_fu_220_p3;
wire   [6:0] add_ln169_fu_240_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_50 <= select_ln167_8_fu_228_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten29_fu_54 <= add_ln167_fu_161_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten29_fu_54 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_46 <= add_ln168_fu_252_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_46 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        zext_ln169_reg_298_pp0_iter1_reg[6 : 0] <= zext_ln169_reg_298[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_fu_155_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln169_reg_298[6 : 0] <= zext_ln169_fu_246_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln167_fu_155_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_34 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_34 = i_fu_50;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten29_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten29_load = indvar_flatten29_fu_54;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s1_1_ce0 = 1'b1;
    end else begin
        s1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s1_1_we0 = 1'b1;
    end else begin
        s1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_1_ce0 = 1'b1;
    end else begin
        v_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vnew_1_ce0 = 1'b1;
    end else begin
        vnew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln167_4_fu_170_p2 = (ap_sig_allocacmp_i_34 + 4'd1);

assign add_ln167_fu_161_p2 = (ap_sig_allocacmp_indvar_flatten29_load + 7'd1);

assign add_ln168_fu_252_p2 = (select_ln167_fu_182_p3 + 4'd1);

assign add_ln169_fu_240_p2 = (j_29_cast_fu_236_p1 + select_ln167_7_fu_220_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_100_fu_149_p2 = (p_shl_fu_129_p3 - p_shl11_cast_fu_145_p1);

assign empty_102_fu_190_p1 = add_ln167_4_fu_170_p2[2:0];

assign empty_fu_125_p1 = ap_sig_allocacmp_i_34[2:0];

assign grp_fu_743_p_ce = 1'b1;

assign grp_fu_743_p_din0 = v_1_q0;

assign grp_fu_743_p_din1 = vnew_1_q0;

assign grp_fu_743_p_opcode = 2'd1;

assign icmp_ln167_fu_155_p2 = ((ap_sig_allocacmp_indvar_flatten29_load == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln168_fu_176_p2 = ((ap_sig_allocacmp_j_load == 4'd12) ? 1'b1 : 1'b0);

assign j_29_cast_fu_236_p1 = select_ln167_fu_182_p3;

assign p_mid127_fu_214_p2 = (p_shl10_mid1_fu_194_p3 - p_shl11_cast_mid1_fu_210_p1);

assign p_shl10_mid1_fu_194_p3 = {{empty_102_fu_190_p1}, {4'd0}};

assign p_shl11_cast_fu_145_p1 = p_shl3_fu_137_p3;

assign p_shl11_cast_mid1_fu_210_p1 = p_shl11_mid1_fu_202_p3;

assign p_shl11_mid1_fu_202_p3 = {{add_ln167_4_fu_170_p2}, {2'd0}};

assign p_shl3_fu_137_p3 = {{ap_sig_allocacmp_i_34}, {2'd0}};

assign p_shl_fu_129_p3 = {{empty_fu_125_p1}, {4'd0}};

assign s1_1_address0 = zext_ln169_reg_298_pp0_iter1_reg;

assign s1_1_d0 = grp_fu_743_p_dout0;

assign select_ln167_7_fu_220_p3 = ((icmp_ln168_fu_176_p2[0:0] == 1'b1) ? p_mid127_fu_214_p2 : empty_100_fu_149_p2);

assign select_ln167_8_fu_228_p3 = ((icmp_ln168_fu_176_p2[0:0] == 1'b1) ? add_ln167_4_fu_170_p2 : ap_sig_allocacmp_i_34);

assign select_ln167_fu_182_p3 = ((icmp_ln168_fu_176_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign v_1_address0 = zext_ln169_fu_246_p1;

assign vnew_1_address0 = zext_ln169_fu_246_p1;

assign zext_ln169_fu_246_p1 = add_ln169_fu_240_p2;

always @ (posedge ap_clk) begin
    zext_ln169_reg_298[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln169_reg_298_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        u_1_address0,
        u_1_ce0,
        u_1_q0,
        znew_1_address0,
        znew_1_ce0,
        znew_1_q0,
        m1_1_address0,
        m1_1_ce0,
        m1_1_we0,
        m1_1_d0,
        grp_fu_743_p_din0,
        grp_fu_743_p_din1,
        grp_fu_743_p_opcode,
        grp_fu_743_p_dout0,
        grp_fu_743_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] u_1_address0;
output   u_1_ce0;
input  [31:0] u_1_q0;
output  [5:0] znew_1_address0;
output   znew_1_ce0;
input  [31:0] znew_1_q0;
output  [5:0] m1_1_address0;
output   m1_1_ce0;
output   m1_1_we0;
output  [31:0] m1_1_d0;
output  [31:0] grp_fu_743_p_din0;
output  [31:0] grp_fu_743_p_din1;
output  [0:0] grp_fu_743_p_opcode;
input  [31:0] grp_fu_743_p_dout0;
output   grp_fu_743_p_ce;

reg ap_idle;
reg u_1_ce0;
reg znew_1_ce0;
reg m1_1_ce0;
reg m1_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln167_fu_124_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln169_fu_188_p1;
reg   [63:0] zext_ln169_reg_240;
reg   [63:0] zext_ln169_reg_240_pp0_iter1_reg;
wire    ap_block_pp0_stage0;
reg   [2:0] j_fu_48;
wire   [2:0] add_ln168_fu_194_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_52;
wire   [3:0] select_ln167_6_fu_162_p3;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [5:0] indvar_flatten59_fu_56;
wire   [5:0] add_ln167_fu_130_p2;
reg   [5:0] ap_sig_allocacmp_indvar_flatten59_load;
wire   [0:0] icmp_ln168_fu_148_p2;
wire   [3:0] add_ln167_4_fu_142_p2;
wire   [2:0] select_ln167_fu_154_p3;
wire   [5:0] j_32_cast_fu_178_p1;
wire   [5:0] p_mid_fu_170_p3;
wire   [5:0] add_ln169_fu_182_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_124_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_52 <= select_ln167_6_fu_162_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_124_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten59_fu_56 <= add_ln167_fu_130_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten59_fu_56 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_124_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_48 <= add_ln168_fu_194_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_48 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        zext_ln169_reg_240_pp0_iter1_reg[5 : 0] <= zext_ln169_reg_240[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_fu_124_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln169_reg_240[5 : 0] <= zext_ln169_fu_188_p1[5 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln167_fu_124_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_52;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten59_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten59_load = indvar_flatten59_fu_56;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m1_1_ce0 = 1'b1;
    end else begin
        m1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m1_1_we0 = 1'b1;
    end else begin
        m1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u_1_ce0 = 1'b1;
    end else begin
        u_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        znew_1_ce0 = 1'b1;
    end else begin
        znew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln167_4_fu_142_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign add_ln167_fu_130_p2 = (ap_sig_allocacmp_indvar_flatten59_load + 6'd1);

assign add_ln168_fu_194_p2 = (select_ln167_fu_154_p3 + 3'd1);

assign add_ln169_fu_182_p2 = (j_32_cast_fu_178_p1 + p_mid_fu_170_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_743_p_ce = 1'b1;

assign grp_fu_743_p_din0 = u_1_q0;

assign grp_fu_743_p_din1 = znew_1_q0;

assign grp_fu_743_p_opcode = 2'd1;

assign icmp_ln167_fu_124_p2 = ((ap_sig_allocacmp_indvar_flatten59_load == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln168_fu_148_p2 = ((ap_sig_allocacmp_j_load == 3'd4) ? 1'b1 : 1'b0);

assign j_32_cast_fu_178_p1 = select_ln167_fu_154_p3;

assign m1_1_address0 = zext_ln169_reg_240_pp0_iter1_reg;

assign m1_1_d0 = grp_fu_743_p_dout0;

assign p_mid_fu_170_p3 = {{select_ln167_6_fu_162_p3}, {2'd0}};

assign select_ln167_6_fu_162_p3 = ((icmp_ln168_fu_148_p2[0:0] == 1'b1) ? add_ln167_4_fu_142_p2 : ap_sig_allocacmp_i_load);

assign select_ln167_fu_154_p3 = ((icmp_ln168_fu_148_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_load);

assign u_1_address0 = zext_ln169_fu_188_p1;

assign zext_ln169_fu_188_p1 = add_ln169_fu_182_p2;

assign znew_1_address0 = zext_ln169_fu_188_p1;

always @ (posedge ap_clk) begin
    zext_ln169_reg_240[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln169_reg_240_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        z_1_address0,
        z_1_ce0,
        z_1_q0,
        znew_1_address0,
        znew_1_ce0,
        znew_1_q0,
        m1_1_address0,
        m1_1_ce0,
        m1_1_we0,
        m1_1_d0,
        grp_fu_2073_p_din0,
        grp_fu_2073_p_din1,
        grp_fu_2073_p_opcode,
        grp_fu_2073_p_dout0,
        grp_fu_2073_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] z_1_address0;
output   z_1_ce0;
input  [31:0] z_1_q0;
output  [5:0] znew_1_address0;
output   znew_1_ce0;
input  [31:0] znew_1_q0;
output  [5:0] m1_1_address0;
output   m1_1_ce0;
output   m1_1_we0;
output  [31:0] m1_1_d0;
output  [31:0] grp_fu_2073_p_din0;
output  [31:0] grp_fu_2073_p_din1;
output  [0:0] grp_fu_2073_p_opcode;
input  [31:0] grp_fu_2073_p_dout0;
output   grp_fu_2073_p_ce;

reg ap_idle;
reg z_1_ce0;
reg znew_1_ce0;
reg m1_1_ce0;
reg m1_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln167_fu_124_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln169_fu_188_p1;
reg   [63:0] zext_ln169_reg_240;
reg   [63:0] zext_ln169_reg_240_pp0_iter1_reg;
wire    ap_block_pp0_stage0;
reg   [2:0] j_fu_48;
wire   [2:0] add_ln168_fu_194_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_52;
wire   [3:0] select_ln167_5_fu_162_p3;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [5:0] indvar_flatten89_fu_56;
wire   [5:0] add_ln167_fu_130_p2;
reg   [5:0] ap_sig_allocacmp_indvar_flatten89_load;
wire   [0:0] icmp_ln168_fu_148_p2;
wire   [3:0] add_ln167_3_fu_142_p2;
wire   [2:0] select_ln167_fu_154_p3;
wire   [5:0] j_35_cast_fu_178_p1;
wire   [5:0] p_mid4_fu_170_p3;
wire   [5:0] add_ln169_fu_182_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_124_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_52 <= select_ln167_5_fu_162_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_124_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten89_fu_56 <= add_ln167_fu_130_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten89_fu_56 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_124_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_48 <= add_ln168_fu_194_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_48 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        zext_ln169_reg_240_pp0_iter1_reg[5 : 0] <= zext_ln169_reg_240[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_fu_124_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln169_reg_240[5 : 0] <= zext_ln169_fu_188_p1[5 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln167_fu_124_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_52;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten89_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten89_load = indvar_flatten89_fu_56;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m1_1_ce0 = 1'b1;
    end else begin
        m1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m1_1_we0 = 1'b1;
    end else begin
        m1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_1_ce0 = 1'b1;
    end else begin
        z_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        znew_1_ce0 = 1'b1;
    end else begin
        znew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln167_3_fu_142_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign add_ln167_fu_130_p2 = (ap_sig_allocacmp_indvar_flatten89_load + 6'd1);

assign add_ln168_fu_194_p2 = (select_ln167_fu_154_p3 + 3'd1);

assign add_ln169_fu_182_p2 = (j_35_cast_fu_178_p1 + p_mid4_fu_170_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_2073_p_ce = 1'b1;

assign grp_fu_2073_p_din0 = z_1_q0;

assign grp_fu_2073_p_din1 = znew_1_q0;

assign grp_fu_2073_p_opcode = 2'd1;

assign icmp_ln167_fu_124_p2 = ((ap_sig_allocacmp_indvar_flatten89_load == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln168_fu_148_p2 = ((ap_sig_allocacmp_j_load == 3'd4) ? 1'b1 : 1'b0);

assign j_35_cast_fu_178_p1 = select_ln167_fu_154_p3;

assign m1_1_address0 = zext_ln169_reg_240_pp0_iter1_reg;

assign m1_1_d0 = grp_fu_2073_p_dout0;

assign p_mid4_fu_170_p3 = {{select_ln167_5_fu_162_p3}, {2'd0}};

assign select_ln167_5_fu_162_p3 = ((icmp_ln168_fu_148_p2[0:0] == 1'b1) ? add_ln167_3_fu_142_p2 : ap_sig_allocacmp_i_load);

assign select_ln167_fu_154_p3 = ((icmp_ln168_fu_148_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_load);

assign z_1_address0 = zext_ln169_fu_188_p1;

assign zext_ln169_fu_188_p1 = add_ln169_fu_182_p2;

assign znew_1_address0 = zext_ln169_fu_188_p1;

always @ (posedge ap_clk) begin
    zext_ln169_reg_240[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln169_reg_240_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_tiny_solve_q_1_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0, address1, ce1, d1, we1, q1,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 7;
parameter AddressRange = 120;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1;
output reg[DataWidth-1:0] q1;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_tiny_solve_q_1_RAM_AUTO_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
        q1 <= ram[address1];
    end
end


endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_tiny_solve_r_1_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0, address1, ce1, q1,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 6;
parameter AddressRange = 36;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_tiny_solve_r_1_RAM_AUTO_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        q1 <= ram[address1];
    end
end


endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_tiny_solve_s1_1_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 7;
parameter AddressRange = 120;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_tiny_solve_s1_1_RAM_AUTO_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_tiny_solve_tiny_x1_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 4;
parameter AddressRange = 12;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_tiny_solve_tiny_x1_RAM_AUTO_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_tiny_solve_y_1_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 6;
parameter AddressRange = 36;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_tiny_solve_y_1_RAM_AUTO_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tiny_solve (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tiny_iter_i,
        tiny_iter_o,
        tiny_iter_o_ap_vld,
        Kinf_1_address0,
        Kinf_1_ce0,
        Kinf_1_q0,
        x_1_address0,
        x_1_ce0,
        x_1_we0,
        x_1_d0,
        x_1_q0,
        x_1_address1,
        x_1_ce1,
        x_1_q1,
        u_1_address0,
        u_1_ce0,
        u_1_we0,
        u_1_d0,
        u_1_q0,
        u_1_address1,
        u_1_ce1,
        u_1_q1,
        Adyn_1_address0,
        Adyn_1_ce0,
        Adyn_1_q0,
        Adyn_1_address1,
        Adyn_1_ce1,
        Adyn_1_q1,
        Bdyn_1_address0,
        Bdyn_1_ce0,
        Bdyn_1_q0,
        Bdyn_1_address1,
        Bdyn_1_ce1,
        Bdyn_1_q1,
        tiny_en_input_bound,
        u_min_1_address0,
        u_min_1_ce0,
        u_min_1_q0,
        u_max_1_address0,
        u_max_1_ce0,
        u_max_1_q0,
        tiny_en_state_bound,
        x_min_1_address0,
        x_min_1_ce0,
        x_min_1_q0,
        x_max_1_address0,
        x_max_1_ce0,
        x_max_1_q0,
        tiny_rho,
        Xref_1_address0,
        Xref_1_ce0,
        Xref_1_q0,
        Xref_1_address1,
        Xref_1_ce1,
        Xref_1_q1,
        PinfT_1_address0,
        PinfT_1_ce0,
        PinfT_1_q0,
        PinfT_1_address1,
        PinfT_1_ce1,
        PinfT_1_q1,
        tiny_Q_address0,
        tiny_Q_ce0,
        tiny_Q_q0,
        tiny_max_iter,
        BdynT_1_address0,
        BdynT_1_ce0,
        BdynT_1_q0,
        BdynT_1_address1,
        BdynT_1_ce1,
        BdynT_1_q1,
        Quu_inv_1_address0,
        Quu_inv_1_ce0,
        Quu_inv_1_q0,
        Quu_inv_1_address1,
        Quu_inv_1_ce1,
        Quu_inv_1_q1,
        AmBKt_1_address0,
        AmBKt_1_ce0,
        AmBKt_1_q0,
        AmBKt_1_address1,
        AmBKt_1_ce1,
        AmBKt_1_q1,
        KinfT_1_address0,
        KinfT_1_ce0,
        KinfT_1_q0,
        KinfT_1_address1,
        KinfT_1_ce1,
        KinfT_1_q1,
        tiny_check_termination,
        tiny_abs_pri_tol,
        tiny_abs_dua_tol
);

parameter    ap_ST_fsm_state1 = 80'd1;
parameter    ap_ST_fsm_state2 = 80'd2;
parameter    ap_ST_fsm_state3 = 80'd4;
parameter    ap_ST_fsm_state4 = 80'd8;
parameter    ap_ST_fsm_state5 = 80'd16;
parameter    ap_ST_fsm_state6 = 80'd32;
parameter    ap_ST_fsm_state7 = 80'd64;
parameter    ap_ST_fsm_state8 = 80'd128;
parameter    ap_ST_fsm_state9 = 80'd256;
parameter    ap_ST_fsm_state10 = 80'd512;
parameter    ap_ST_fsm_state11 = 80'd1024;
parameter    ap_ST_fsm_state12 = 80'd2048;
parameter    ap_ST_fsm_state13 = 80'd4096;
parameter    ap_ST_fsm_state14 = 80'd8192;
parameter    ap_ST_fsm_state15 = 80'd16384;
parameter    ap_ST_fsm_state16 = 80'd32768;
parameter    ap_ST_fsm_state17 = 80'd65536;
parameter    ap_ST_fsm_state18 = 80'd131072;
parameter    ap_ST_fsm_state19 = 80'd262144;
parameter    ap_ST_fsm_state20 = 80'd524288;
parameter    ap_ST_fsm_state21 = 80'd1048576;
parameter    ap_ST_fsm_state22 = 80'd2097152;
parameter    ap_ST_fsm_state23 = 80'd4194304;
parameter    ap_ST_fsm_state24 = 80'd8388608;
parameter    ap_ST_fsm_state25 = 80'd16777216;
parameter    ap_ST_fsm_state26 = 80'd33554432;
parameter    ap_ST_fsm_state27 = 80'd67108864;
parameter    ap_ST_fsm_state28 = 80'd134217728;
parameter    ap_ST_fsm_state29 = 80'd268435456;
parameter    ap_ST_fsm_state30 = 80'd536870912;
parameter    ap_ST_fsm_state31 = 80'd1073741824;
parameter    ap_ST_fsm_state32 = 80'd2147483648;
parameter    ap_ST_fsm_state33 = 80'd4294967296;
parameter    ap_ST_fsm_state34 = 80'd8589934592;
parameter    ap_ST_fsm_state35 = 80'd17179869184;
parameter    ap_ST_fsm_state36 = 80'd34359738368;
parameter    ap_ST_fsm_state37 = 80'd68719476736;
parameter    ap_ST_fsm_state38 = 80'd137438953472;
parameter    ap_ST_fsm_state39 = 80'd274877906944;
parameter    ap_ST_fsm_state40 = 80'd549755813888;
parameter    ap_ST_fsm_state41 = 80'd1099511627776;
parameter    ap_ST_fsm_state42 = 80'd2199023255552;
parameter    ap_ST_fsm_state43 = 80'd4398046511104;
parameter    ap_ST_fsm_state44 = 80'd8796093022208;
parameter    ap_ST_fsm_state45 = 80'd17592186044416;
parameter    ap_ST_fsm_state46 = 80'd35184372088832;
parameter    ap_ST_fsm_state47 = 80'd70368744177664;
parameter    ap_ST_fsm_state48 = 80'd140737488355328;
parameter    ap_ST_fsm_state49 = 80'd281474976710656;
parameter    ap_ST_fsm_state50 = 80'd562949953421312;
parameter    ap_ST_fsm_state51 = 80'd1125899906842624;
parameter    ap_ST_fsm_state52 = 80'd2251799813685248;
parameter    ap_ST_fsm_state53 = 80'd4503599627370496;
parameter    ap_ST_fsm_state54 = 80'd9007199254740992;
parameter    ap_ST_fsm_state55 = 80'd18014398509481984;
parameter    ap_ST_fsm_state56 = 80'd36028797018963968;
parameter    ap_ST_fsm_state57 = 80'd72057594037927936;
parameter    ap_ST_fsm_state58 = 80'd144115188075855872;
parameter    ap_ST_fsm_state59 = 80'd288230376151711744;
parameter    ap_ST_fsm_state60 = 80'd576460752303423488;
parameter    ap_ST_fsm_state61 = 80'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 80'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 80'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 80'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 80'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 80'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 80'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 80'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 80'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 80'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 80'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 80'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 80'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 80'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 80'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 80'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 80'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 80'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 80'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 80'd604462909807314587353088;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] tiny_iter_i;
output  [31:0] tiny_iter_o;
output   tiny_iter_o_ap_vld;
output  [5:0] Kinf_1_address0;
output   Kinf_1_ce0;
input  [31:0] Kinf_1_q0;
output  [6:0] x_1_address0;
output   x_1_ce0;
output   x_1_we0;
output  [31:0] x_1_d0;
input  [31:0] x_1_q0;
output  [6:0] x_1_address1;
output   x_1_ce1;
input  [31:0] x_1_q1;
output  [5:0] u_1_address0;
output   u_1_ce0;
output   u_1_we0;
output  [31:0] u_1_d0;
input  [31:0] u_1_q0;
output  [5:0] u_1_address1;
output   u_1_ce1;
input  [31:0] u_1_q1;
output  [7:0] Adyn_1_address0;
output   Adyn_1_ce0;
input  [31:0] Adyn_1_q0;
output  [7:0] Adyn_1_address1;
output   Adyn_1_ce1;
input  [31:0] Adyn_1_q1;
output  [5:0] Bdyn_1_address0;
output   Bdyn_1_ce0;
input  [31:0] Bdyn_1_q0;
output  [5:0] Bdyn_1_address1;
output   Bdyn_1_ce1;
input  [31:0] Bdyn_1_q1;
input  [0:0] tiny_en_input_bound;
output  [5:0] u_min_1_address0;
output   u_min_1_ce0;
input  [31:0] u_min_1_q0;
output  [5:0] u_max_1_address0;
output   u_max_1_ce0;
input  [31:0] u_max_1_q0;
input  [0:0] tiny_en_state_bound;
output  [6:0] x_min_1_address0;
output   x_min_1_ce0;
input  [31:0] x_min_1_q0;
output  [6:0] x_max_1_address0;
output   x_max_1_ce0;
input  [31:0] x_max_1_q0;
input  [31:0] tiny_rho;
output  [6:0] Xref_1_address0;
output   Xref_1_ce0;
input  [31:0] Xref_1_q0;
output  [6:0] Xref_1_address1;
output   Xref_1_ce1;
input  [31:0] Xref_1_q1;
output  [7:0] PinfT_1_address0;
output   PinfT_1_ce0;
input  [31:0] PinfT_1_q0;
output  [7:0] PinfT_1_address1;
output   PinfT_1_ce1;
input  [31:0] PinfT_1_q1;
output  [3:0] tiny_Q_address0;
output   tiny_Q_ce0;
input  [31:0] tiny_Q_q0;
input  [5:0] tiny_max_iter;
output  [5:0] BdynT_1_address0;
output   BdynT_1_ce0;
input  [31:0] BdynT_1_q0;
output  [5:0] BdynT_1_address1;
output   BdynT_1_ce1;
input  [31:0] BdynT_1_q1;
output  [3:0] Quu_inv_1_address0;
output   Quu_inv_1_ce0;
input  [31:0] Quu_inv_1_q0;
output  [3:0] Quu_inv_1_address1;
output   Quu_inv_1_ce1;
input  [31:0] Quu_inv_1_q1;
output  [7:0] AmBKt_1_address0;
output   AmBKt_1_ce0;
input  [31:0] AmBKt_1_q0;
output  [7:0] AmBKt_1_address1;
output   AmBKt_1_ce1;
input  [31:0] AmBKt_1_q1;
output  [5:0] KinfT_1_address0;
output   KinfT_1_ce0;
input  [31:0] KinfT_1_q0;
output  [5:0] KinfT_1_address1;
output   KinfT_1_ce1;
input  [31:0] KinfT_1_q1;
input  [0:0] tiny_check_termination;
input  [31:0] tiny_abs_pri_tol;
input  [31:0] tiny_abs_dua_tol;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] tiny_iter_o;
reg tiny_iter_o_ap_vld;
reg[5:0] Kinf_1_address0;
reg Kinf_1_ce0;
reg[6:0] x_1_address0;
reg x_1_ce0;
reg x_1_we0;
reg x_1_ce1;
reg[5:0] u_1_address0;
reg u_1_ce0;
reg u_1_we0;
reg[31:0] u_1_d0;
reg u_1_ce1;
reg Adyn_1_ce0;
reg Adyn_1_ce1;
reg Bdyn_1_ce0;
reg Bdyn_1_ce1;
reg u_min_1_ce0;
reg u_max_1_ce0;
reg x_min_1_ce0;
reg x_max_1_ce0;
reg Xref_1_ce0;
reg Xref_1_ce1;
reg PinfT_1_ce0;
reg PinfT_1_ce1;
reg tiny_Q_ce0;

(* fsm_encoding = "none" *) reg   [79:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] u1_0;
reg   [31:0] u1_1;
reg   [31:0] u1_2;
reg   [31:0] u1_3;
reg   [31:0] u2_0;
reg   [31:0] u2_1;
reg   [31:0] u2_2;
reg   [31:0] u2_3;
reg   [5:0] d_1_address0;
reg    d_1_ce0;
reg    d_1_we0;
wire   [31:0] d_1_q0;
reg    d_1_ce1;
reg    d_1_we1;
wire   [31:0] d_1_q1;
reg   [3:0] tiny_x1_address0;
reg    tiny_x1_ce0;
reg    tiny_x1_we0;
reg   [31:0] tiny_x1_d0;
wire   [31:0] tiny_x1_q0;
reg   [3:0] tiny_x2_address0;
reg    tiny_x2_ce0;
reg    tiny_x2_we0;
reg   [31:0] tiny_x2_d0;
wire   [31:0] tiny_x2_q0;
reg   [5:0] y_1_address0;
reg    y_1_ce0;
reg    y_1_we0;
wire   [31:0] y_1_q0;
reg   [5:0] znew_1_address0;
reg    znew_1_ce0;
reg    znew_1_we0;
wire   [31:0] znew_1_q0;
reg   [5:0] m1_1_address0;
reg    m1_1_ce0;
reg    m1_1_we0;
reg   [31:0] m1_1_d0;
wire   [31:0] m1_1_q0;
reg   [6:0] g_1_address0;
reg    g_1_ce0;
reg    g_1_we0;
wire   [31:0] g_1_q0;
reg    g_1_ce1;
wire   [31:0] g_1_q1;
reg   [6:0] vnew_1_address0;
reg    vnew_1_ce0;
reg    vnew_1_we0;
wire   [31:0] vnew_1_q0;
reg    vnew_1_ce1;
wire   [31:0] vnew_1_q1;
reg   [6:0] s1_1_address0;
reg    s1_1_ce0;
reg    s1_1_we0;
reg   [31:0] s1_1_d0;
wire   [31:0] s1_1_q0;
reg   [5:0] r_1_address0;
reg    r_1_ce0;
reg    r_1_we0;
wire   [31:0] r_1_q0;
reg   [5:0] r_1_address1;
reg    r_1_ce1;
wire   [31:0] r_1_q1;
reg   [6:0] s2_1_address0;
reg    s2_1_ce0;
reg    s2_1_we0;
reg   [31:0] s2_1_d0;
wire   [31:0] s2_1_q0;
reg   [6:0] q_1_address0;
reg    q_1_ce0;
reg    q_1_we0;
wire   [31:0] q_1_q0;
reg   [6:0] q_1_address1;
reg    q_1_ce1;
reg    q_1_we1;
wire   [31:0] q_1_q1;
reg   [6:0] p_1_address0;
reg    p_1_ce0;
reg    p_1_we0;
reg   [31:0] p_1_d0;
wire   [31:0] p_1_q0;
reg   [6:0] p_1_address1;
reg    p_1_ce1;
reg    p_1_we1;
wire   [31:0] p_1_q1;
reg   [3:0] tiny_x3_address0;
reg    tiny_x3_ce0;
reg    tiny_x3_we0;
reg   [31:0] tiny_x3_d0;
wire   [31:0] tiny_x3_q0;
reg   [6:0] v_1_address0;
reg    v_1_ce0;
reg    v_1_we0;
wire   [31:0] v_1_q0;
reg   [5:0] m2_1_address0;
reg    m2_1_ce0;
reg    m2_1_we0;
reg   [31:0] m2_1_d0;
wire   [31:0] m2_1_q0;
reg   [5:0] z_1_address0;
reg    z_1_ce0;
reg    z_1_we0;
wire   [31:0] z_1_q0;
reg   [31:0] reg_800;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln133_fu_909_p2;
wire    ap_CS_fsm_state24;
wire   [0:0] icmp_ln133_1_fu_1248_p2;
reg   [31:0] reg_804;
reg   [31:0] reg_808;
reg   [31:0] reg_812;
wire   [31:0] grp_fu_750_p2;
reg   [31:0] reg_816;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state26;
wire   [31:0] grp_fu_743_p2;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state28;
reg   [31:0] reg_827;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln177_fu_1029_p2;
wire    ap_CS_fsm_state29;
wire   [0:0] icmp_ln177_1_fu_1368_p2;
reg   [31:0] reg_831;
reg   [31:0] reg_835;
reg   [31:0] reg_839;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state30;
reg   [3:0] i_38_reg_1839;
wire    ap_CS_fsm_state2;
wire   [5:0] tmp_16_fu_866_p3;
reg   [5:0] tmp_16_reg_1844;
wire   [6:0] sub_ln136_fu_886_p2;
reg   [6:0] sub_ln136_reg_1850;
wire   [3:0] add_ln174_fu_898_p2;
reg   [3:0] add_ln174_reg_1858;
wire   [2:0] add_ln133_fu_915_p2;
reg   [2:0] add_ln133_reg_1873;
wire   [1:0] trunc_ln134_fu_921_p1;
reg   [1:0] trunc_ln134_reg_1878;
wire   [5:0] empty_107_fu_945_p2;
reg   [5:0] empty_107_reg_1882;
wire    ap_CS_fsm_state4;
wire   [3:0] add_ln135_fu_975_p2;
reg   [3:0] add_ln135_reg_1895;
wire   [0:0] icmp_ln135_fu_969_p2;
wire   [2:0] add_ln177_fu_1035_p2;
reg   [2:0] add_ln177_reg_1913;
wire   [1:0] trunc_ln178_1_fu_1041_p1;
reg   [1:0] trunc_ln178_1_reg_1918;
wire   [31:0] tmp_s_fu_1045_p6;
reg   [31:0] tmp_s_reg_1922;
wire   [2:0] add_ln72_fu_1103_p2;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln236_fu_1157_p2;
reg   [0:0] icmp_ln236_reg_1935;
wire    ap_CS_fsm_state18;
wire   [6:0] i_42_fu_1163_p2;
reg   [6:0] i_42_reg_1939;
wire   [3:0] trunc_ln163_fu_1177_p1;
reg   [3:0] trunc_ln163_reg_1947;
wire    ap_CS_fsm_state19;
wire   [0:0] tmp_fu_1169_p3;
wire   [4:0] i_40_fu_1182_p2;
reg   [4:0] i_40_reg_1953;
wire   [5:0] tmp_18_fu_1192_p3;
reg   [5:0] tmp_18_reg_1958;
wire    ap_CS_fsm_state23;
wire   [6:0] sub_ln136_1_fu_1212_p2;
reg   [6:0] sub_ln136_1_reg_1964;
wire   [3:0] add_ln174_1_fu_1224_p2;
reg   [3:0] add_ln174_1_reg_1972;
wire   [0:0] icmp_ln174_1_fu_1218_p2;
wire   [2:0] add_ln133_1_fu_1254_p2;
reg   [2:0] add_ln133_1_reg_1988;
wire   [1:0] trunc_ln134_1_fu_1260_p1;
reg   [1:0] trunc_ln134_1_reg_1993;
wire   [5:0] empty_114_fu_1284_p2;
reg   [5:0] empty_114_reg_1997;
wire    ap_CS_fsm_state25;
wire   [3:0] add_ln135_1_fu_1314_p2;
reg   [3:0] add_ln135_1_reg_2010;
wire   [0:0] icmp_ln135_1_fu_1308_p2;
wire   [2:0] add_ln177_1_fu_1374_p2;
reg   [2:0] add_ln177_1_reg_2028;
wire   [1:0] trunc_ln178_3_fu_1380_p1;
reg   [1:0] trunc_ln178_3_reg_2033;
wire   [31:0] tmp_12_fu_1384_p6;
reg   [31:0] tmp_12_reg_2037;
wire   [2:0] add_ln72_1_fu_1442_p2;
wire    ap_CS_fsm_state32;
wire   [0:0] trunc_ln248_fu_1481_p1;
reg   [0:0] trunc_ln248_reg_2050;
wire    ap_CS_fsm_state68;
reg   [31:0] mul_i_reg_2054;
wire    ap_CS_fsm_state78;
wire   [31:0] mul_i1_fu_756_p2;
reg   [31:0] mul_i1_reg_2060;
wire   [0:0] and_ln255_fu_1645_p2;
reg   [0:0] and_ln255_reg_2066;
wire    grp_update_slack_fu_467_ap_start;
wire    grp_update_slack_fu_467_ap_done;
wire    grp_update_slack_fu_467_ap_idle;
wire    grp_update_slack_fu_467_ap_ready;
wire   [5:0] grp_update_slack_fu_467_u_1_address0;
wire    grp_update_slack_fu_467_u_1_ce0;
wire   [5:0] grp_update_slack_fu_467_y_1_address0;
wire    grp_update_slack_fu_467_y_1_ce0;
wire   [5:0] grp_update_slack_fu_467_znew_1_address0;
wire    grp_update_slack_fu_467_znew_1_ce0;
wire    grp_update_slack_fu_467_znew_1_we0;
wire   [31:0] grp_update_slack_fu_467_znew_1_d0;
wire   [5:0] grp_update_slack_fu_467_u_min_1_address0;
wire    grp_update_slack_fu_467_u_min_1_ce0;
wire   [5:0] grp_update_slack_fu_467_m1_1_address0;
wire    grp_update_slack_fu_467_m1_1_ce0;
wire    grp_update_slack_fu_467_m1_1_we0;
wire   [31:0] grp_update_slack_fu_467_m1_1_d0;
wire   [5:0] grp_update_slack_fu_467_u_max_1_address0;
wire    grp_update_slack_fu_467_u_max_1_ce0;
wire   [6:0] grp_update_slack_fu_467_x_1_address0;
wire    grp_update_slack_fu_467_x_1_ce0;
wire   [6:0] grp_update_slack_fu_467_g_1_address0;
wire    grp_update_slack_fu_467_g_1_ce0;
wire   [6:0] grp_update_slack_fu_467_vnew_1_address0;
wire    grp_update_slack_fu_467_vnew_1_ce0;
wire    grp_update_slack_fu_467_vnew_1_we0;
wire   [31:0] grp_update_slack_fu_467_vnew_1_d0;
wire   [6:0] grp_update_slack_fu_467_x_min_1_address0;
wire    grp_update_slack_fu_467_x_min_1_ce0;
wire   [6:0] grp_update_slack_fu_467_s1_1_address0;
wire    grp_update_slack_fu_467_s1_1_ce0;
wire    grp_update_slack_fu_467_s1_1_we0;
wire   [31:0] grp_update_slack_fu_467_s1_1_d0;
wire   [6:0] grp_update_slack_fu_467_x_max_1_address0;
wire    grp_update_slack_fu_467_x_max_1_ce0;
wire    grp_forward_pass_2_fu_499_ap_start;
wire    grp_forward_pass_2_fu_499_ap_done;
wire    grp_forward_pass_2_fu_499_ap_idle;
wire    grp_forward_pass_2_fu_499_ap_ready;
reg   [3:0] grp_forward_pass_2_fu_499_i;
wire   [6:0] grp_forward_pass_2_fu_499_x_1_address0;
wire    grp_forward_pass_2_fu_499_x_1_ce0;
wire    grp_forward_pass_2_fu_499_x_1_we0;
wire   [31:0] grp_forward_pass_2_fu_499_x_1_d0;
wire   [6:0] grp_forward_pass_2_fu_499_x_1_address1;
wire    grp_forward_pass_2_fu_499_x_1_ce1;
wire   [5:0] grp_forward_pass_2_fu_499_u_1_address0;
wire    grp_forward_pass_2_fu_499_u_1_ce0;
wire   [5:0] grp_forward_pass_2_fu_499_u_1_address1;
wire    grp_forward_pass_2_fu_499_u_1_ce1;
wire   [7:0] grp_forward_pass_2_fu_499_Adyn_1_address0;
wire    grp_forward_pass_2_fu_499_Adyn_1_ce0;
wire   [7:0] grp_forward_pass_2_fu_499_Adyn_1_address1;
wire    grp_forward_pass_2_fu_499_Adyn_1_ce1;
wire   [3:0] grp_forward_pass_2_fu_499_tiny_x1_address0;
wire    grp_forward_pass_2_fu_499_tiny_x1_ce0;
wire    grp_forward_pass_2_fu_499_tiny_x1_we0;
wire   [31:0] grp_forward_pass_2_fu_499_tiny_x1_d0;
wire   [5:0] grp_forward_pass_2_fu_499_Bdyn_1_address0;
wire    grp_forward_pass_2_fu_499_Bdyn_1_ce0;
wire   [5:0] grp_forward_pass_2_fu_499_Bdyn_1_address1;
wire    grp_forward_pass_2_fu_499_Bdyn_1_ce1;
wire   [3:0] grp_forward_pass_2_fu_499_tiny_x2_address0;
wire    grp_forward_pass_2_fu_499_tiny_x2_ce0;
wire    grp_forward_pass_2_fu_499_tiny_x2_we0;
wire   [31:0] grp_forward_pass_2_fu_499_tiny_x2_d0;
wire    grp_update_dual_fu_517_ap_start;
wire    grp_update_dual_fu_517_ap_done;
wire    grp_update_dual_fu_517_ap_idle;
wire    grp_update_dual_fu_517_ap_ready;
wire   [5:0] grp_update_dual_fu_517_y_1_address0;
wire    grp_update_dual_fu_517_y_1_ce0;
wire    grp_update_dual_fu_517_y_1_we0;
wire   [31:0] grp_update_dual_fu_517_y_1_d0;
wire   [5:0] grp_update_dual_fu_517_u_1_address0;
wire    grp_update_dual_fu_517_u_1_ce0;
wire   [5:0] grp_update_dual_fu_517_m1_1_address0;
wire    grp_update_dual_fu_517_m1_1_ce0;
wire    grp_update_dual_fu_517_m1_1_we0;
wire   [31:0] grp_update_dual_fu_517_m1_1_d0;
wire   [6:0] grp_update_dual_fu_517_g_1_address0;
wire    grp_update_dual_fu_517_g_1_ce0;
wire    grp_update_dual_fu_517_g_1_we0;
wire   [31:0] grp_update_dual_fu_517_g_1_d0;
wire   [6:0] grp_update_dual_fu_517_x_1_address0;
wire    grp_update_dual_fu_517_x_1_ce0;
wire   [6:0] grp_update_dual_fu_517_s1_1_address0;
wire    grp_update_dual_fu_517_s1_1_ce0;
wire    grp_update_dual_fu_517_s1_1_we0;
wire   [31:0] grp_update_dual_fu_517_s1_1_d0;
wire   [6:0] grp_update_dual_fu_517_vnew_1_address0;
wire    grp_update_dual_fu_517_vnew_1_ce0;
wire   [5:0] grp_update_dual_fu_517_znew_1_address0;
wire    grp_update_dual_fu_517_znew_1_ce0;
wire    grp_update_linear_cost_fu_537_ap_start;
wire    grp_update_linear_cost_fu_537_ap_done;
wire    grp_update_linear_cost_fu_537_ap_idle;
wire    grp_update_linear_cost_fu_537_ap_ready;
wire   [5:0] grp_update_linear_cost_fu_537_znew_1_address0;
wire    grp_update_linear_cost_fu_537_znew_1_ce0;
wire   [5:0] grp_update_linear_cost_fu_537_y_1_address0;
wire    grp_update_linear_cost_fu_537_y_1_ce0;
wire   [5:0] grp_update_linear_cost_fu_537_m1_1_address0;
wire    grp_update_linear_cost_fu_537_m1_1_ce0;
wire    grp_update_linear_cost_fu_537_m1_1_we0;
wire   [31:0] grp_update_linear_cost_fu_537_m1_1_d0;
wire   [5:0] grp_update_linear_cost_fu_537_r_1_address0;
wire    grp_update_linear_cost_fu_537_r_1_ce0;
wire    grp_update_linear_cost_fu_537_r_1_we0;
wire   [31:0] grp_update_linear_cost_fu_537_r_1_d0;
wire   [6:0] grp_update_linear_cost_fu_537_vnew_1_address0;
wire    grp_update_linear_cost_fu_537_vnew_1_ce0;
wire   [6:0] grp_update_linear_cost_fu_537_vnew_1_address1;
wire    grp_update_linear_cost_fu_537_vnew_1_ce1;
wire   [6:0] grp_update_linear_cost_fu_537_g_1_address0;
wire    grp_update_linear_cost_fu_537_g_1_ce0;
wire   [6:0] grp_update_linear_cost_fu_537_g_1_address1;
wire    grp_update_linear_cost_fu_537_g_1_ce1;
wire   [6:0] grp_update_linear_cost_fu_537_s1_1_address0;
wire    grp_update_linear_cost_fu_537_s1_1_ce0;
wire    grp_update_linear_cost_fu_537_s1_1_we0;
wire   [31:0] grp_update_linear_cost_fu_537_s1_1_d0;
wire   [6:0] grp_update_linear_cost_fu_537_s2_1_address0;
wire    grp_update_linear_cost_fu_537_s2_1_ce0;
wire    grp_update_linear_cost_fu_537_s2_1_we0;
wire   [31:0] grp_update_linear_cost_fu_537_s2_1_d0;
wire   [6:0] grp_update_linear_cost_fu_537_q_1_address0;
wire    grp_update_linear_cost_fu_537_q_1_ce0;
wire    grp_update_linear_cost_fu_537_q_1_we0;
wire   [31:0] grp_update_linear_cost_fu_537_q_1_d0;
wire   [6:0] grp_update_linear_cost_fu_537_q_1_address1;
wire    grp_update_linear_cost_fu_537_q_1_ce1;
wire    grp_update_linear_cost_fu_537_q_1_we1;
wire   [31:0] grp_update_linear_cost_fu_537_q_1_d1;
wire   [6:0] grp_update_linear_cost_fu_537_Xref_1_address0;
wire    grp_update_linear_cost_fu_537_Xref_1_ce0;
wire   [6:0] grp_update_linear_cost_fu_537_Xref_1_address1;
wire    grp_update_linear_cost_fu_537_Xref_1_ce1;
wire   [6:0] grp_update_linear_cost_fu_537_p_1_address0;
wire    grp_update_linear_cost_fu_537_p_1_ce0;
wire    grp_update_linear_cost_fu_537_p_1_we0;
wire   [31:0] grp_update_linear_cost_fu_537_p_1_d0;
wire   [6:0] grp_update_linear_cost_fu_537_p_1_address1;
wire    grp_update_linear_cost_fu_537_p_1_ce1;
wire    grp_update_linear_cost_fu_537_p_1_we1;
wire   [31:0] grp_update_linear_cost_fu_537_p_1_d1;
wire   [3:0] grp_update_linear_cost_fu_537_tiny_x1_address0;
wire    grp_update_linear_cost_fu_537_tiny_x1_ce0;
wire    grp_update_linear_cost_fu_537_tiny_x1_we0;
wire   [31:0] grp_update_linear_cost_fu_537_tiny_x1_d0;
wire   [3:0] grp_update_linear_cost_fu_537_tiny_x2_address0;
wire    grp_update_linear_cost_fu_537_tiny_x2_ce0;
wire    grp_update_linear_cost_fu_537_tiny_x2_we0;
wire   [31:0] grp_update_linear_cost_fu_537_tiny_x2_d0;
wire   [7:0] grp_update_linear_cost_fu_537_PinfT_1_address0;
wire    grp_update_linear_cost_fu_537_PinfT_1_ce0;
wire   [7:0] grp_update_linear_cost_fu_537_PinfT_1_address1;
wire    grp_update_linear_cost_fu_537_PinfT_1_ce1;
wire   [3:0] grp_update_linear_cost_fu_537_tiny_x3_address0;
wire    grp_update_linear_cost_fu_537_tiny_x3_ce0;
wire    grp_update_linear_cost_fu_537_tiny_x3_we0;
wire   [31:0] grp_update_linear_cost_fu_537_tiny_x3_d0;
wire   [3:0] grp_update_linear_cost_fu_537_tiny_Q_address0;
wire    grp_update_linear_cost_fu_537_tiny_Q_ce0;
wire    grp_backward_pass_1_fu_575_ap_start;
wire    grp_backward_pass_1_fu_575_ap_done;
wire    grp_backward_pass_1_fu_575_ap_idle;
wire    grp_backward_pass_1_fu_575_ap_ready;
wire   [6:0] grp_backward_pass_1_fu_575_p_1_address0;
wire    grp_backward_pass_1_fu_575_p_1_ce0;
wire   [6:0] grp_backward_pass_1_fu_575_p_1_address1;
wire    grp_backward_pass_1_fu_575_p_1_ce1;
wire   [5:0] grp_backward_pass_1_fu_575_r_1_address0;
wire    grp_backward_pass_1_fu_575_r_1_ce0;
wire   [5:0] grp_backward_pass_1_fu_575_r_1_address1;
wire    grp_backward_pass_1_fu_575_r_1_ce1;
wire   [5:0] grp_backward_pass_1_fu_575_d_1_address0;
wire    grp_backward_pass_1_fu_575_d_1_ce0;
wire    grp_backward_pass_1_fu_575_d_1_we0;
wire   [31:0] grp_backward_pass_1_fu_575_d_1_d0;
wire   [5:0] grp_backward_pass_1_fu_575_d_1_address1;
wire    grp_backward_pass_1_fu_575_d_1_ce1;
wire    grp_backward_pass_1_fu_575_d_1_we1;
wire   [31:0] grp_backward_pass_1_fu_575_d_1_d1;
wire   [31:0] grp_backward_pass_1_fu_575_u1_0_o;
wire    grp_backward_pass_1_fu_575_u1_0_o_ap_vld;
wire   [5:0] grp_backward_pass_1_fu_575_BdynT_1_address0;
wire    grp_backward_pass_1_fu_575_BdynT_1_ce0;
wire   [5:0] grp_backward_pass_1_fu_575_BdynT_1_address1;
wire    grp_backward_pass_1_fu_575_BdynT_1_ce1;
wire   [31:0] grp_backward_pass_1_fu_575_u1_1_o;
wire    grp_backward_pass_1_fu_575_u1_1_o_ap_vld;
wire   [31:0] grp_backward_pass_1_fu_575_u1_2_o;
wire    grp_backward_pass_1_fu_575_u1_2_o_ap_vld;
wire   [31:0] grp_backward_pass_1_fu_575_u1_3_o;
wire    grp_backward_pass_1_fu_575_u1_3_o_ap_vld;
wire   [31:0] grp_backward_pass_1_fu_575_u2_0_o;
wire    grp_backward_pass_1_fu_575_u2_0_o_ap_vld;
wire   [31:0] grp_backward_pass_1_fu_575_u2_1_o;
wire    grp_backward_pass_1_fu_575_u2_1_o_ap_vld;
wire   [31:0] grp_backward_pass_1_fu_575_u2_2_o;
wire    grp_backward_pass_1_fu_575_u2_2_o_ap_vld;
wire   [31:0] grp_backward_pass_1_fu_575_u2_3_o;
wire    grp_backward_pass_1_fu_575_u2_3_o_ap_vld;
wire   [3:0] grp_backward_pass_1_fu_575_Quu_inv_1_address0;
wire    grp_backward_pass_1_fu_575_Quu_inv_1_ce0;
wire   [3:0] grp_backward_pass_1_fu_575_Quu_inv_1_address1;
wire    grp_backward_pass_1_fu_575_Quu_inv_1_ce1;
wire   [31:0] grp_backward_pass_1_fu_575_grp_fu_743_p_din0;
wire   [31:0] grp_backward_pass_1_fu_575_grp_fu_743_p_din1;
wire   [0:0] grp_backward_pass_1_fu_575_grp_fu_743_p_opcode;
wire    grp_backward_pass_1_fu_575_grp_fu_743_p_ce;
wire   [31:0] grp_backward_pass_1_fu_575_grp_fu_2073_p_din0;
wire   [31:0] grp_backward_pass_1_fu_575_grp_fu_2073_p_din1;
wire   [0:0] grp_backward_pass_1_fu_575_grp_fu_2073_p_opcode;
wire    grp_backward_pass_1_fu_575_grp_fu_2073_p_ce;
wire    grp_backward_pass_2_fu_606_ap_start;
wire    grp_backward_pass_2_fu_606_ap_done;
wire    grp_backward_pass_2_fu_606_ap_idle;
wire    grp_backward_pass_2_fu_606_ap_ready;
wire   [6:0] grp_backward_pass_2_fu_606_p_1_address0;
wire    grp_backward_pass_2_fu_606_p_1_ce0;
wire    grp_backward_pass_2_fu_606_p_1_we0;
wire   [31:0] grp_backward_pass_2_fu_606_p_1_d0;
wire   [6:0] grp_backward_pass_2_fu_606_p_1_address1;
wire    grp_backward_pass_2_fu_606_p_1_ce1;
wire   [5:0] grp_backward_pass_2_fu_606_r_1_address0;
wire    grp_backward_pass_2_fu_606_r_1_ce0;
wire   [5:0] grp_backward_pass_2_fu_606_r_1_address1;
wire    grp_backward_pass_2_fu_606_r_1_ce1;
wire   [6:0] grp_backward_pass_2_fu_606_q_1_address0;
wire    grp_backward_pass_2_fu_606_q_1_ce0;
wire   [6:0] grp_backward_pass_2_fu_606_q_1_address1;
wire    grp_backward_pass_2_fu_606_q_1_ce1;
wire   [7:0] grp_backward_pass_2_fu_606_AmBKt_1_address0;
wire    grp_backward_pass_2_fu_606_AmBKt_1_ce0;
wire   [7:0] grp_backward_pass_2_fu_606_AmBKt_1_address1;
wire    grp_backward_pass_2_fu_606_AmBKt_1_ce1;
wire   [3:0] grp_backward_pass_2_fu_606_tiny_x1_address0;
wire    grp_backward_pass_2_fu_606_tiny_x1_ce0;
wire    grp_backward_pass_2_fu_606_tiny_x1_we0;
wire   [31:0] grp_backward_pass_2_fu_606_tiny_x1_d0;
wire   [5:0] grp_backward_pass_2_fu_606_KinfT_1_address0;
wire    grp_backward_pass_2_fu_606_KinfT_1_ce0;
wire   [5:0] grp_backward_pass_2_fu_606_KinfT_1_address1;
wire    grp_backward_pass_2_fu_606_KinfT_1_ce1;
wire   [3:0] grp_backward_pass_2_fu_606_tiny_x2_address0;
wire    grp_backward_pass_2_fu_606_tiny_x2_ce0;
wire    grp_backward_pass_2_fu_606_tiny_x2_we0;
wire   [31:0] grp_backward_pass_2_fu_606_tiny_x2_d0;
wire   [3:0] grp_backward_pass_2_fu_606_tiny_x3_address0;
wire    grp_backward_pass_2_fu_606_tiny_x3_ce0;
wire    grp_backward_pass_2_fu_606_tiny_x3_we0;
wire   [31:0] grp_backward_pass_2_fu_606_tiny_x3_d0;
wire   [31:0] grp_backward_pass_2_fu_606_grp_fu_743_p_din0;
wire   [31:0] grp_backward_pass_2_fu_606_grp_fu_743_p_din1;
wire   [1:0] grp_backward_pass_2_fu_606_grp_fu_743_p_opcode;
wire    grp_backward_pass_2_fu_606_grp_fu_743_p_ce;
wire   [31:0] grp_backward_pass_2_fu_606_grp_fu_2073_p_din0;
wire   [31:0] grp_backward_pass_2_fu_606_grp_fu_2073_p_din1;
wire   [0:0] grp_backward_pass_2_fu_606_grp_fu_2073_p_opcode;
wire    grp_backward_pass_2_fu_606_grp_fu_2073_p_ce;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_ap_start;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_ap_done;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_ap_idle;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_ap_ready;
wire   [6:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_x_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_x_1_ce0;
wire   [6:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_vnew_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_vnew_1_ce0;
wire   [6:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_s1_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_s1_1_ce0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_s1_1_we0;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_s1_1_d0;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_grp_fu_2073_p_din0;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_grp_fu_2073_p_din1;
wire   [0:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_grp_fu_2073_p_opcode;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_grp_fu_2073_p_ce;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_ap_start;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_ap_done;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_ap_idle;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_ap_ready;
wire   [5:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_u_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_u_1_ce0;
wire   [5:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_znew_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_znew_1_ce0;
wire   [5:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_m1_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_m1_1_ce0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_m1_1_we0;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_m1_1_d0;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_grp_fu_743_p_din0;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_grp_fu_743_p_din1;
wire   [0:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_grp_fu_743_p_opcode;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_grp_fu_743_p_ce;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_ap_start;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_ap_done;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_ap_idle;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_ap_ready;
wire   [6:0] grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_s1_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_s1_1_ce0;
wire   [6:0] grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_s2_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_s2_1_ce0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_s2_1_we0;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_s2_1_d0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_ap_start;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_ap_done;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_ap_idle;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_ap_ready;
wire   [5:0] grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_m1_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_m1_1_ce0;
wire   [5:0] grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_m2_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_m2_1_ce0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_m2_1_we0;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_m2_1_d0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_ap_start;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_ap_done;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_ap_idle;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_ap_ready;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_max_1_out;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_max_1_out_ap_vld;
wire   [6:0] grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_s2_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_s2_1_ce0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_ap_start;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_ap_done;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_ap_idle;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_ap_ready;
wire   [6:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_v_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_v_1_ce0;
wire   [6:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_vnew_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_vnew_1_ce0;
wire   [6:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_s1_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_s1_1_ce0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_s1_1_we0;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_s1_1_d0;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_grp_fu_743_p_din0;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_grp_fu_743_p_din1;
wire   [0:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_grp_fu_743_p_opcode;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_grp_fu_743_p_ce;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_ap_start;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_ap_done;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_ap_idle;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_ap_ready;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_max_3_out;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_max_3_out_ap_vld;
wire   [5:0] grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_m2_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_m2_1_ce0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_ap_start;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_ap_done;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_ap_idle;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_ap_ready;
wire   [5:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_z_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_z_1_ce0;
wire   [5:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_znew_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_znew_1_ce0;
wire   [5:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_m1_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_m1_1_ce0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_m1_1_we0;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_m1_1_d0;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_grp_fu_2073_p_din0;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_grp_fu_2073_p_din1;
wire   [0:0] grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_grp_fu_2073_p_opcode;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_grp_fu_2073_p_ce;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_ap_start;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_ap_done;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_ap_idle;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_ap_ready;
wire   [6:0] grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_s1_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_s1_1_ce0;
wire   [6:0] grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_s2_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_s2_1_ce0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_s2_1_we0;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_s2_1_d0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_ap_start;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_ap_done;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_ap_idle;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_ap_ready;
wire   [5:0] grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_m1_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_m1_1_ce0;
wire   [5:0] grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_m2_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_m2_1_ce0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_m2_1_we0;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_m2_1_d0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_ap_start;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_ap_done;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_ap_idle;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_ap_ready;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_max_2_out;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_max_2_out_ap_vld;
wire   [6:0] grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_s2_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_s2_1_ce0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_ap_start;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_ap_done;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_ap_idle;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_ap_ready;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_max_4_out;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_max_4_out_ap_vld;
wire   [5:0] grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_m2_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_m2_1_ce0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_ap_start;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_ap_done;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_ap_idle;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_ap_ready;
wire   [6:0] grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_vnew_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_vnew_1_ce0;
wire   [6:0] grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_v_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_v_1_ce0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_v_1_we0;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_v_1_d0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_ap_start;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_ap_done;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_ap_idle;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_ap_ready;
wire   [5:0] grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_znew_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_znew_1_ce0;
wire   [5:0] grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_z_1_address0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_z_1_ce0;
wire    grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_z_1_we0;
wire   [31:0] grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_z_1_d0;
reg   [2:0] i_33_reg_332;
wire   [0:0] icmp_ln174_fu_892_p2;
reg   [3:0] j_10_reg_343;
reg   [31:0] add1213_i_i_i_reg_354;
reg   [2:0] j_reg_366;
wire    ap_CS_fsm_state10;
reg   [2:0] j_11_reg_377;
wire   [0:0] icmp_ln72_fu_1097_p2;
reg   [4:0] i_34_reg_388;
wire    ap_CS_fsm_state22;
reg   [3:0] i_41_reg_399;
wire    ap_CS_fsm_state33;
reg   [2:0] i_37_reg_411;
reg   [3:0] j_13_reg_422;
reg   [31:0] add1213_i_i_i_i_reg_433;
reg   [2:0] j_12_reg_445;
wire    ap_CS_fsm_state31;
reg   [2:0] j_14_reg_456;
wire   [0:0] icmp_ln72_1_fu_1436_p2;
reg    grp_update_slack_fu_467_ap_start_reg;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state34;
reg    grp_forward_pass_2_fu_499_ap_start_reg;
wire    ap_CS_fsm_state12;
reg    grp_update_dual_fu_517_ap_start_reg;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state36;
reg    grp_update_linear_cost_fu_537_ap_start_reg;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state38;
reg    grp_backward_pass_1_fu_575_ap_start_reg;
wire    ap_CS_fsm_state20;
reg    grp_backward_pass_2_fu_606_ap_start_reg;
wire    ap_CS_fsm_state21;
reg    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_ap_start_reg;
wire    ap_CS_fsm_state69;
reg    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_ap_start_reg;
reg    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_ap_start_reg;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state71;
reg    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_ap_start_reg;
reg    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_ap_start_reg;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state73;
reg    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_ap_start_reg;
reg    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_ap_start_reg;
reg    grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_ap_start_reg;
reg    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_ap_start_reg;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state75;
reg    grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_ap_start_reg;
reg    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_ap_start_reg;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state77;
reg    grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_ap_start_reg;
reg    grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_ap_start_reg;
wire    ap_CS_fsm_state79;
wire   [0:0] and_ln257_fu_1787_p2;
wire    ap_CS_fsm_state80;
reg    grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_ap_start_reg;
wire   [63:0] zext_ln136_15_fu_960_p1;
wire   [63:0] zext_ln136_fu_986_p1;
wire   [63:0] zext_ln178_1_fu_1024_p1;
wire   [63:0] zext_ln73_1_fu_1092_p1;
wire   [63:0] zext_ln136_18_fu_1299_p1;
wire   [63:0] zext_ln136_12_fu_1325_p1;
wire   [63:0] zext_ln178_3_fu_1363_p1;
wire   [63:0] zext_ln73_3_fu_1431_p1;
wire   [31:0] add_ln270_fu_1793_p2;
reg   [3:0] i_35_fu_224;
reg   [6:0] i_fu_244;
wire   [31:0] bitcast_ln73_2_fu_1137_p1;
wire   [31:0] bitcast_ln73_4_fu_1476_p1;
reg   [31:0] grp_fu_743_p0;
reg   [31:0] grp_fu_743_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state27;
reg   [31:0] grp_fu_750_p0;
reg   [31:0] grp_fu_750_p1;
reg   [31:0] grp_fu_760_p0;
reg   [31:0] grp_fu_760_p1;
reg   [31:0] grp_fu_764_p0;
reg   [31:0] grp_fu_764_p1;
wire   [2:0] trunc_ln178_fu_862_p1;
wire   [6:0] tmp_17_fu_878_p3;
wire   [6:0] zext_ln136_13_fu_874_p1;
wire   [3:0] p_shl1_fu_933_p3;
wire   [5:0] p_shl_fu_925_p3;
wire   [5:0] p_shl1_cast_fu_941_p1;
wire   [6:0] zext_ln136_14_fu_951_p1;
wire   [6:0] add_ln136_8_fu_955_p2;
wire   [5:0] zext_ln135_fu_965_p1;
wire   [5:0] add_ln136_fu_981_p2;
wire   [5:0] zext_ln178_fu_1015_p1;
wire   [5:0] add_ln178_fu_1019_p2;
wire   [1:0] tmp_s_fu_1045_p5;
wire   [5:0] zext_ln73_fu_1083_p1;
wire   [5:0] add_ln73_fu_1087_p2;
wire   [1:0] tmp_11_fu_1113_p5;
wire   [31:0] tmp_11_fu_1113_p6;
wire   [31:0] bitcast_ln73_fu_1127_p1;
wire   [31:0] xor_ln73_fu_1131_p2;
wire  signed [6:0] sext_ln236_fu_1153_p1;
wire   [2:0] trunc_ln178_2_fu_1188_p1;
wire   [6:0] tmp_19_fu_1204_p3;
wire   [6:0] zext_ln136_16_fu_1200_p1;
wire   [1:0] grp_fu_1242_p1;
wire   [3:0] p_shl3_fu_1272_p3;
wire   [5:0] p_shl2_fu_1264_p3;
wire   [5:0] p_shl3_cast_fu_1280_p1;
wire   [6:0] zext_ln136_17_fu_1290_p1;
wire   [6:0] add_ln136_9_fu_1294_p2;
wire   [5:0] zext_ln135_1_fu_1304_p1;
wire   [5:0] add_ln136_1_fu_1320_p2;
wire   [5:0] zext_ln178_2_fu_1354_p1;
wire   [5:0] add_ln178_1_fu_1358_p2;
wire   [1:0] tmp_12_fu_1384_p5;
wire   [5:0] zext_ln73_2_fu_1422_p1;
wire   [5:0] add_ln73_1_fu_1426_p2;
wire   [1:0] tmp_13_fu_1452_p5;
wire   [31:0] tmp_13_fu_1452_p6;
wire   [31:0] bitcast_ln73_3_fu_1466_p1;
wire   [31:0] xor_ln73_1_fu_1470_p2;
wire   [0:0] grp_fu_1242_p2;
wire   [31:0] bitcast_ln255_fu_1513_p1;
wire   [31:0] bitcast_ln255_1_fu_1531_p1;
wire   [7:0] tmp_20_fu_1517_p4;
wire   [22:0] trunc_ln255_fu_1527_p1;
wire   [0:0] icmp_ln255_1_fu_1555_p2;
wire   [0:0] icmp_ln255_fu_1549_p2;
wire   [7:0] tmp_21_fu_1535_p4;
wire   [22:0] trunc_ln255_1_fu_1545_p1;
wire   [0:0] icmp_ln255_3_fu_1573_p2;
wire   [0:0] icmp_ln255_2_fu_1567_p2;
wire   [0:0] or_ln255_fu_1561_p2;
wire   [0:0] or_ln255_1_fu_1579_p2;
wire   [0:0] and_ln255_1_fu_1585_p2;
wire   [0:0] grp_fu_760_p2;
wire   [31:0] bitcast_ln256_fu_1597_p1;
wire   [7:0] tmp_23_fu_1601_p4;
wire   [22:0] trunc_ln256_fu_1611_p1;
wire   [0:0] icmp_ln256_1_fu_1621_p2;
wire   [0:0] icmp_ln256_fu_1615_p2;
wire   [0:0] or_ln256_fu_1627_p2;
wire   [0:0] and_ln256_fu_1633_p2;
wire   [0:0] grp_fu_764_p2;
wire   [0:0] and_ln255_2_fu_1591_p2;
wire   [0:0] and_ln256_1_fu_1639_p2;
wire   [31:0] bitcast_ln257_fu_1657_p1;
wire   [31:0] bitcast_ln257_1_fu_1674_p1;
wire   [7:0] tmp_25_fu_1660_p4;
wire   [22:0] trunc_ln257_fu_1670_p1;
wire   [0:0] icmp_ln257_1_fu_1698_p2;
wire   [0:0] icmp_ln257_fu_1692_p2;
wire   [7:0] tmp_26_fu_1678_p4;
wire   [22:0] trunc_ln257_1_fu_1688_p1;
wire   [0:0] icmp_ln257_3_fu_1716_p2;
wire   [0:0] icmp_ln257_2_fu_1710_p2;
wire   [0:0] or_ln257_fu_1704_p2;
wire   [0:0] or_ln257_1_fu_1722_p2;
wire   [0:0] and_ln257_1_fu_1728_p2;
wire   [31:0] bitcast_ln258_fu_1740_p1;
wire   [7:0] tmp_28_fu_1743_p4;
wire   [22:0] trunc_ln258_fu_1753_p1;
wire   [0:0] icmp_ln258_1_fu_1763_p2;
wire   [0:0] icmp_ln258_fu_1757_p2;
wire   [0:0] or_ln258_fu_1769_p2;
wire   [0:0] and_ln258_fu_1775_p2;
wire   [0:0] and_ln257_2_fu_1734_p2;
wire   [0:0] and_ln258_1_fu_1781_p2;
reg   [1:0] grp_fu_743_opcode;
reg    grp_fu_743_ce;
reg    grp_fu_1242_ap_start;
wire    grp_fu_1242_ap_done;
reg    grp_fu_1242_ce;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state67;
wire   [31:0] grp_fu_2073_p2;
reg   [31:0] grp_fu_2073_p0;
reg   [31:0] grp_fu_2073_p1;
reg   [1:0] grp_fu_2073_opcode;
reg    grp_fu_2073_ce;
reg   [79:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
reg    ap_ST_fsm_state33_blk;
reg    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
reg    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
reg    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
reg    ap_block_state69_on_subcall_done;
reg    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
reg    ap_block_state71_on_subcall_done;
reg    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
reg    ap_block_state73_on_subcall_done;
reg    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
reg    ap_block_state75_on_subcall_done;
reg    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
reg    ap_block_state77_on_subcall_done;
reg    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
reg    ap_block_state80_on_subcall_done;
reg    ap_ST_fsm_state80_blk;
wire   [31:0] grp_fu_1242_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 80'd1;
#0 u1_0 = 32'd0;
#0 u1_1 = 32'd0;
#0 u1_2 = 32'd0;
#0 u1_3 = 32'd0;
#0 u2_0 = 32'd0;
#0 u2_1 = 32'd0;
#0 u2_2 = 32'd0;
#0 u2_3 = 32'd0;
#0 grp_update_slack_fu_467_ap_start_reg = 1'b0;
#0 grp_forward_pass_2_fu_499_ap_start_reg = 1'b0;
#0 grp_update_dual_fu_517_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_fu_537_ap_start_reg = 1'b0;
#0 grp_backward_pass_1_fu_575_ap_start_reg = 1'b0;
#0 grp_backward_pass_2_fu_606_ap_start_reg = 1'b0;
#0 grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_ap_start_reg = 1'b0;
#0 grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_ap_start_reg = 1'b0;
#0 grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_ap_start_reg = 1'b0;
#0 grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_ap_start_reg = 1'b0;
#0 grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_ap_start_reg = 1'b0;
#0 grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_ap_start_reg = 1'b0;
#0 grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_ap_start_reg = 1'b0;
#0 grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_ap_start_reg = 1'b0;
#0 grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_ap_start_reg = 1'b0;
#0 grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_ap_start_reg = 1'b0;
#0 grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_ap_start_reg = 1'b0;
#0 grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_ap_start_reg = 1'b0;
#0 grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_ap_start_reg = 1'b0;
#0 grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_ap_start_reg = 1'b0;
end

tracking_tiny_solve_d_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
d_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(d_1_address0),
    .ce0(d_1_ce0),
    .we0(d_1_we0),
    .d0(grp_backward_pass_1_fu_575_d_1_d0),
    .q0(d_1_q0),
    .address1(grp_backward_pass_1_fu_575_d_1_address1),
    .ce1(d_1_ce1),
    .we1(d_1_we1),
    .d1(grp_backward_pass_1_fu_575_d_1_d1),
    .q1(d_1_q1)
);

tracking_tiny_solve_tiny_x1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
tiny_x1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tiny_x1_address0),
    .ce0(tiny_x1_ce0),
    .we0(tiny_x1_we0),
    .d0(tiny_x1_d0),
    .q0(tiny_x1_q0)
);

tracking_tiny_solve_tiny_x1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
tiny_x2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tiny_x2_address0),
    .ce0(tiny_x2_ce0),
    .we0(tiny_x2_we0),
    .d0(tiny_x2_d0),
    .q0(tiny_x2_q0)
);

tracking_tiny_solve_y_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
y_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_1_address0),
    .ce0(y_1_ce0),
    .we0(y_1_we0),
    .d0(grp_update_dual_fu_517_y_1_d0),
    .q0(y_1_q0)
);

tracking_tiny_solve_y_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
znew_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(znew_1_address0),
    .ce0(znew_1_ce0),
    .we0(znew_1_we0),
    .d0(grp_update_slack_fu_467_znew_1_d0),
    .q0(znew_1_q0)
);

tracking_tiny_solve_y_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
m1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m1_1_address0),
    .ce0(m1_1_ce0),
    .we0(m1_1_we0),
    .d0(m1_1_d0),
    .q0(m1_1_q0)
);

tracking_tiny_solve_g_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
g_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(g_1_address0),
    .ce0(g_1_ce0),
    .we0(g_1_we0),
    .d0(grp_update_dual_fu_517_g_1_d0),
    .q0(g_1_q0),
    .address1(grp_update_linear_cost_fu_537_g_1_address1),
    .ce1(g_1_ce1),
    .q1(g_1_q1)
);

tracking_tiny_solve_g_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
vnew_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(vnew_1_address0),
    .ce0(vnew_1_ce0),
    .we0(vnew_1_we0),
    .d0(grp_update_slack_fu_467_vnew_1_d0),
    .q0(vnew_1_q0),
    .address1(grp_update_linear_cost_fu_537_vnew_1_address1),
    .ce1(vnew_1_ce1),
    .q1(vnew_1_q1)
);

tracking_tiny_solve_s1_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
s1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(s1_1_address0),
    .ce0(s1_1_ce0),
    .we0(s1_1_we0),
    .d0(s1_1_d0),
    .q0(s1_1_q0)
);

tracking_tiny_solve_r_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
r_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(r_1_address0),
    .ce0(r_1_ce0),
    .we0(r_1_we0),
    .d0(grp_update_linear_cost_fu_537_r_1_d0),
    .q0(r_1_q0),
    .address1(r_1_address1),
    .ce1(r_1_ce1),
    .q1(r_1_q1)
);

tracking_tiny_solve_s1_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
s2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(s2_1_address0),
    .ce0(s2_1_ce0),
    .we0(s2_1_we0),
    .d0(s2_1_d0),
    .q0(s2_1_q0)
);

tracking_tiny_solve_q_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
q_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q_1_address0),
    .ce0(q_1_ce0),
    .we0(q_1_we0),
    .d0(grp_update_linear_cost_fu_537_q_1_d0),
    .q0(q_1_q0),
    .address1(q_1_address1),
    .ce1(q_1_ce1),
    .we1(q_1_we1),
    .d1(grp_update_linear_cost_fu_537_q_1_d1),
    .q1(q_1_q1)
);

tracking_tiny_solve_q_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
p_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_1_address0),
    .ce0(p_1_ce0),
    .we0(p_1_we0),
    .d0(p_1_d0),
    .q0(p_1_q0),
    .address1(p_1_address1),
    .ce1(p_1_ce1),
    .we1(p_1_we1),
    .d1(grp_update_linear_cost_fu_537_p_1_d1),
    .q1(p_1_q1)
);

tracking_tiny_solve_tiny_x1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
tiny_x3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tiny_x3_address0),
    .ce0(tiny_x3_ce0),
    .we0(tiny_x3_we0),
    .d0(tiny_x3_d0),
    .q0(tiny_x3_q0)
);

tracking_tiny_solve_s1_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
v_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(v_1_address0),
    .ce0(v_1_ce0),
    .we0(v_1_we0),
    .d0(grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_v_1_d0),
    .q0(v_1_q0)
);

tracking_tiny_solve_y_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
m2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m2_1_address0),
    .ce0(m2_1_ce0),
    .we0(m2_1_we0),
    .d0(m2_1_d0),
    .q0(m2_1_q0)
);

tracking_tiny_solve_y_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
z_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(z_1_address0),
    .ce0(z_1_ce0),
    .we0(z_1_we0),
    .d0(grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_z_1_d0),
    .q0(z_1_q0)
);

tracking_update_slack grp_update_slack_fu_467(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_slack_fu_467_ap_start),
    .ap_done(grp_update_slack_fu_467_ap_done),
    .ap_idle(grp_update_slack_fu_467_ap_idle),
    .ap_ready(grp_update_slack_fu_467_ap_ready),
    .u_1_address0(grp_update_slack_fu_467_u_1_address0),
    .u_1_ce0(grp_update_slack_fu_467_u_1_ce0),
    .u_1_q0(u_1_q0),
    .y_1_address0(grp_update_slack_fu_467_y_1_address0),
    .y_1_ce0(grp_update_slack_fu_467_y_1_ce0),
    .y_1_q0(y_1_q0),
    .znew_1_address0(grp_update_slack_fu_467_znew_1_address0),
    .znew_1_ce0(grp_update_slack_fu_467_znew_1_ce0),
    .znew_1_we0(grp_update_slack_fu_467_znew_1_we0),
    .znew_1_d0(grp_update_slack_fu_467_znew_1_d0),
    .znew_1_q0(znew_1_q0),
    .tiny_en_input_bound(tiny_en_input_bound),
    .u_min_1_address0(grp_update_slack_fu_467_u_min_1_address0),
    .u_min_1_ce0(grp_update_slack_fu_467_u_min_1_ce0),
    .u_min_1_q0(u_min_1_q0),
    .m1_1_address0(grp_update_slack_fu_467_m1_1_address0),
    .m1_1_ce0(grp_update_slack_fu_467_m1_1_ce0),
    .m1_1_we0(grp_update_slack_fu_467_m1_1_we0),
    .m1_1_d0(grp_update_slack_fu_467_m1_1_d0),
    .m1_1_q0(m1_1_q0),
    .u_max_1_address0(grp_update_slack_fu_467_u_max_1_address0),
    .u_max_1_ce0(grp_update_slack_fu_467_u_max_1_ce0),
    .u_max_1_q0(u_max_1_q0),
    .x_1_address0(grp_update_slack_fu_467_x_1_address0),
    .x_1_ce0(grp_update_slack_fu_467_x_1_ce0),
    .x_1_q0(x_1_q0),
    .g_1_address0(grp_update_slack_fu_467_g_1_address0),
    .g_1_ce0(grp_update_slack_fu_467_g_1_ce0),
    .g_1_q0(g_1_q0),
    .vnew_1_address0(grp_update_slack_fu_467_vnew_1_address0),
    .vnew_1_ce0(grp_update_slack_fu_467_vnew_1_ce0),
    .vnew_1_we0(grp_update_slack_fu_467_vnew_1_we0),
    .vnew_1_d0(grp_update_slack_fu_467_vnew_1_d0),
    .vnew_1_q0(vnew_1_q0),
    .tiny_en_state_bound(tiny_en_state_bound),
    .x_min_1_address0(grp_update_slack_fu_467_x_min_1_address0),
    .x_min_1_ce0(grp_update_slack_fu_467_x_min_1_ce0),
    .x_min_1_q0(x_min_1_q0),
    .s1_1_address0(grp_update_slack_fu_467_s1_1_address0),
    .s1_1_ce0(grp_update_slack_fu_467_s1_1_ce0),
    .s1_1_we0(grp_update_slack_fu_467_s1_1_we0),
    .s1_1_d0(grp_update_slack_fu_467_s1_1_d0),
    .s1_1_q0(s1_1_q0),
    .x_max_1_address0(grp_update_slack_fu_467_x_max_1_address0),
    .x_max_1_ce0(grp_update_slack_fu_467_x_max_1_ce0),
    .x_max_1_q0(x_max_1_q0)
);

tracking_forward_pass_2 grp_forward_pass_2_fu_499(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_forward_pass_2_fu_499_ap_start),
    .ap_done(grp_forward_pass_2_fu_499_ap_done),
    .ap_idle(grp_forward_pass_2_fu_499_ap_idle),
    .ap_ready(grp_forward_pass_2_fu_499_ap_ready),
    .i(grp_forward_pass_2_fu_499_i),
    .x_1_address0(grp_forward_pass_2_fu_499_x_1_address0),
    .x_1_ce0(grp_forward_pass_2_fu_499_x_1_ce0),
    .x_1_we0(grp_forward_pass_2_fu_499_x_1_we0),
    .x_1_d0(grp_forward_pass_2_fu_499_x_1_d0),
    .x_1_q0(x_1_q0),
    .x_1_address1(grp_forward_pass_2_fu_499_x_1_address1),
    .x_1_ce1(grp_forward_pass_2_fu_499_x_1_ce1),
    .x_1_q1(x_1_q1),
    .u_1_address0(grp_forward_pass_2_fu_499_u_1_address0),
    .u_1_ce0(grp_forward_pass_2_fu_499_u_1_ce0),
    .u_1_q0(u_1_q0),
    .u_1_address1(grp_forward_pass_2_fu_499_u_1_address1),
    .u_1_ce1(grp_forward_pass_2_fu_499_u_1_ce1),
    .u_1_q1(u_1_q1),
    .Adyn_1_address0(grp_forward_pass_2_fu_499_Adyn_1_address0),
    .Adyn_1_ce0(grp_forward_pass_2_fu_499_Adyn_1_ce0),
    .Adyn_1_q0(Adyn_1_q0),
    .Adyn_1_address1(grp_forward_pass_2_fu_499_Adyn_1_address1),
    .Adyn_1_ce1(grp_forward_pass_2_fu_499_Adyn_1_ce1),
    .Adyn_1_q1(Adyn_1_q1),
    .tiny_x1_address0(grp_forward_pass_2_fu_499_tiny_x1_address0),
    .tiny_x1_ce0(grp_forward_pass_2_fu_499_tiny_x1_ce0),
    .tiny_x1_we0(grp_forward_pass_2_fu_499_tiny_x1_we0),
    .tiny_x1_d0(grp_forward_pass_2_fu_499_tiny_x1_d0),
    .tiny_x1_q0(tiny_x1_q0),
    .Bdyn_1_address0(grp_forward_pass_2_fu_499_Bdyn_1_address0),
    .Bdyn_1_ce0(grp_forward_pass_2_fu_499_Bdyn_1_ce0),
    .Bdyn_1_q0(Bdyn_1_q0),
    .Bdyn_1_address1(grp_forward_pass_2_fu_499_Bdyn_1_address1),
    .Bdyn_1_ce1(grp_forward_pass_2_fu_499_Bdyn_1_ce1),
    .Bdyn_1_q1(Bdyn_1_q1),
    .tiny_x2_address0(grp_forward_pass_2_fu_499_tiny_x2_address0),
    .tiny_x2_ce0(grp_forward_pass_2_fu_499_tiny_x2_ce0),
    .tiny_x2_we0(grp_forward_pass_2_fu_499_tiny_x2_we0),
    .tiny_x2_d0(grp_forward_pass_2_fu_499_tiny_x2_d0),
    .tiny_x2_q0(tiny_x2_q0)
);

tracking_update_dual grp_update_dual_fu_517(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_dual_fu_517_ap_start),
    .ap_done(grp_update_dual_fu_517_ap_done),
    .ap_idle(grp_update_dual_fu_517_ap_idle),
    .ap_ready(grp_update_dual_fu_517_ap_ready),
    .y_1_address0(grp_update_dual_fu_517_y_1_address0),
    .y_1_ce0(grp_update_dual_fu_517_y_1_ce0),
    .y_1_we0(grp_update_dual_fu_517_y_1_we0),
    .y_1_d0(grp_update_dual_fu_517_y_1_d0),
    .y_1_q0(y_1_q0),
    .u_1_address0(grp_update_dual_fu_517_u_1_address0),
    .u_1_ce0(grp_update_dual_fu_517_u_1_ce0),
    .u_1_q0(u_1_q0),
    .m1_1_address0(grp_update_dual_fu_517_m1_1_address0),
    .m1_1_ce0(grp_update_dual_fu_517_m1_1_ce0),
    .m1_1_we0(grp_update_dual_fu_517_m1_1_we0),
    .m1_1_d0(grp_update_dual_fu_517_m1_1_d0),
    .m1_1_q0(m1_1_q0),
    .g_1_address0(grp_update_dual_fu_517_g_1_address0),
    .g_1_ce0(grp_update_dual_fu_517_g_1_ce0),
    .g_1_we0(grp_update_dual_fu_517_g_1_we0),
    .g_1_d0(grp_update_dual_fu_517_g_1_d0),
    .g_1_q0(g_1_q0),
    .x_1_address0(grp_update_dual_fu_517_x_1_address0),
    .x_1_ce0(grp_update_dual_fu_517_x_1_ce0),
    .x_1_q0(x_1_q0),
    .s1_1_address0(grp_update_dual_fu_517_s1_1_address0),
    .s1_1_ce0(grp_update_dual_fu_517_s1_1_ce0),
    .s1_1_we0(grp_update_dual_fu_517_s1_1_we0),
    .s1_1_d0(grp_update_dual_fu_517_s1_1_d0),
    .s1_1_q0(s1_1_q0),
    .vnew_1_address0(grp_update_dual_fu_517_vnew_1_address0),
    .vnew_1_ce0(grp_update_dual_fu_517_vnew_1_ce0),
    .vnew_1_q0(vnew_1_q0),
    .znew_1_address0(grp_update_dual_fu_517_znew_1_address0),
    .znew_1_ce0(grp_update_dual_fu_517_znew_1_ce0),
    .znew_1_q0(znew_1_q0)
);

tracking_update_linear_cost grp_update_linear_cost_fu_537(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_fu_537_ap_start),
    .ap_done(grp_update_linear_cost_fu_537_ap_done),
    .ap_idle(grp_update_linear_cost_fu_537_ap_idle),
    .ap_ready(grp_update_linear_cost_fu_537_ap_ready),
    .znew_1_address0(grp_update_linear_cost_fu_537_znew_1_address0),
    .znew_1_ce0(grp_update_linear_cost_fu_537_znew_1_ce0),
    .znew_1_q0(znew_1_q0),
    .y_1_address0(grp_update_linear_cost_fu_537_y_1_address0),
    .y_1_ce0(grp_update_linear_cost_fu_537_y_1_ce0),
    .y_1_q0(y_1_q0),
    .m1_1_address0(grp_update_linear_cost_fu_537_m1_1_address0),
    .m1_1_ce0(grp_update_linear_cost_fu_537_m1_1_ce0),
    .m1_1_we0(grp_update_linear_cost_fu_537_m1_1_we0),
    .m1_1_d0(grp_update_linear_cost_fu_537_m1_1_d0),
    .m1_1_q0(m1_1_q0),
    .tiny_rho(tiny_rho),
    .r_1_address0(grp_update_linear_cost_fu_537_r_1_address0),
    .r_1_ce0(grp_update_linear_cost_fu_537_r_1_ce0),
    .r_1_we0(grp_update_linear_cost_fu_537_r_1_we0),
    .r_1_d0(grp_update_linear_cost_fu_537_r_1_d0),
    .vnew_1_address0(grp_update_linear_cost_fu_537_vnew_1_address0),
    .vnew_1_ce0(grp_update_linear_cost_fu_537_vnew_1_ce0),
    .vnew_1_q0(vnew_1_q0),
    .vnew_1_address1(grp_update_linear_cost_fu_537_vnew_1_address1),
    .vnew_1_ce1(grp_update_linear_cost_fu_537_vnew_1_ce1),
    .vnew_1_q1(vnew_1_q1),
    .g_1_address0(grp_update_linear_cost_fu_537_g_1_address0),
    .g_1_ce0(grp_update_linear_cost_fu_537_g_1_ce0),
    .g_1_q0(g_1_q0),
    .g_1_address1(grp_update_linear_cost_fu_537_g_1_address1),
    .g_1_ce1(grp_update_linear_cost_fu_537_g_1_ce1),
    .g_1_q1(g_1_q1),
    .s1_1_address0(grp_update_linear_cost_fu_537_s1_1_address0),
    .s1_1_ce0(grp_update_linear_cost_fu_537_s1_1_ce0),
    .s1_1_we0(grp_update_linear_cost_fu_537_s1_1_we0),
    .s1_1_d0(grp_update_linear_cost_fu_537_s1_1_d0),
    .s1_1_q0(s1_1_q0),
    .s2_1_address0(grp_update_linear_cost_fu_537_s2_1_address0),
    .s2_1_ce0(grp_update_linear_cost_fu_537_s2_1_ce0),
    .s2_1_we0(grp_update_linear_cost_fu_537_s2_1_we0),
    .s2_1_d0(grp_update_linear_cost_fu_537_s2_1_d0),
    .s2_1_q0(s2_1_q0),
    .q_1_address0(grp_update_linear_cost_fu_537_q_1_address0),
    .q_1_ce0(grp_update_linear_cost_fu_537_q_1_ce0),
    .q_1_we0(grp_update_linear_cost_fu_537_q_1_we0),
    .q_1_d0(grp_update_linear_cost_fu_537_q_1_d0),
    .q_1_q0(q_1_q0),
    .q_1_address1(grp_update_linear_cost_fu_537_q_1_address1),
    .q_1_ce1(grp_update_linear_cost_fu_537_q_1_ce1),
    .q_1_we1(grp_update_linear_cost_fu_537_q_1_we1),
    .q_1_d1(grp_update_linear_cost_fu_537_q_1_d1),
    .q_1_q1(q_1_q1),
    .Xref_1_address0(grp_update_linear_cost_fu_537_Xref_1_address0),
    .Xref_1_ce0(grp_update_linear_cost_fu_537_Xref_1_ce0),
    .Xref_1_q0(Xref_1_q0),
    .Xref_1_address1(grp_update_linear_cost_fu_537_Xref_1_address1),
    .Xref_1_ce1(grp_update_linear_cost_fu_537_Xref_1_ce1),
    .Xref_1_q1(Xref_1_q1),
    .p_1_address0(grp_update_linear_cost_fu_537_p_1_address0),
    .p_1_ce0(grp_update_linear_cost_fu_537_p_1_ce0),
    .p_1_we0(grp_update_linear_cost_fu_537_p_1_we0),
    .p_1_d0(grp_update_linear_cost_fu_537_p_1_d0),
    .p_1_q0(p_1_q0),
    .p_1_address1(grp_update_linear_cost_fu_537_p_1_address1),
    .p_1_ce1(grp_update_linear_cost_fu_537_p_1_ce1),
    .p_1_we1(grp_update_linear_cost_fu_537_p_1_we1),
    .p_1_d1(grp_update_linear_cost_fu_537_p_1_d1),
    .p_1_q1(p_1_q1),
    .tiny_x1_address0(grp_update_linear_cost_fu_537_tiny_x1_address0),
    .tiny_x1_ce0(grp_update_linear_cost_fu_537_tiny_x1_ce0),
    .tiny_x1_we0(grp_update_linear_cost_fu_537_tiny_x1_we0),
    .tiny_x1_d0(grp_update_linear_cost_fu_537_tiny_x1_d0),
    .tiny_x1_q0(tiny_x1_q0),
    .tiny_x2_address0(grp_update_linear_cost_fu_537_tiny_x2_address0),
    .tiny_x2_ce0(grp_update_linear_cost_fu_537_tiny_x2_ce0),
    .tiny_x2_we0(grp_update_linear_cost_fu_537_tiny_x2_we0),
    .tiny_x2_d0(grp_update_linear_cost_fu_537_tiny_x2_d0),
    .tiny_x2_q0(tiny_x2_q0),
    .PinfT_1_address0(grp_update_linear_cost_fu_537_PinfT_1_address0),
    .PinfT_1_ce0(grp_update_linear_cost_fu_537_PinfT_1_ce0),
    .PinfT_1_q0(PinfT_1_q0),
    .PinfT_1_address1(grp_update_linear_cost_fu_537_PinfT_1_address1),
    .PinfT_1_ce1(grp_update_linear_cost_fu_537_PinfT_1_ce1),
    .PinfT_1_q1(PinfT_1_q1),
    .tiny_x3_address0(grp_update_linear_cost_fu_537_tiny_x3_address0),
    .tiny_x3_ce0(grp_update_linear_cost_fu_537_tiny_x3_ce0),
    .tiny_x3_we0(grp_update_linear_cost_fu_537_tiny_x3_we0),
    .tiny_x3_d0(grp_update_linear_cost_fu_537_tiny_x3_d0),
    .tiny_x3_q0(tiny_x3_q0),
    .tiny_Q_address0(grp_update_linear_cost_fu_537_tiny_Q_address0),
    .tiny_Q_ce0(grp_update_linear_cost_fu_537_tiny_Q_ce0),
    .tiny_Q_q0(tiny_Q_q0)
);

tracking_backward_pass_1 grp_backward_pass_1_fu_575(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_backward_pass_1_fu_575_ap_start),
    .ap_done(grp_backward_pass_1_fu_575_ap_done),
    .ap_idle(grp_backward_pass_1_fu_575_ap_idle),
    .ap_ready(grp_backward_pass_1_fu_575_ap_ready),
    .i(trunc_ln163_reg_1947),
    .p_1_address0(grp_backward_pass_1_fu_575_p_1_address0),
    .p_1_ce0(grp_backward_pass_1_fu_575_p_1_ce0),
    .p_1_q0(p_1_q0),
    .p_1_address1(grp_backward_pass_1_fu_575_p_1_address1),
    .p_1_ce1(grp_backward_pass_1_fu_575_p_1_ce1),
    .p_1_q1(p_1_q1),
    .r_1_address0(grp_backward_pass_1_fu_575_r_1_address0),
    .r_1_ce0(grp_backward_pass_1_fu_575_r_1_ce0),
    .r_1_q0(r_1_q0),
    .r_1_address1(grp_backward_pass_1_fu_575_r_1_address1),
    .r_1_ce1(grp_backward_pass_1_fu_575_r_1_ce1),
    .r_1_q1(r_1_q1),
    .d_1_address0(grp_backward_pass_1_fu_575_d_1_address0),
    .d_1_ce0(grp_backward_pass_1_fu_575_d_1_ce0),
    .d_1_we0(grp_backward_pass_1_fu_575_d_1_we0),
    .d_1_d0(grp_backward_pass_1_fu_575_d_1_d0),
    .d_1_q0(d_1_q0),
    .d_1_address1(grp_backward_pass_1_fu_575_d_1_address1),
    .d_1_ce1(grp_backward_pass_1_fu_575_d_1_ce1),
    .d_1_we1(grp_backward_pass_1_fu_575_d_1_we1),
    .d_1_d1(grp_backward_pass_1_fu_575_d_1_d1),
    .d_1_q1(d_1_q1),
    .u1_0_i(u1_0),
    .u1_0_o(grp_backward_pass_1_fu_575_u1_0_o),
    .u1_0_o_ap_vld(grp_backward_pass_1_fu_575_u1_0_o_ap_vld),
    .BdynT_1_address0(grp_backward_pass_1_fu_575_BdynT_1_address0),
    .BdynT_1_ce0(grp_backward_pass_1_fu_575_BdynT_1_ce0),
    .BdynT_1_q0(BdynT_1_q0),
    .BdynT_1_address1(grp_backward_pass_1_fu_575_BdynT_1_address1),
    .BdynT_1_ce1(grp_backward_pass_1_fu_575_BdynT_1_ce1),
    .BdynT_1_q1(BdynT_1_q1),
    .u1_1_i(u1_1),
    .u1_1_o(grp_backward_pass_1_fu_575_u1_1_o),
    .u1_1_o_ap_vld(grp_backward_pass_1_fu_575_u1_1_o_ap_vld),
    .u1_2_i(u1_2),
    .u1_2_o(grp_backward_pass_1_fu_575_u1_2_o),
    .u1_2_o_ap_vld(grp_backward_pass_1_fu_575_u1_2_o_ap_vld),
    .u1_3_i(u1_3),
    .u1_3_o(grp_backward_pass_1_fu_575_u1_3_o),
    .u1_3_o_ap_vld(grp_backward_pass_1_fu_575_u1_3_o_ap_vld),
    .u2_0_i(u2_0),
    .u2_0_o(grp_backward_pass_1_fu_575_u2_0_o),
    .u2_0_o_ap_vld(grp_backward_pass_1_fu_575_u2_0_o_ap_vld),
    .u2_1_i(u2_1),
    .u2_1_o(grp_backward_pass_1_fu_575_u2_1_o),
    .u2_1_o_ap_vld(grp_backward_pass_1_fu_575_u2_1_o_ap_vld),
    .u2_2_i(u2_2),
    .u2_2_o(grp_backward_pass_1_fu_575_u2_2_o),
    .u2_2_o_ap_vld(grp_backward_pass_1_fu_575_u2_2_o_ap_vld),
    .u2_3_i(u2_3),
    .u2_3_o(grp_backward_pass_1_fu_575_u2_3_o),
    .u2_3_o_ap_vld(grp_backward_pass_1_fu_575_u2_3_o_ap_vld),
    .Quu_inv_1_address0(grp_backward_pass_1_fu_575_Quu_inv_1_address0),
    .Quu_inv_1_ce0(grp_backward_pass_1_fu_575_Quu_inv_1_ce0),
    .Quu_inv_1_q0(Quu_inv_1_q0),
    .Quu_inv_1_address1(grp_backward_pass_1_fu_575_Quu_inv_1_address1),
    .Quu_inv_1_ce1(grp_backward_pass_1_fu_575_Quu_inv_1_ce1),
    .Quu_inv_1_q1(Quu_inv_1_q1),
    .grp_fu_743_p_din0(grp_backward_pass_1_fu_575_grp_fu_743_p_din0),
    .grp_fu_743_p_din1(grp_backward_pass_1_fu_575_grp_fu_743_p_din1),
    .grp_fu_743_p_opcode(grp_backward_pass_1_fu_575_grp_fu_743_p_opcode),
    .grp_fu_743_p_dout0(grp_fu_743_p2),
    .grp_fu_743_p_ce(grp_backward_pass_1_fu_575_grp_fu_743_p_ce),
    .grp_fu_2073_p_din0(grp_backward_pass_1_fu_575_grp_fu_2073_p_din0),
    .grp_fu_2073_p_din1(grp_backward_pass_1_fu_575_grp_fu_2073_p_din1),
    .grp_fu_2073_p_opcode(grp_backward_pass_1_fu_575_grp_fu_2073_p_opcode),
    .grp_fu_2073_p_dout0(grp_fu_2073_p2),
    .grp_fu_2073_p_ce(grp_backward_pass_1_fu_575_grp_fu_2073_p_ce)
);

tracking_backward_pass_2 grp_backward_pass_2_fu_606(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_backward_pass_2_fu_606_ap_start),
    .ap_done(grp_backward_pass_2_fu_606_ap_done),
    .ap_idle(grp_backward_pass_2_fu_606_ap_idle),
    .ap_ready(grp_backward_pass_2_fu_606_ap_ready),
    .i(trunc_ln163_reg_1947),
    .p_1_address0(grp_backward_pass_2_fu_606_p_1_address0),
    .p_1_ce0(grp_backward_pass_2_fu_606_p_1_ce0),
    .p_1_we0(grp_backward_pass_2_fu_606_p_1_we0),
    .p_1_d0(grp_backward_pass_2_fu_606_p_1_d0),
    .p_1_q0(p_1_q0),
    .p_1_address1(grp_backward_pass_2_fu_606_p_1_address1),
    .p_1_ce1(grp_backward_pass_2_fu_606_p_1_ce1),
    .p_1_q1(p_1_q1),
    .r_1_address0(grp_backward_pass_2_fu_606_r_1_address0),
    .r_1_ce0(grp_backward_pass_2_fu_606_r_1_ce0),
    .r_1_q0(r_1_q0),
    .r_1_address1(grp_backward_pass_2_fu_606_r_1_address1),
    .r_1_ce1(grp_backward_pass_2_fu_606_r_1_ce1),
    .r_1_q1(r_1_q1),
    .q_1_address0(grp_backward_pass_2_fu_606_q_1_address0),
    .q_1_ce0(grp_backward_pass_2_fu_606_q_1_ce0),
    .q_1_q0(q_1_q0),
    .q_1_address1(grp_backward_pass_2_fu_606_q_1_address1),
    .q_1_ce1(grp_backward_pass_2_fu_606_q_1_ce1),
    .q_1_q1(q_1_q1),
    .AmBKt_1_address0(grp_backward_pass_2_fu_606_AmBKt_1_address0),
    .AmBKt_1_ce0(grp_backward_pass_2_fu_606_AmBKt_1_ce0),
    .AmBKt_1_q0(AmBKt_1_q0),
    .AmBKt_1_address1(grp_backward_pass_2_fu_606_AmBKt_1_address1),
    .AmBKt_1_ce1(grp_backward_pass_2_fu_606_AmBKt_1_ce1),
    .AmBKt_1_q1(AmBKt_1_q1),
    .tiny_x1_address0(grp_backward_pass_2_fu_606_tiny_x1_address0),
    .tiny_x1_ce0(grp_backward_pass_2_fu_606_tiny_x1_ce0),
    .tiny_x1_we0(grp_backward_pass_2_fu_606_tiny_x1_we0),
    .tiny_x1_d0(grp_backward_pass_2_fu_606_tiny_x1_d0),
    .tiny_x1_q0(tiny_x1_q0),
    .KinfT_1_address0(grp_backward_pass_2_fu_606_KinfT_1_address0),
    .KinfT_1_ce0(grp_backward_pass_2_fu_606_KinfT_1_ce0),
    .KinfT_1_q0(KinfT_1_q0),
    .KinfT_1_address1(grp_backward_pass_2_fu_606_KinfT_1_address1),
    .KinfT_1_ce1(grp_backward_pass_2_fu_606_KinfT_1_ce1),
    .KinfT_1_q1(KinfT_1_q1),
    .tiny_x2_address0(grp_backward_pass_2_fu_606_tiny_x2_address0),
    .tiny_x2_ce0(grp_backward_pass_2_fu_606_tiny_x2_ce0),
    .tiny_x2_we0(grp_backward_pass_2_fu_606_tiny_x2_we0),
    .tiny_x2_d0(grp_backward_pass_2_fu_606_tiny_x2_d0),
    .tiny_x2_q0(tiny_x2_q0),
    .tiny_x3_address0(grp_backward_pass_2_fu_606_tiny_x3_address0),
    .tiny_x3_ce0(grp_backward_pass_2_fu_606_tiny_x3_ce0),
    .tiny_x3_we0(grp_backward_pass_2_fu_606_tiny_x3_we0),
    .tiny_x3_d0(grp_backward_pass_2_fu_606_tiny_x3_d0),
    .tiny_x3_q0(tiny_x3_q0),
    .grp_fu_743_p_din0(grp_backward_pass_2_fu_606_grp_fu_743_p_din0),
    .grp_fu_743_p_din1(grp_backward_pass_2_fu_606_grp_fu_743_p_din1),
    .grp_fu_743_p_opcode(grp_backward_pass_2_fu_606_grp_fu_743_p_opcode),
    .grp_fu_743_p_dout0(grp_fu_743_p2),
    .grp_fu_743_p_ce(grp_backward_pass_2_fu_606_grp_fu_743_p_ce),
    .grp_fu_2073_p_din0(grp_backward_pass_2_fu_606_grp_fu_2073_p_din0),
    .grp_fu_2073_p_din1(grp_backward_pass_2_fu_606_grp_fu_2073_p_din1),
    .grp_fu_2073_p_opcode(grp_backward_pass_2_fu_606_grp_fu_2073_p_opcode),
    .grp_fu_2073_p_dout0(grp_fu_2073_p2),
    .grp_fu_2073_p_ce(grp_backward_pass_2_fu_606_grp_fu_2073_p_ce)
);

tracking_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2 grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_ap_start),
    .ap_done(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_ap_done),
    .ap_idle(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_ap_idle),
    .ap_ready(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_ap_ready),
    .x_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_x_1_address0),
    .x_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_x_1_ce0),
    .x_1_q0(x_1_q0),
    .vnew_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_vnew_1_address0),
    .vnew_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_vnew_1_ce0),
    .vnew_1_q0(vnew_1_q0),
    .s1_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_s1_1_address0),
    .s1_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_s1_1_ce0),
    .s1_1_we0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_s1_1_we0),
    .s1_1_d0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_s1_1_d0),
    .grp_fu_2073_p_din0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_grp_fu_2073_p_din0),
    .grp_fu_2073_p_din1(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_grp_fu_2073_p_din1),
    .grp_fu_2073_p_opcode(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_grp_fu_2073_p_opcode),
    .grp_fu_2073_p_dout0(grp_fu_2073_p2),
    .grp_fu_2073_p_ce(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_grp_fu_2073_p_ce)
);

tracking_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219 grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_ap_start),
    .ap_done(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_ap_done),
    .ap_idle(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_ap_idle),
    .ap_ready(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_ap_ready),
    .u_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_u_1_address0),
    .u_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_u_1_ce0),
    .u_1_q0(u_1_q0),
    .znew_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_znew_1_address0),
    .znew_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_znew_1_ce0),
    .znew_1_q0(znew_1_q0),
    .m1_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_m1_1_address0),
    .m1_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_m1_1_ce0),
    .m1_1_we0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_m1_1_we0),
    .m1_1_d0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_m1_1_d0),
    .grp_fu_743_p_din0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_grp_fu_743_p_din0),
    .grp_fu_743_p_din1(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_grp_fu_743_p_din1),
    .grp_fu_743_p_opcode(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_grp_fu_743_p_opcode),
    .grp_fu_743_p_dout0(grp_fu_743_p2),
    .grp_fu_743_p_ce(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_grp_fu_743_p_ce)
);

tracking_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2 grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_ap_start),
    .ap_done(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_ap_done),
    .ap_idle(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_ap_idle),
    .ap_ready(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_ap_ready),
    .s1_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_s1_1_address0),
    .s1_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_s1_1_ce0),
    .s1_1_q0(s1_1_q0),
    .s2_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_s2_1_address0),
    .s2_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_s2_1_ce0),
    .s2_1_we0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_s2_1_we0),
    .s2_1_d0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_s2_1_d0)
);

tracking_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220 grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_ap_start),
    .ap_done(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_ap_done),
    .ap_idle(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_ap_idle),
    .ap_ready(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_ap_ready),
    .m1_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_m1_1_address0),
    .m1_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_m1_1_ce0),
    .m1_1_q0(m1_1_q0),
    .m2_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_m2_1_address0),
    .m2_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_m2_1_ce0),
    .m2_1_we0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_m2_1_we0),
    .m2_1_d0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_m2_1_d0)
);

tracking_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2 grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_ap_start),
    .ap_done(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_ap_done),
    .ap_idle(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_ap_idle),
    .ap_ready(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_ap_ready),
    .max_1_out(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_max_1_out),
    .max_1_out_ap_vld(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_max_1_out_ap_vld),
    .s2_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_s2_1_address0),
    .s2_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_s2_1_ce0),
    .s2_1_q0(s2_1_q0)
);

tracking_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216 grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_ap_start),
    .ap_done(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_ap_done),
    .ap_idle(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_ap_idle),
    .ap_ready(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_ap_ready),
    .v_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_v_1_address0),
    .v_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_v_1_ce0),
    .v_1_q0(v_1_q0),
    .vnew_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_vnew_1_address0),
    .vnew_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_vnew_1_ce0),
    .vnew_1_q0(vnew_1_q0),
    .s1_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_s1_1_address0),
    .s1_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_s1_1_ce0),
    .s1_1_we0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_s1_1_we0),
    .s1_1_d0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_s1_1_d0),
    .grp_fu_743_p_din0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_grp_fu_743_p_din0),
    .grp_fu_743_p_din1(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_grp_fu_743_p_din1),
    .grp_fu_743_p_opcode(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_grp_fu_743_p_opcode),
    .grp_fu_743_p_dout0(grp_fu_743_p2),
    .grp_fu_743_p_ce(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_grp_fu_743_p_ce)
);

tracking_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221 grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_ap_start),
    .ap_done(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_ap_done),
    .ap_idle(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_ap_idle),
    .ap_ready(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_ap_ready),
    .max_3_out(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_max_3_out),
    .max_3_out_ap_vld(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_max_3_out_ap_vld),
    .m2_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_m2_1_address0),
    .m2_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_m2_1_ce0),
    .m2_1_q0(m2_1_q0)
);

tracking_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222 grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_ap_start),
    .ap_done(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_ap_done),
    .ap_idle(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_ap_idle),
    .ap_ready(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_ap_ready),
    .z_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_z_1_address0),
    .z_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_z_1_ce0),
    .z_1_q0(z_1_q0),
    .znew_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_znew_1_address0),
    .znew_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_znew_1_ce0),
    .znew_1_q0(znew_1_q0),
    .m1_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_m1_1_address0),
    .m1_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_m1_1_ce0),
    .m1_1_we0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_m1_1_we0),
    .m1_1_d0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_m1_1_d0),
    .grp_fu_2073_p_din0(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_grp_fu_2073_p_din0),
    .grp_fu_2073_p_din1(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_grp_fu_2073_p_din1),
    .grp_fu_2073_p_opcode(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_grp_fu_2073_p_opcode),
    .grp_fu_2073_p_dout0(grp_fu_2073_p2),
    .grp_fu_2073_p_ce(grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_grp_fu_2073_p_ce)
);

tracking_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217 grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_ap_start),
    .ap_done(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_ap_done),
    .ap_idle(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_ap_idle),
    .ap_ready(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_ap_ready),
    .s1_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_s1_1_address0),
    .s1_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_s1_1_ce0),
    .s1_1_q0(s1_1_q0),
    .s2_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_s2_1_address0),
    .s2_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_s2_1_ce0),
    .s2_1_we0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_s2_1_we0),
    .s2_1_d0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_s2_1_d0)
);

tracking_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223 grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_ap_start),
    .ap_done(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_ap_done),
    .ap_idle(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_ap_idle),
    .ap_ready(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_ap_ready),
    .m1_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_m1_1_address0),
    .m1_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_m1_1_ce0),
    .m1_1_q0(m1_1_q0),
    .m2_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_m2_1_address0),
    .m2_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_m2_1_ce0),
    .m2_1_we0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_m2_1_we0),
    .m2_1_d0(grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_m2_1_d0)
);

tracking_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218 grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_ap_start),
    .ap_done(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_ap_done),
    .ap_idle(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_ap_idle),
    .ap_ready(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_ap_ready),
    .max_2_out(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_max_2_out),
    .max_2_out_ap_vld(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_max_2_out_ap_vld),
    .s2_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_s2_1_address0),
    .s2_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_s2_1_ce0),
    .s2_1_q0(s2_1_q0)
);

tracking_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224 grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_ap_start),
    .ap_done(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_ap_done),
    .ap_idle(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_ap_idle),
    .ap_ready(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_ap_ready),
    .max_4_out(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_max_4_out),
    .max_4_out_ap_vld(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_max_4_out_ap_vld),
    .m2_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_m2_1_address0),
    .m2_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_m2_1_ce0),
    .m2_1_q0(m2_1_q0)
);

tracking_tiny_solve_Pipeline_VITIS_LOOP_100_1 grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_ap_start),
    .ap_done(grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_ap_done),
    .ap_idle(grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_ap_idle),
    .ap_ready(grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_ap_ready),
    .vnew_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_vnew_1_address0),
    .vnew_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_vnew_1_ce0),
    .vnew_1_q0(vnew_1_q0),
    .v_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_v_1_address0),
    .v_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_v_1_ce0),
    .v_1_we0(grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_v_1_we0),
    .v_1_d0(grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_v_1_d0)
);

tracking_tiny_solve_Pipeline_VITIS_LOOP_100_125 grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_ap_start),
    .ap_done(grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_ap_done),
    .ap_idle(grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_ap_idle),
    .ap_ready(grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_ap_ready),
    .znew_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_znew_1_address0),
    .znew_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_znew_1_ce0),
    .znew_1_q0(znew_1_q0),
    .z_1_address0(grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_z_1_address0),
    .z_1_ce0(grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_z_1_ce0),
    .z_1_we0(grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_z_1_we0),
    .z_1_d0(grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_z_1_d0)
);

tracking_faddfsub_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_2_full_dsp_1_U402(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_743_p0),
    .din1(grp_fu_743_p1),
    .opcode(grp_fu_743_opcode),
    .ce(grp_fu_743_ce),
    .dout(grp_fu_743_p2)
);

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U403(
    .din0(grp_fu_750_p0),
    .din1(grp_fu_750_p1),
    .dout(grp_fu_750_p2)
);

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U404(
    .din0(grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_max_4_out),
    .din1(tiny_rho),
    .dout(mul_i1_fu_756_p2)
);

tracking_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U405(
    .din0(grp_fu_760_p0),
    .din1(grp_fu_760_p1),
    .opcode(5'd4),
    .dout(grp_fu_760_p2)
);

tracking_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U406(
    .din0(grp_fu_764_p0),
    .din1(grp_fu_764_p1),
    .opcode(5'd4),
    .dout(grp_fu_764_p2)
);

tracking_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U407(
    .din0(reg_800),
    .din1(reg_804),
    .din2(reg_808),
    .din3(reg_812),
    .din4(tmp_s_fu_1045_p5),
    .dout(tmp_s_fu_1045_p6)
);

tracking_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U408(
    .din0(reg_827),
    .din1(reg_831),
    .din2(reg_835),
    .din3(reg_839),
    .din4(tmp_11_fu_1113_p5),
    .dout(tmp_11_fu_1113_p6)
);

tracking_srem_32ns_2ns_1_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
srem_32ns_2ns_1_36_seq_1_U409(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1242_ap_start),
    .done(grp_fu_1242_ap_done),
    .din0(tiny_iter_i),
    .din1(grp_fu_1242_p1),
    .ce(grp_fu_1242_ce),
    .dout(grp_fu_1242_p2)
);

tracking_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U410(
    .din0(reg_800),
    .din1(reg_804),
    .din2(reg_808),
    .din3(reg_812),
    .din4(tmp_12_fu_1384_p5),
    .dout(tmp_12_fu_1384_p6)
);

tracking_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U411(
    .din0(reg_827),
    .din1(reg_831),
    .din2(reg_835),
    .din3(reg_839),
    .din4(tmp_13_fu_1452_p5),
    .dout(tmp_13_fu_1452_p6)
);

tracking_faddfsub_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_2_full_dsp_1_U412(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2073_p0),
    .din1(grp_fu_2073_p1),
    .opcode(grp_fu_2073_opcode),
    .ce(grp_fu_2073_ce),
    .dout(grp_fu_2073_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_backward_pass_1_fu_575_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_fu_1169_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
            grp_backward_pass_1_fu_575_ap_start_reg <= 1'b1;
        end else if ((grp_backward_pass_1_fu_575_ap_ready == 1'b1)) begin
            grp_backward_pass_1_fu_575_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_backward_pass_2_fu_606_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            grp_backward_pass_2_fu_606_ap_start_reg <= 1'b1;
        end else if ((grp_backward_pass_2_fu_606_ap_ready == 1'b1)) begin
            grp_backward_pass_2_fu_606_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_forward_pass_2_fu_499_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state32) & (icmp_ln72_1_fu_1436_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state11) & (icmp_ln72_fu_1097_p2 == 1'd1)))) begin
            grp_forward_pass_2_fu_499_ap_start_reg <= 1'b1;
        end else if ((grp_forward_pass_2_fu_499_ap_ready == 1'b1)) begin
            grp_forward_pass_2_fu_499_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state79) & ((((icmp_ln236_reg_1935 == 1'd1) & (1'd0 == and_ln255_reg_2066)) | ((icmp_ln236_reg_1935 == 1'd1) & (1'd0 == and_ln257_fu_1787_p2))) | ((trunc_ln248_reg_2050 == 1'd1) & (icmp_ln236_reg_1935 == 1'd1))))) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_ap_start_reg <= 1'b1;
        end else if ((grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_ap_ready == 1'b1)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state79) & ((((icmp_ln236_reg_1935 == 1'd1) & (1'd0 == and_ln255_reg_2066)) | ((icmp_ln236_reg_1935 == 1'd1) & (1'd0 == and_ln257_fu_1787_p2))) | ((trunc_ln248_reg_2050 == 1'd1) & (icmp_ln236_reg_1935 == 1'd1))))) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_ap_start_reg <= 1'b1;
        end else if ((grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_ap_ready == 1'b1)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state72)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_ap_start_reg <= 1'b1;
        end else if ((grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_ap_ready == 1'b1)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_ap_start_reg <= 1'b0;
    end else begin
        if (((trunc_ln248_fu_1481_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state68))) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_ap_start_reg <= 1'b1;
        end else if ((grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_ap_ready == 1'b1)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state72)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_ap_start_reg <= 1'b1;
        end else if ((grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_ap_ready == 1'b1)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_ap_start_reg <= 1'b0;
    end else begin
        if (((trunc_ln248_fu_1481_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state68))) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_ap_start_reg <= 1'b1;
        end else if ((grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_ap_ready == 1'b1)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state76)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_ap_start_reg <= 1'b1;
        end else if ((grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_ap_ready == 1'b1)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state72)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_ap_start_reg <= 1'b1;
        end else if ((grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_ap_ready == 1'b1)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state76)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_ap_start_reg <= 1'b1;
        end else if ((grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_ap_ready == 1'b1)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state72)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_ap_start_reg <= 1'b1;
        end else if ((grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_ap_ready == 1'b1)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state74)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_ap_start_reg <= 1'b1;
        end else if ((grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_ap_ready == 1'b1)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state70)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_ap_start_reg <= 1'b1;
        end else if ((grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_ap_ready == 1'b1)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state74)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_ap_start_reg <= 1'b1;
        end else if ((grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_ap_ready == 1'b1)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state70)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_ap_start_reg <= 1'b1;
        end else if ((grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_ap_ready == 1'b1)) begin
            grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_dual_fu_517_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state14))) begin
            grp_update_dual_fu_517_ap_start_reg <= 1'b1;
        end else if ((grp_update_dual_fu_517_ap_ready == 1'b1)) begin
            grp_update_dual_fu_517_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_fu_537_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state16))) begin
            grp_update_linear_cost_fu_537_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_fu_537_ap_ready == 1'b1)) begin
            grp_update_linear_cost_fu_537_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_slack_fu_467_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln174_1_fu_1218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln174_fu_892_p2 == 1'd1)))) begin
            grp_update_slack_fu_467_ap_start_reg <= 1'b1;
        end else if ((grp_update_slack_fu_467_ap_ready == 1'b1)) begin
            grp_update_slack_fu_467_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_1_fu_1248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        add1213_i_i_i_i_reg_433 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        add1213_i_i_i_i_reg_433 <= grp_fu_743_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_fu_909_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add1213_i_i_i_reg_354 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        add1213_i_i_i_reg_354 <= grp_fu_743_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln174_fu_892_p2 == 1'd0))) begin
        i_33_reg_332 <= 3'd0;
    end else if (((icmp_ln135_fu_969_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_33_reg_332 <= add_ln133_reg_1873;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_backward_pass_2_fu_606_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        i_34_reg_388 <= i_40_reg_1953;
    end else if (((icmp_ln236_fu_1157_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        i_34_reg_388 <= 5'd8;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_35_fu_224 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln72_fu_1097_p2 == 1'd1))) begin
        i_35_fu_224 <= add_ln174_reg_1858;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln174_1_fu_1218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        i_37_reg_411 <= 3'd0;
    end else if (((icmp_ln135_1_fu_1308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        i_37_reg_411 <= add_ln133_1_reg_1988;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_1169_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        i_41_reg_399 <= 4'd0;
    end else if (((grp_forward_pass_2_fu_499_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        i_41_reg_399 <= add_ln174_1_reg_1972;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln174_fu_892_p2 == 1'd1))) begin
        i_fu_244 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state79) & ((((icmp_ln236_reg_1935 == 1'd1) & (1'd0 == and_ln255_reg_2066)) | ((icmp_ln236_reg_1935 == 1'd1) & (1'd0 == and_ln257_fu_1787_p2))) | ((trunc_ln248_reg_2050 == 1'd1) & (icmp_ln236_reg_1935 == 1'd1))))) begin
        i_fu_244 <= i_42_reg_1939;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_fu_909_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_10_reg_343 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_10_reg_343 <= add_ln135_reg_1895;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        j_11_reg_377 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln72_fu_1097_p2 == 1'd0))) begin
        j_11_reg_377 <= add_ln72_fu_1103_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_1_fu_1248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
        j_12_reg_445 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        j_12_reg_445 <= add_ln177_1_reg_2028;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_1_fu_1248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        j_13_reg_422 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        j_13_reg_422 <= add_ln135_1_reg_2010;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_1_fu_1368_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        j_14_reg_456 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state32) & (icmp_ln72_1_fu_1436_p2 == 1'd0))) begin
        j_14_reg_456 <= add_ln72_1_fu_1442_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_fu_909_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_366 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        j_reg_366 <= add_ln177_reg_1913;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln135_fu_969_p2 == 1'd1) & (trunc_ln134_reg_1878 == 2'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        u1_0 <= add1213_i_i_i_reg_354;
    end else if (((icmp_ln135_1_fu_1308_p2 == 1'd1) & (trunc_ln134_1_reg_1993 == 2'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        u1_0 <= add1213_i_i_i_i_reg_433;
    end else if (((grp_backward_pass_1_fu_575_u1_0_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        u1_0 <= grp_backward_pass_1_fu_575_u1_0_o;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln135_fu_969_p2 == 1'd1) & (trunc_ln134_reg_1878 == 2'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        u1_1 <= add1213_i_i_i_reg_354;
    end else if (((icmp_ln135_1_fu_1308_p2 == 1'd1) & (trunc_ln134_1_reg_1993 == 2'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        u1_1 <= add1213_i_i_i_i_reg_433;
    end else if (((grp_backward_pass_1_fu_575_u1_1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        u1_1 <= grp_backward_pass_1_fu_575_u1_1_o;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln135_fu_969_p2 == 1'd1) & (trunc_ln134_reg_1878 == 2'd2) & (1'b1 == ap_CS_fsm_state4))) begin
        u1_2 <= add1213_i_i_i_reg_354;
    end else if (((icmp_ln135_1_fu_1308_p2 == 1'd1) & (trunc_ln134_1_reg_1993 == 2'd2) & (1'b1 == ap_CS_fsm_state25))) begin
        u1_2 <= add1213_i_i_i_i_reg_433;
    end else if (((grp_backward_pass_1_fu_575_u1_2_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        u1_2 <= grp_backward_pass_1_fu_575_u1_2_o;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln135_fu_969_p2 == 1'd1) & (trunc_ln134_reg_1878 == 2'd3) & (1'b1 == ap_CS_fsm_state4))) begin
        u1_3 <= add1213_i_i_i_reg_354;
    end else if (((icmp_ln135_1_fu_1308_p2 == 1'd1) & (trunc_ln134_1_reg_1993 == 2'd3) & (1'b1 == ap_CS_fsm_state25))) begin
        u1_3 <= add1213_i_i_i_i_reg_433;
    end else if (((grp_backward_pass_1_fu_575_u1_3_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        u1_3 <= grp_backward_pass_1_fu_575_u1_3_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((trunc_ln178_1_reg_1918 == 2'd0) & (1'b1 == ap_CS_fsm_state10)) | ((trunc_ln178_3_reg_2033 == 2'd0) & (1'b1 == ap_CS_fsm_state31)))) begin
        u2_0 <= grp_fu_743_p2;
    end else if (((grp_backward_pass_1_fu_575_u2_0_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        u2_0 <= grp_backward_pass_1_fu_575_u2_0_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((trunc_ln178_1_reg_1918 == 2'd1) & (1'b1 == ap_CS_fsm_state10)) | ((trunc_ln178_3_reg_2033 == 2'd1) & (1'b1 == ap_CS_fsm_state31)))) begin
        u2_1 <= grp_fu_743_p2;
    end else if (((grp_backward_pass_1_fu_575_u2_1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        u2_1 <= grp_backward_pass_1_fu_575_u2_1_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((trunc_ln178_1_reg_1918 == 2'd2) & (1'b1 == ap_CS_fsm_state10)) | ((trunc_ln178_3_reg_2033 == 2'd2) & (1'b1 == ap_CS_fsm_state31)))) begin
        u2_2 <= grp_fu_743_p2;
    end else if (((grp_backward_pass_1_fu_575_u2_2_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        u2_2 <= grp_backward_pass_1_fu_575_u2_2_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((trunc_ln178_1_reg_1918 == 2'd3) & (1'b1 == ap_CS_fsm_state10)) | ((trunc_ln178_3_reg_2033 == 2'd3) & (1'b1 == ap_CS_fsm_state31)))) begin
        u2_3 <= grp_fu_743_p2;
    end else if (((grp_backward_pass_1_fu_575_u2_3_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        u2_3 <= grp_backward_pass_1_fu_575_u2_3_o;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        add_ln133_1_reg_1988 <= add_ln133_1_fu_1254_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln133_reg_1873 <= add_ln133_fu_915_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        add_ln135_1_reg_2010 <= add_ln135_1_fu_1314_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln135_reg_1895 <= add_ln135_fu_975_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        add_ln174_1_reg_1972 <= add_ln174_1_fu_1224_p2;
        sub_ln136_1_reg_1964[6 : 2] <= sub_ln136_1_fu_1212_p2[6 : 2];
        tmp_18_reg_1958[5 : 2] <= tmp_18_fu_1192_p3[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln174_reg_1858 <= add_ln174_fu_898_p2;
        i_38_reg_1839 <= i_35_fu_224;
        sub_ln136_reg_1850[6 : 2] <= sub_ln136_fu_886_p2[6 : 2];
        tmp_16_reg_1844[5 : 2] <= tmp_16_fu_866_p3[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        add_ln177_1_reg_2028 <= add_ln177_1_fu_1374_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln177_reg_1913 <= add_ln177_fu_1035_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        and_ln255_reg_2066 <= and_ln255_fu_1645_p2;
        mul_i1_reg_2060 <= mul_i1_fu_756_p2;
        mul_i_reg_2054 <= grp_fu_750_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_fu_909_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_107_reg_1882[5 : 2] <= empty_107_fu_945_p2[5 : 2];
        trunc_ln134_reg_1878 <= trunc_ln134_fu_921_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_1_fu_1248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        empty_114_reg_1997[5 : 2] <= empty_114_fu_1284_p2[5 : 2];
        trunc_ln134_1_reg_1993 <= trunc_ln134_1_fu_1260_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_1169_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        i_40_reg_1953 <= i_40_fu_1182_p2;
        trunc_ln163_reg_1947 <= trunc_ln163_fu_1177_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_42_reg_1939 <= i_42_fu_1163_p2;
        icmp_ln236_reg_1935 <= icmp_ln236_fu_1157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln133_1_fu_1248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24)) | ((icmp_ln133_fu_909_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        reg_800 <= u1_0;
        reg_804 <= u1_1;
        reg_808 <= u1_2;
        reg_812 <= u1_3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_816 <= grp_fu_750_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln177_1_fu_1368_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29)) | ((icmp_ln177_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8)))) begin
        reg_827 <= u2_0;
        reg_831 <= u2_1;
        reg_835 <= u2_2;
        reg_839 <= u2_3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_1_fu_1368_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state29))) begin
        tmp_12_reg_2037 <= tmp_12_fu_1384_p6;
        trunc_ln178_3_reg_2033 <= trunc_ln178_3_fu_1380_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_fu_1029_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_s_reg_1922 <= tmp_s_fu_1045_p6;
        trunc_ln178_1_reg_1918 <= trunc_ln178_1_fu_1041_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        trunc_ln248_reg_2050 <= trunc_ln248_fu_1481_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        Adyn_1_ce0 = grp_forward_pass_2_fu_499_Adyn_1_ce0;
    end else begin
        Adyn_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        Adyn_1_ce1 = grp_forward_pass_2_fu_499_Adyn_1_ce1;
    end else begin
        Adyn_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        Bdyn_1_ce0 = grp_forward_pass_2_fu_499_Bdyn_1_ce0;
    end else begin
        Bdyn_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        Bdyn_1_ce1 = grp_forward_pass_2_fu_499_Bdyn_1_ce1;
    end else begin
        Bdyn_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        Kinf_1_address0 = zext_ln136_12_fu_1325_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Kinf_1_address0 = zext_ln136_fu_986_p1;
    end else begin
        Kinf_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state4))) begin
        Kinf_1_ce0 = 1'b1;
    end else begin
        Kinf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        PinfT_1_ce0 = grp_update_linear_cost_fu_537_PinfT_1_ce0;
    end else begin
        PinfT_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        PinfT_1_ce1 = grp_update_linear_cost_fu_537_PinfT_1_ce1;
    end else begin
        PinfT_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        Xref_1_ce0 = grp_update_linear_cost_fu_537_Xref_1_ce0;
    end else begin
        Xref_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        Xref_1_ce1 = grp_update_linear_cost_fu_537_Xref_1_ce1;
    end else begin
        Xref_1_ce1 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((grp_forward_pass_2_fu_499_ap_done == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_update_slack_fu_467_ap_done == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if ((grp_update_dual_fu_517_ap_done == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((grp_update_linear_cost_fu_537_ap_done == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_backward_pass_1_fu_575_ap_done == 1'b0)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

assign ap_ST_fsm_state21_blk = 1'b0;

always @ (*) begin
    if ((grp_backward_pass_2_fu_606_ap_done == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

always @ (*) begin
    if ((grp_forward_pass_2_fu_499_ap_done == 1'b0)) begin
        ap_ST_fsm_state33_blk = 1'b1;
    end else begin
        ap_ST_fsm_state33_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_update_slack_fu_467_ap_done == 1'b0)) begin
        ap_ST_fsm_state34_blk = 1'b1;
    end else begin
        ap_ST_fsm_state34_blk = 1'b0;
    end
end

assign ap_ST_fsm_state35_blk = 1'b0;

always @ (*) begin
    if ((grp_update_dual_fu_517_ap_done == 1'b0)) begin
        ap_ST_fsm_state36_blk = 1'b1;
    end else begin
        ap_ST_fsm_state36_blk = 1'b0;
    end
end

assign ap_ST_fsm_state37_blk = 1'b0;

always @ (*) begin
    if ((grp_update_linear_cost_fu_537_ap_done == 1'b0)) begin
        ap_ST_fsm_state38_blk = 1'b1;
    end else begin
        ap_ST_fsm_state38_blk = 1'b0;
    end
end

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state69_on_subcall_done)) begin
        ap_ST_fsm_state69_blk = 1'b1;
    end else begin
        ap_ST_fsm_state69_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state71_on_subcall_done)) begin
        ap_ST_fsm_state71_blk = 1'b1;
    end else begin
        ap_ST_fsm_state71_blk = 1'b0;
    end
end

assign ap_ST_fsm_state72_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state73_on_subcall_done)) begin
        ap_ST_fsm_state73_blk = 1'b1;
    end else begin
        ap_ST_fsm_state73_blk = 1'b0;
    end
end

assign ap_ST_fsm_state74_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state75_on_subcall_done)) begin
        ap_ST_fsm_state75_blk = 1'b1;
    end else begin
        ap_ST_fsm_state75_blk = 1'b0;
    end
end

assign ap_ST_fsm_state76_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state77_on_subcall_done)) begin
        ap_ST_fsm_state77_blk = 1'b1;
    end else begin
        ap_ST_fsm_state77_blk = 1'b0;
    end
end

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state80_on_subcall_done)) begin
        ap_ST_fsm_state80_blk = 1'b1;
    end else begin
        ap_ST_fsm_state80_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state79) & ((icmp_ln236_reg_1935 == 1'd0) | ((trunc_ln248_reg_2050 == 1'd0) & (1'd1 == and_ln255_reg_2066) & (1'd1 == and_ln257_fu_1787_p2)))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state79) & ((icmp_ln236_reg_1935 == 1'd0) | ((trunc_ln248_reg_2050 == 1'd0) & (1'd1 == and_ln255_reg_2066) & (1'd1 == and_ln257_fu_1787_p2))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        d_1_address0 = zext_ln178_3_fu_1363_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        d_1_address0 = zext_ln178_1_fu_1024_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        d_1_address0 = grp_backward_pass_1_fu_575_d_1_address0;
    end else begin
        d_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state8))) begin
        d_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        d_1_ce0 = grp_backward_pass_1_fu_575_d_1_ce0;
    end else begin
        d_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        d_1_ce1 = grp_backward_pass_1_fu_575_d_1_ce1;
    end else begin
        d_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        d_1_we0 = grp_backward_pass_1_fu_575_d_1_we0;
    end else begin
        d_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        d_1_we1 = grp_backward_pass_1_fu_575_d_1_we1;
    end else begin
        d_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        g_1_address0 = grp_update_linear_cost_fu_537_g_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        g_1_address0 = grp_update_dual_fu_517_g_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        g_1_address0 = grp_update_slack_fu_467_g_1_address0;
    end else begin
        g_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        g_1_ce0 = grp_update_linear_cost_fu_537_g_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        g_1_ce0 = grp_update_dual_fu_517_g_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        g_1_ce0 = grp_update_slack_fu_467_g_1_ce0;
    end else begin
        g_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        g_1_ce1 = grp_update_linear_cost_fu_537_g_1_ce1;
    end else begin
        g_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        g_1_we0 = grp_update_dual_fu_517_g_1_we0;
    end else begin
        g_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_forward_pass_2_fu_499_i = i_41_reg_399;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_forward_pass_2_fu_499_i = i_38_reg_1839;
    end else begin
        grp_forward_pass_2_fu_499_i = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln174_1_fu_1218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_1242_ap_start = 1'b1;
    end else begin
        grp_fu_1242_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34))) begin
        grp_fu_1242_ce = 1'b1;
    end else begin
        grp_fu_1242_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        grp_fu_2073_ce = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_grp_fu_2073_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        grp_fu_2073_ce = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_grp_fu_2073_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_2073_ce = grp_backward_pass_2_fu_606_grp_fu_2073_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_2073_ce = grp_backward_pass_1_fu_575_grp_fu_2073_p_ce;
    end else begin
        grp_fu_2073_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        grp_fu_2073_opcode = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_grp_fu_2073_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        grp_fu_2073_opcode = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_grp_fu_2073_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_2073_opcode = grp_backward_pass_2_fu_606_grp_fu_2073_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_2073_opcode = grp_backward_pass_1_fu_575_grp_fu_2073_p_opcode;
    end else begin
        grp_fu_2073_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        grp_fu_2073_p0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_grp_fu_2073_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        grp_fu_2073_p0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_grp_fu_2073_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_2073_p0 = grp_backward_pass_2_fu_606_grp_fu_2073_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_2073_p0 = grp_backward_pass_1_fu_575_grp_fu_2073_p_din0;
    end else begin
        grp_fu_2073_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        grp_fu_2073_p1 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_grp_fu_2073_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        grp_fu_2073_p1 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_grp_fu_2073_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_2073_p1 = grp_backward_pass_2_fu_606_grp_fu_2073_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_2073_p1 = grp_backward_pass_1_fu_575_grp_fu_2073_p_din1;
    end else begin
        grp_fu_2073_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        grp_fu_743_ce = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_grp_fu_743_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        grp_fu_743_ce = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_grp_fu_743_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_743_ce = grp_backward_pass_2_fu_606_grp_fu_743_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_743_ce = grp_backward_pass_1_fu_575_grp_fu_743_p_ce;
    end else begin
        grp_fu_743_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        grp_fu_743_opcode = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_grp_fu_743_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        grp_fu_743_opcode = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_grp_fu_743_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_743_opcode = grp_backward_pass_2_fu_606_grp_fu_743_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_743_opcode = grp_backward_pass_1_fu_575_grp_fu_743_p_opcode;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_743_opcode = 2'd0;
    end else begin
        grp_fu_743_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        grp_fu_743_p0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_grp_fu_743_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        grp_fu_743_p0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_grp_fu_743_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_743_p0 = grp_backward_pass_2_fu_606_grp_fu_743_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_743_p0 = grp_backward_pass_1_fu_575_grp_fu_743_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_743_p0 = tmp_12_reg_2037;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_743_p0 = add1213_i_i_i_i_reg_433;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_743_p0 = tmp_s_reg_1922;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_743_p0 = add1213_i_i_i_reg_354;
    end else begin
        grp_fu_743_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        grp_fu_743_p1 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_grp_fu_743_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        grp_fu_743_p1 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_grp_fu_743_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_743_p1 = grp_backward_pass_2_fu_606_grp_fu_743_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_743_p1 = grp_backward_pass_1_fu_575_grp_fu_743_p_din1;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_743_p1 = d_1_q0;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_743_p1 = reg_816;
    end else begin
        grp_fu_743_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_750_p0 = grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_max_2_out;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_750_p0 = Kinf_1_q0;
    end else begin
        grp_fu_750_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_750_p1 = tiny_rho;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_750_p1 = x_1_q0;
    end else begin
        grp_fu_750_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_fu_760_p0 = mul_i_reg_2054;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_760_p0 = grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_max_1_out;
    end else begin
        grp_fu_760_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_fu_760_p1 = tiny_abs_dua_tol;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_760_p1 = tiny_abs_pri_tol;
    end else begin
        grp_fu_760_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_fu_764_p0 = mul_i1_reg_2060;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_764_p0 = grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_max_3_out;
    end else begin
        grp_fu_764_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_fu_764_p1 = tiny_abs_dua_tol;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_764_p1 = tiny_abs_pri_tol;
    end else begin
        grp_fu_764_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        m1_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_m1_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        m1_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_m1_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        m1_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_m1_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        m1_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_m1_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        m1_1_address0 = grp_update_linear_cost_fu_537_m1_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        m1_1_address0 = grp_update_dual_fu_517_m1_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        m1_1_address0 = grp_update_slack_fu_467_m1_1_address0;
    end else begin
        m1_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        m1_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_m1_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        m1_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_m1_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        m1_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_m1_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        m1_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_m1_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        m1_1_ce0 = grp_update_linear_cost_fu_537_m1_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        m1_1_ce0 = grp_update_dual_fu_517_m1_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        m1_1_ce0 = grp_update_slack_fu_467_m1_1_ce0;
    end else begin
        m1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        m1_1_d0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_m1_1_d0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        m1_1_d0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_m1_1_d0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        m1_1_d0 = grp_update_linear_cost_fu_537_m1_1_d0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        m1_1_d0 = grp_update_dual_fu_517_m1_1_d0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        m1_1_d0 = grp_update_slack_fu_467_m1_1_d0;
    end else begin
        m1_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        m1_1_we0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_m1_1_we0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        m1_1_we0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_m1_1_we0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        m1_1_we0 = grp_update_linear_cost_fu_537_m1_1_we0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        m1_1_we0 = grp_update_dual_fu_517_m1_1_we0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        m1_1_we0 = grp_update_slack_fu_467_m1_1_we0;
    end else begin
        m1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        m2_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_m2_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        m2_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_m2_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        m2_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_m2_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        m2_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_m2_1_address0;
    end else begin
        m2_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        m2_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_m2_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        m2_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_m2_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        m2_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_m2_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        m2_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_m2_1_ce0;
    end else begin
        m2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        m2_1_d0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_m2_1_d0;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        m2_1_d0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_m2_1_d0;
    end else begin
        m2_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        m2_1_we0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_m2_1_we0;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        m2_1_we0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_m2_1_we0;
    end else begin
        m2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        p_1_address0 = grp_backward_pass_2_fu_606_p_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        p_1_address0 = grp_backward_pass_1_fu_575_p_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        p_1_address0 = grp_update_linear_cost_fu_537_p_1_address0;
    end else begin
        p_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        p_1_address1 = grp_backward_pass_2_fu_606_p_1_address1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        p_1_address1 = grp_backward_pass_1_fu_575_p_1_address1;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        p_1_address1 = grp_update_linear_cost_fu_537_p_1_address1;
    end else begin
        p_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        p_1_ce0 = grp_backward_pass_2_fu_606_p_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        p_1_ce0 = grp_backward_pass_1_fu_575_p_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        p_1_ce0 = grp_update_linear_cost_fu_537_p_1_ce0;
    end else begin
        p_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        p_1_ce1 = grp_backward_pass_2_fu_606_p_1_ce1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        p_1_ce1 = grp_backward_pass_1_fu_575_p_1_ce1;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        p_1_ce1 = grp_update_linear_cost_fu_537_p_1_ce1;
    end else begin
        p_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        p_1_d0 = grp_backward_pass_2_fu_606_p_1_d0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        p_1_d0 = grp_update_linear_cost_fu_537_p_1_d0;
    end else begin
        p_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        p_1_we0 = grp_backward_pass_2_fu_606_p_1_we0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        p_1_we0 = grp_update_linear_cost_fu_537_p_1_we0;
    end else begin
        p_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        p_1_we1 = grp_update_linear_cost_fu_537_p_1_we1;
    end else begin
        p_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        q_1_address0 = grp_backward_pass_2_fu_606_q_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        q_1_address0 = grp_update_linear_cost_fu_537_q_1_address0;
    end else begin
        q_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        q_1_address1 = grp_backward_pass_2_fu_606_q_1_address1;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        q_1_address1 = grp_update_linear_cost_fu_537_q_1_address1;
    end else begin
        q_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        q_1_ce0 = grp_backward_pass_2_fu_606_q_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        q_1_ce0 = grp_update_linear_cost_fu_537_q_1_ce0;
    end else begin
        q_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        q_1_ce1 = grp_backward_pass_2_fu_606_q_1_ce1;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        q_1_ce1 = grp_update_linear_cost_fu_537_q_1_ce1;
    end else begin
        q_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        q_1_we0 = grp_update_linear_cost_fu_537_q_1_we0;
    end else begin
        q_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        q_1_we1 = grp_update_linear_cost_fu_537_q_1_we1;
    end else begin
        q_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        r_1_address0 = grp_backward_pass_2_fu_606_r_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        r_1_address0 = grp_backward_pass_1_fu_575_r_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        r_1_address0 = grp_update_linear_cost_fu_537_r_1_address0;
    end else begin
        r_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        r_1_address1 = grp_backward_pass_2_fu_606_r_1_address1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        r_1_address1 = grp_backward_pass_1_fu_575_r_1_address1;
    end else begin
        r_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        r_1_ce0 = grp_backward_pass_2_fu_606_r_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        r_1_ce0 = grp_backward_pass_1_fu_575_r_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        r_1_ce0 = grp_update_linear_cost_fu_537_r_1_ce0;
    end else begin
        r_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        r_1_ce1 = grp_backward_pass_2_fu_606_r_1_ce1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        r_1_ce1 = grp_backward_pass_1_fu_575_r_1_ce1;
    end else begin
        r_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        r_1_we0 = grp_update_linear_cost_fu_537_r_1_we0;
    end else begin
        r_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        s1_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_s1_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        s1_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_s1_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        s1_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_s1_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        s1_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_s1_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        s1_1_address0 = grp_update_linear_cost_fu_537_s1_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        s1_1_address0 = grp_update_dual_fu_517_s1_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        s1_1_address0 = grp_update_slack_fu_467_s1_1_address0;
    end else begin
        s1_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        s1_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_s1_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        s1_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_s1_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        s1_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_s1_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        s1_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_s1_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        s1_1_ce0 = grp_update_linear_cost_fu_537_s1_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        s1_1_ce0 = grp_update_dual_fu_517_s1_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        s1_1_ce0 = grp_update_slack_fu_467_s1_1_ce0;
    end else begin
        s1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        s1_1_d0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_s1_1_d0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        s1_1_d0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_s1_1_d0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        s1_1_d0 = grp_update_linear_cost_fu_537_s1_1_d0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        s1_1_d0 = grp_update_dual_fu_517_s1_1_d0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        s1_1_d0 = grp_update_slack_fu_467_s1_1_d0;
    end else begin
        s1_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        s1_1_we0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_s1_1_we0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        s1_1_we0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_s1_1_we0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        s1_1_we0 = grp_update_linear_cost_fu_537_s1_1_we0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        s1_1_we0 = grp_update_dual_fu_517_s1_1_we0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        s1_1_we0 = grp_update_slack_fu_467_s1_1_we0;
    end else begin
        s1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        s2_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_s2_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        s2_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_s2_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        s2_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_s2_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        s2_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_s2_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        s2_1_address0 = grp_update_linear_cost_fu_537_s2_1_address0;
    end else begin
        s2_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        s2_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_s2_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        s2_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_s2_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        s2_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_s2_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        s2_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_s2_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        s2_1_ce0 = grp_update_linear_cost_fu_537_s2_1_ce0;
    end else begin
        s2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        s2_1_d0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_s2_1_d0;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        s2_1_d0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_s2_1_d0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        s2_1_d0 = grp_update_linear_cost_fu_537_s2_1_d0;
    end else begin
        s2_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        s2_1_we0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_s2_1_we0;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        s2_1_we0 = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_s2_1_we0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        s2_1_we0 = grp_update_linear_cost_fu_537_s2_1_we0;
    end else begin
        s2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        tiny_Q_ce0 = grp_update_linear_cost_fu_537_tiny_Q_ce0;
    end else begin
        tiny_Q_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tiny_iter_o = 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state79) & ((((icmp_ln236_reg_1935 == 1'd1) & (1'd0 == and_ln255_reg_2066)) | ((icmp_ln236_reg_1935 == 1'd1) & (1'd0 == and_ln257_fu_1787_p2))) | ((trunc_ln248_reg_2050 == 1'd1) & (icmp_ln236_reg_1935 == 1'd1))))) begin
        tiny_iter_o = add_ln270_fu_1793_p2;
    end else begin
        tiny_iter_o = tiny_iter_i;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state79) & ((((icmp_ln236_reg_1935 == 1'd1) & (1'd0 == and_ln255_reg_2066)) | ((icmp_ln236_reg_1935 == 1'd1) & (1'd0 == and_ln257_fu_1787_p2))) | ((trunc_ln248_reg_2050 == 1'd1) & (icmp_ln236_reg_1935 == 1'd1)))))) begin
        tiny_iter_o_ap_vld = 1'b1;
    end else begin
        tiny_iter_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tiny_x1_address0 = grp_backward_pass_2_fu_606_tiny_x1_address0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        tiny_x1_address0 = grp_update_linear_cost_fu_537_tiny_x1_address0;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        tiny_x1_address0 = grp_forward_pass_2_fu_499_tiny_x1_address0;
    end else begin
        tiny_x1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tiny_x1_ce0 = grp_backward_pass_2_fu_606_tiny_x1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        tiny_x1_ce0 = grp_update_linear_cost_fu_537_tiny_x1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        tiny_x1_ce0 = grp_forward_pass_2_fu_499_tiny_x1_ce0;
    end else begin
        tiny_x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tiny_x1_d0 = grp_backward_pass_2_fu_606_tiny_x1_d0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        tiny_x1_d0 = grp_update_linear_cost_fu_537_tiny_x1_d0;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        tiny_x1_d0 = grp_forward_pass_2_fu_499_tiny_x1_d0;
    end else begin
        tiny_x1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tiny_x1_we0 = grp_backward_pass_2_fu_606_tiny_x1_we0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        tiny_x1_we0 = grp_update_linear_cost_fu_537_tiny_x1_we0;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        tiny_x1_we0 = grp_forward_pass_2_fu_499_tiny_x1_we0;
    end else begin
        tiny_x1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tiny_x2_address0 = grp_backward_pass_2_fu_606_tiny_x2_address0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        tiny_x2_address0 = grp_update_linear_cost_fu_537_tiny_x2_address0;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        tiny_x2_address0 = grp_forward_pass_2_fu_499_tiny_x2_address0;
    end else begin
        tiny_x2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tiny_x2_ce0 = grp_backward_pass_2_fu_606_tiny_x2_ce0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        tiny_x2_ce0 = grp_update_linear_cost_fu_537_tiny_x2_ce0;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        tiny_x2_ce0 = grp_forward_pass_2_fu_499_tiny_x2_ce0;
    end else begin
        tiny_x2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tiny_x2_d0 = grp_backward_pass_2_fu_606_tiny_x2_d0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        tiny_x2_d0 = grp_update_linear_cost_fu_537_tiny_x2_d0;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        tiny_x2_d0 = grp_forward_pass_2_fu_499_tiny_x2_d0;
    end else begin
        tiny_x2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tiny_x2_we0 = grp_backward_pass_2_fu_606_tiny_x2_we0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        tiny_x2_we0 = grp_update_linear_cost_fu_537_tiny_x2_we0;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        tiny_x2_we0 = grp_forward_pass_2_fu_499_tiny_x2_we0;
    end else begin
        tiny_x2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tiny_x3_address0 = grp_backward_pass_2_fu_606_tiny_x3_address0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        tiny_x3_address0 = grp_update_linear_cost_fu_537_tiny_x3_address0;
    end else begin
        tiny_x3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tiny_x3_ce0 = grp_backward_pass_2_fu_606_tiny_x3_ce0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        tiny_x3_ce0 = grp_update_linear_cost_fu_537_tiny_x3_ce0;
    end else begin
        tiny_x3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tiny_x3_d0 = grp_backward_pass_2_fu_606_tiny_x3_d0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        tiny_x3_d0 = grp_update_linear_cost_fu_537_tiny_x3_d0;
    end else begin
        tiny_x3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tiny_x3_we0 = grp_backward_pass_2_fu_606_tiny_x3_we0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        tiny_x3_we0 = grp_update_linear_cost_fu_537_tiny_x3_we0;
    end else begin
        tiny_x3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) & (icmp_ln72_1_fu_1436_p2 == 1'd0))) begin
        u_1_address0 = zext_ln73_3_fu_1431_p1;
    end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln72_fu_1097_p2 == 1'd0))) begin
        u_1_address0 = zext_ln73_1_fu_1092_p1;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        u_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_u_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        u_1_address0 = grp_update_dual_fu_517_u_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        u_1_address0 = grp_forward_pass_2_fu_499_u_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        u_1_address0 = grp_update_slack_fu_467_u_1_address0;
    end else begin
        u_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state32) & (icmp_ln72_1_fu_1436_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state11) & (icmp_ln72_fu_1097_p2 == 1'd0)))) begin
        u_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        u_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_u_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        u_1_ce0 = grp_update_dual_fu_517_u_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        u_1_ce0 = grp_forward_pass_2_fu_499_u_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        u_1_ce0 = grp_update_slack_fu_467_u_1_ce0;
    end else begin
        u_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        u_1_ce1 = grp_forward_pass_2_fu_499_u_1_ce1;
    end else begin
        u_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) & (icmp_ln72_1_fu_1436_p2 == 1'd0))) begin
        u_1_d0 = bitcast_ln73_4_fu_1476_p1;
    end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln72_fu_1097_p2 == 1'd0))) begin
        u_1_d0 = bitcast_ln73_2_fu_1137_p1;
    end else begin
        u_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state32) & (icmp_ln72_1_fu_1436_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state11) & (icmp_ln72_fu_1097_p2 == 1'd0)))) begin
        u_1_we0 = 1'b1;
    end else begin
        u_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        u_max_1_ce0 = grp_update_slack_fu_467_u_max_1_ce0;
    end else begin
        u_max_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        u_min_1_ce0 = grp_update_slack_fu_467_u_min_1_ce0;
    end else begin
        u_min_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        v_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_v_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        v_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_v_1_address0;
    end else begin
        v_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        v_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_v_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        v_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_v_1_ce0;
    end else begin
        v_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        v_1_we0 = grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_v_1_we0;
    end else begin
        v_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        vnew_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_vnew_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        vnew_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_vnew_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        vnew_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_vnew_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        vnew_1_address0 = grp_update_linear_cost_fu_537_vnew_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        vnew_1_address0 = grp_update_dual_fu_517_vnew_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        vnew_1_address0 = grp_update_slack_fu_467_vnew_1_address0;
    end else begin
        vnew_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        vnew_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_vnew_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        vnew_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_vnew_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        vnew_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_vnew_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        vnew_1_ce0 = grp_update_linear_cost_fu_537_vnew_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        vnew_1_ce0 = grp_update_dual_fu_517_vnew_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        vnew_1_ce0 = grp_update_slack_fu_467_vnew_1_ce0;
    end else begin
        vnew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        vnew_1_ce1 = grp_update_linear_cost_fu_537_vnew_1_ce1;
    end else begin
        vnew_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        vnew_1_we0 = grp_update_slack_fu_467_vnew_1_we0;
    end else begin
        vnew_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        x_1_address0 = zext_ln136_18_fu_1299_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        x_1_address0 = zext_ln136_15_fu_960_p1;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        x_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_x_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        x_1_address0 = grp_update_dual_fu_517_x_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        x_1_address0 = grp_forward_pass_2_fu_499_x_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        x_1_address0 = grp_update_slack_fu_467_x_1_address0;
    end else begin
        x_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state4))) begin
        x_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        x_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_x_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        x_1_ce0 = grp_update_dual_fu_517_x_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        x_1_ce0 = grp_forward_pass_2_fu_499_x_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        x_1_ce0 = grp_update_slack_fu_467_x_1_ce0;
    end else begin
        x_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        x_1_ce1 = grp_forward_pass_2_fu_499_x_1_ce1;
    end else begin
        x_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33))) begin
        x_1_we0 = grp_forward_pass_2_fu_499_x_1_we0;
    end else begin
        x_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        x_max_1_ce0 = grp_update_slack_fu_467_x_max_1_ce0;
    end else begin
        x_max_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        x_min_1_ce0 = grp_update_slack_fu_467_x_min_1_ce0;
    end else begin
        x_min_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        y_1_address0 = grp_update_linear_cost_fu_537_y_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        y_1_address0 = grp_update_dual_fu_517_y_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        y_1_address0 = grp_update_slack_fu_467_y_1_address0;
    end else begin
        y_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        y_1_ce0 = grp_update_linear_cost_fu_537_y_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        y_1_ce0 = grp_update_dual_fu_517_y_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        y_1_ce0 = grp_update_slack_fu_467_y_1_ce0;
    end else begin
        y_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        y_1_we0 = grp_update_dual_fu_517_y_1_we0;
    end else begin
        y_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        z_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_z_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        z_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_z_1_address0;
    end else begin
        z_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        z_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_z_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        z_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_z_1_ce0;
    end else begin
        z_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        z_1_we0 = grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_z_1_we0;
    end else begin
        z_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        znew_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_znew_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        znew_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_znew_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        znew_1_address0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_znew_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        znew_1_address0 = grp_update_linear_cost_fu_537_znew_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        znew_1_address0 = grp_update_dual_fu_517_znew_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        znew_1_address0 = grp_update_slack_fu_467_znew_1_address0;
    end else begin
        znew_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        znew_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_znew_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        znew_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_znew_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        znew_1_ce0 = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_znew_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17))) begin
        znew_1_ce0 = grp_update_linear_cost_fu_537_znew_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        znew_1_ce0 = grp_update_dual_fu_517_znew_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        znew_1_ce0 = grp_update_slack_fu_467_znew_1_ce0;
    end else begin
        znew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state13))) begin
        znew_1_we0 = grp_update_slack_fu_467_znew_1_we0;
    end else begin
        znew_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln174_fu_892_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln133_fu_909_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln135_fu_969_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln177_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln72_fu_1097_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((grp_forward_pass_2_fu_499_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((grp_update_slack_fu_467_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((grp_update_dual_fu_517_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((grp_update_linear_cost_fu_537_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln236_fu_1157_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((tmp_fu_1169_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((grp_backward_pass_1_fu_575_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((grp_backward_pass_2_fu_606_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((icmp_ln174_1_fu_1218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((icmp_ln133_1_fu_1248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((icmp_ln135_1_fu_1308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state29 : begin
            if (((icmp_ln177_1_fu_1368_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (icmp_ln72_1_fu_1436_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((grp_forward_pass_2_fu_499_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((grp_update_slack_fu_467_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((grp_update_dual_fu_517_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if (((grp_update_linear_cost_fu_537_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            if (((trunc_ln248_fu_1481_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_state69 : begin
            if (((1'b0 == ap_block_state69_on_subcall_done) & (1'b1 == ap_CS_fsm_state69))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if (((1'b0 == ap_block_state71_on_subcall_done) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((1'b0 == ap_block_state73_on_subcall_done) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if (((1'b0 == ap_block_state75_on_subcall_done) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            if (((1'b0 == ap_block_state77_on_subcall_done) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            if (((1'b1 == ap_CS_fsm_state79) & ((icmp_ln236_reg_1935 == 1'd0) | ((trunc_ln248_reg_2050 == 1'd0) & (1'd1 == and_ln255_reg_2066) & (1'd1 == and_ln257_fu_1787_p2))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state80 : begin
            if (((1'b0 == ap_block_state80_on_subcall_done) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Adyn_1_address0 = grp_forward_pass_2_fu_499_Adyn_1_address0;

assign Adyn_1_address1 = grp_forward_pass_2_fu_499_Adyn_1_address1;

assign AmBKt_1_address0 = grp_backward_pass_2_fu_606_AmBKt_1_address0;

assign AmBKt_1_address1 = grp_backward_pass_2_fu_606_AmBKt_1_address1;

assign AmBKt_1_ce0 = grp_backward_pass_2_fu_606_AmBKt_1_ce0;

assign AmBKt_1_ce1 = grp_backward_pass_2_fu_606_AmBKt_1_ce1;

assign BdynT_1_address0 = grp_backward_pass_1_fu_575_BdynT_1_address0;

assign BdynT_1_address1 = grp_backward_pass_1_fu_575_BdynT_1_address1;

assign BdynT_1_ce0 = grp_backward_pass_1_fu_575_BdynT_1_ce0;

assign BdynT_1_ce1 = grp_backward_pass_1_fu_575_BdynT_1_ce1;

assign Bdyn_1_address0 = grp_forward_pass_2_fu_499_Bdyn_1_address0;

assign Bdyn_1_address1 = grp_forward_pass_2_fu_499_Bdyn_1_address1;

assign KinfT_1_address0 = grp_backward_pass_2_fu_606_KinfT_1_address0;

assign KinfT_1_address1 = grp_backward_pass_2_fu_606_KinfT_1_address1;

assign KinfT_1_ce0 = grp_backward_pass_2_fu_606_KinfT_1_ce0;

assign KinfT_1_ce1 = grp_backward_pass_2_fu_606_KinfT_1_ce1;

assign PinfT_1_address0 = grp_update_linear_cost_fu_537_PinfT_1_address0;

assign PinfT_1_address1 = grp_update_linear_cost_fu_537_PinfT_1_address1;

assign Quu_inv_1_address0 = grp_backward_pass_1_fu_575_Quu_inv_1_address0;

assign Quu_inv_1_address1 = grp_backward_pass_1_fu_575_Quu_inv_1_address1;

assign Quu_inv_1_ce0 = grp_backward_pass_1_fu_575_Quu_inv_1_ce0;

assign Quu_inv_1_ce1 = grp_backward_pass_1_fu_575_Quu_inv_1_ce1;

assign Xref_1_address0 = grp_update_linear_cost_fu_537_Xref_1_address0;

assign Xref_1_address1 = grp_update_linear_cost_fu_537_Xref_1_address1;

assign add_ln133_1_fu_1254_p2 = (i_37_reg_411 + 3'd1);

assign add_ln133_fu_915_p2 = (i_33_reg_332 + 3'd1);

assign add_ln135_1_fu_1314_p2 = (j_13_reg_422 + 4'd1);

assign add_ln135_fu_975_p2 = (j_10_reg_343 + 4'd1);

assign add_ln136_1_fu_1320_p2 = (zext_ln135_1_fu_1304_p1 + empty_114_reg_1997);

assign add_ln136_8_fu_955_p2 = (sub_ln136_reg_1850 + zext_ln136_14_fu_951_p1);

assign add_ln136_9_fu_1294_p2 = (sub_ln136_1_reg_1964 + zext_ln136_17_fu_1290_p1);

assign add_ln136_fu_981_p2 = (zext_ln135_fu_965_p1 + empty_107_reg_1882);

assign add_ln174_1_fu_1224_p2 = (i_41_reg_399 + 4'd1);

assign add_ln174_fu_898_p2 = (i_35_fu_224 + 4'd1);

assign add_ln177_1_fu_1374_p2 = (j_12_reg_445 + 3'd1);

assign add_ln177_fu_1035_p2 = (j_reg_366 + 3'd1);

assign add_ln178_1_fu_1358_p2 = (tmp_18_reg_1958 + zext_ln178_2_fu_1354_p1);

assign add_ln178_fu_1019_p2 = (tmp_16_reg_1844 + zext_ln178_fu_1015_p1);

assign add_ln270_fu_1793_p2 = (tiny_iter_i + 32'd1);

assign add_ln72_1_fu_1442_p2 = (j_14_reg_456 + 3'd1);

assign add_ln72_fu_1103_p2 = (j_11_reg_377 + 3'd1);

assign add_ln73_1_fu_1426_p2 = (tmp_18_reg_1958 + zext_ln73_2_fu_1422_p1);

assign add_ln73_fu_1087_p2 = (tmp_16_reg_1844 + zext_ln73_fu_1083_p1);

assign and_ln255_1_fu_1585_p2 = (or_ln255_fu_1561_p2 & or_ln255_1_fu_1579_p2);

assign and_ln255_2_fu_1591_p2 = (grp_fu_760_p2 & and_ln255_1_fu_1585_p2);

assign and_ln255_fu_1645_p2 = (and_ln256_1_fu_1639_p2 & and_ln255_2_fu_1591_p2);

assign and_ln256_1_fu_1639_p2 = (grp_fu_764_p2 & and_ln256_fu_1633_p2);

assign and_ln256_fu_1633_p2 = (or_ln256_fu_1627_p2 & or_ln255_1_fu_1579_p2);

assign and_ln257_1_fu_1728_p2 = (or_ln257_fu_1704_p2 & or_ln257_1_fu_1722_p2);

assign and_ln257_2_fu_1734_p2 = (grp_fu_760_p2 & and_ln257_1_fu_1728_p2);

assign and_ln257_fu_1787_p2 = (and_ln258_1_fu_1781_p2 & and_ln257_2_fu_1734_p2);

assign and_ln258_1_fu_1781_p2 = (grp_fu_764_p2 & and_ln258_fu_1775_p2);

assign and_ln258_fu_1775_p2 = (or_ln258_fu_1769_p2 & or_ln257_1_fu_1722_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state69_on_subcall_done = ((grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_ap_done == 1'b0) | (grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state71_on_subcall_done = ((grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_ap_done == 1'b0) | (grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state73_on_subcall_done = ((grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_ap_done == 1'b0) | (grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_ap_done == 1'b0) | (grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_ap_done == 1'b0) | (grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state75_on_subcall_done = ((grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_ap_done == 1'b0) | (grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state77_on_subcall_done = ((grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_ap_done == 1'b0) | (grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state80_on_subcall_done = ((grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_ap_done == 1'b0) | (grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_ap_done == 1'b0));
end

assign bitcast_ln255_1_fu_1531_p1 = tiny_abs_pri_tol;

assign bitcast_ln255_fu_1513_p1 = grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_max_1_out;

assign bitcast_ln256_fu_1597_p1 = grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_max_3_out;

assign bitcast_ln257_1_fu_1674_p1 = tiny_abs_dua_tol;

assign bitcast_ln257_fu_1657_p1 = mul_i_reg_2054;

assign bitcast_ln258_fu_1740_p1 = mul_i1_reg_2060;

assign bitcast_ln73_2_fu_1137_p1 = xor_ln73_fu_1131_p2;

assign bitcast_ln73_3_fu_1466_p1 = tmp_13_fu_1452_p6;

assign bitcast_ln73_4_fu_1476_p1 = xor_ln73_1_fu_1470_p2;

assign bitcast_ln73_fu_1127_p1 = tmp_11_fu_1113_p6;

assign empty_107_fu_945_p2 = (p_shl_fu_925_p3 - p_shl1_cast_fu_941_p1);

assign empty_114_fu_1284_p2 = (p_shl2_fu_1264_p3 - p_shl3_cast_fu_1280_p1);

assign grp_backward_pass_1_fu_575_ap_start = grp_backward_pass_1_fu_575_ap_start_reg;

assign grp_backward_pass_2_fu_606_ap_start = grp_backward_pass_2_fu_606_ap_start_reg;

assign grp_forward_pass_2_fu_499_ap_start = grp_forward_pass_2_fu_499_ap_start_reg;

assign grp_fu_1242_p1 = grp_fu_1242_p10;

assign grp_fu_1242_p10 = tiny_check_termination;

assign grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_ap_start = grp_tiny_solve_Pipeline_VITIS_LOOP_100_125_fu_735_ap_start_reg;

assign grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_ap_start = grp_tiny_solve_Pipeline_VITIS_LOOP_100_1_fu_727_ap_start_reg;

assign grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_ap_start = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_216_fu_670_ap_start_reg;

assign grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_ap_start = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_219_fu_637_ap_start_reg;

assign grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_ap_start = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_222_fu_687_ap_start_reg;

assign grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_ap_start = grp_tiny_solve_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_627_ap_start_reg;

assign grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_ap_start = grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_218_fu_713_ap_start_reg;

assign grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_ap_start = grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_221_fu_680_ap_start_reg;

assign grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_ap_start = grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_224_fu_720_ap_start_reg;

assign grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_ap_start = grp_tiny_solve_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_663_ap_start_reg;

assign grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_ap_start = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_217_fu_697_ap_start_reg;

assign grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_ap_start = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_220_fu_655_ap_start_reg;

assign grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_ap_start = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_223_fu_705_ap_start_reg;

assign grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_ap_start = grp_tiny_solve_Pipeline_VITIS_LOOP_80_1_VITIS_LOOP_81_2_fu_647_ap_start_reg;

assign grp_update_dual_fu_517_ap_start = grp_update_dual_fu_517_ap_start_reg;

assign grp_update_linear_cost_fu_537_ap_start = grp_update_linear_cost_fu_537_ap_start_reg;

assign grp_update_slack_fu_467_ap_start = grp_update_slack_fu_467_ap_start_reg;

assign i_40_fu_1182_p2 = ($signed(i_34_reg_388) + $signed(5'd31));

assign i_42_fu_1163_p2 = (i_fu_244 + 7'd1);

assign icmp_ln133_1_fu_1248_p2 = ((i_37_reg_411 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln133_fu_909_p2 = ((i_33_reg_332 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln135_1_fu_1308_p2 = ((j_13_reg_422 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln135_fu_969_p2 = ((j_10_reg_343 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln174_1_fu_1218_p2 = ((i_41_reg_399 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln174_fu_892_p2 = ((i_35_fu_224 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln177_1_fu_1368_p2 = ((j_12_reg_445 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln177_fu_1029_p2 = ((j_reg_366 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln236_fu_1157_p2 = ((i_fu_244 < sext_ln236_fu_1153_p1) ? 1'b1 : 1'b0);

assign icmp_ln255_1_fu_1555_p2 = ((trunc_ln255_fu_1527_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln255_2_fu_1567_p2 = ((tmp_21_fu_1535_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln255_3_fu_1573_p2 = ((trunc_ln255_1_fu_1545_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln255_fu_1549_p2 = ((tmp_20_fu_1517_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln256_1_fu_1621_p2 = ((trunc_ln256_fu_1611_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln256_fu_1615_p2 = ((tmp_23_fu_1601_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln257_1_fu_1698_p2 = ((trunc_ln257_fu_1670_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln257_2_fu_1710_p2 = ((tmp_26_fu_1678_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln257_3_fu_1716_p2 = ((trunc_ln257_1_fu_1688_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln257_fu_1692_p2 = ((tmp_25_fu_1660_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln258_1_fu_1763_p2 = ((trunc_ln258_fu_1753_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln258_fu_1757_p2 = ((tmp_28_fu_1743_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln72_1_fu_1436_p2 = ((j_14_reg_456 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_1097_p2 = ((j_11_reg_377 == 3'd4) ? 1'b1 : 1'b0);

assign or_ln255_1_fu_1579_p2 = (icmp_ln255_3_fu_1573_p2 | icmp_ln255_2_fu_1567_p2);

assign or_ln255_fu_1561_p2 = (icmp_ln255_fu_1549_p2 | icmp_ln255_1_fu_1555_p2);

assign or_ln256_fu_1627_p2 = (icmp_ln256_fu_1615_p2 | icmp_ln256_1_fu_1621_p2);

assign or_ln257_1_fu_1722_p2 = (icmp_ln257_3_fu_1716_p2 | icmp_ln257_2_fu_1710_p2);

assign or_ln257_fu_1704_p2 = (icmp_ln257_fu_1692_p2 | icmp_ln257_1_fu_1698_p2);

assign or_ln258_fu_1769_p2 = (icmp_ln258_fu_1757_p2 | icmp_ln258_1_fu_1763_p2);

assign p_shl1_cast_fu_941_p1 = p_shl1_fu_933_p3;

assign p_shl1_fu_933_p3 = {{trunc_ln134_fu_921_p1}, {2'd0}};

assign p_shl2_fu_1264_p3 = {{trunc_ln134_1_fu_1260_p1}, {4'd0}};

assign p_shl3_cast_fu_1280_p1 = p_shl3_fu_1272_p3;

assign p_shl3_fu_1272_p3 = {{trunc_ln134_1_fu_1260_p1}, {2'd0}};

assign p_shl_fu_925_p3 = {{trunc_ln134_fu_921_p1}, {4'd0}};

assign sext_ln236_fu_1153_p1 = $signed(tiny_max_iter);

assign sub_ln136_1_fu_1212_p2 = (tmp_19_fu_1204_p3 - zext_ln136_16_fu_1200_p1);

assign sub_ln136_fu_886_p2 = (tmp_17_fu_878_p3 - zext_ln136_13_fu_874_p1);

assign tiny_Q_address0 = grp_update_linear_cost_fu_537_tiny_Q_address0;

assign tmp_11_fu_1113_p5 = j_11_reg_377[1:0];

assign tmp_12_fu_1384_p5 = j_12_reg_445[1:0];

assign tmp_13_fu_1452_p5 = j_14_reg_456[1:0];

assign tmp_16_fu_866_p3 = {{i_35_fu_224}, {2'd0}};

assign tmp_17_fu_878_p3 = {{trunc_ln178_fu_862_p1}, {4'd0}};

assign tmp_18_fu_1192_p3 = {{i_41_reg_399}, {2'd0}};

assign tmp_19_fu_1204_p3 = {{trunc_ln178_2_fu_1188_p1}, {4'd0}};

assign tmp_20_fu_1517_p4 = {{bitcast_ln255_fu_1513_p1[30:23]}};

assign tmp_21_fu_1535_p4 = {{bitcast_ln255_1_fu_1531_p1[30:23]}};

assign tmp_23_fu_1601_p4 = {{bitcast_ln256_fu_1597_p1[30:23]}};

assign tmp_25_fu_1660_p4 = {{bitcast_ln257_fu_1657_p1[30:23]}};

assign tmp_26_fu_1678_p4 = {{bitcast_ln257_1_fu_1674_p1[30:23]}};

assign tmp_28_fu_1743_p4 = {{bitcast_ln258_fu_1740_p1[30:23]}};

assign tmp_fu_1169_p3 = i_34_reg_388[32'd4];

assign tmp_s_fu_1045_p5 = j_reg_366[1:0];

assign trunc_ln134_1_fu_1260_p1 = i_37_reg_411[1:0];

assign trunc_ln134_fu_921_p1 = i_33_reg_332[1:0];

assign trunc_ln163_fu_1177_p1 = i_34_reg_388[3:0];

assign trunc_ln178_1_fu_1041_p1 = j_reg_366[1:0];

assign trunc_ln178_2_fu_1188_p1 = i_41_reg_399[2:0];

assign trunc_ln178_3_fu_1380_p1 = j_12_reg_445[1:0];

assign trunc_ln178_fu_862_p1 = i_35_fu_224[2:0];

assign trunc_ln248_fu_1481_p1 = grp_fu_1242_p2[0:0];

assign trunc_ln255_1_fu_1545_p1 = bitcast_ln255_1_fu_1531_p1[22:0];

assign trunc_ln255_fu_1527_p1 = bitcast_ln255_fu_1513_p1[22:0];

assign trunc_ln256_fu_1611_p1 = bitcast_ln256_fu_1597_p1[22:0];

assign trunc_ln257_1_fu_1688_p1 = bitcast_ln257_1_fu_1674_p1[22:0];

assign trunc_ln257_fu_1670_p1 = bitcast_ln257_fu_1657_p1[22:0];

assign trunc_ln258_fu_1753_p1 = bitcast_ln258_fu_1740_p1[22:0];

assign u_1_address1 = grp_forward_pass_2_fu_499_u_1_address1;

assign u_max_1_address0 = grp_update_slack_fu_467_u_max_1_address0;

assign u_min_1_address0 = grp_update_slack_fu_467_u_min_1_address0;

assign x_1_address1 = grp_forward_pass_2_fu_499_x_1_address1;

assign x_1_d0 = grp_forward_pass_2_fu_499_x_1_d0;

assign x_max_1_address0 = grp_update_slack_fu_467_x_max_1_address0;

assign x_min_1_address0 = grp_update_slack_fu_467_x_min_1_address0;

assign xor_ln73_1_fu_1470_p2 = (bitcast_ln73_3_fu_1466_p1 ^ 32'd2147483648);

assign xor_ln73_fu_1131_p2 = (bitcast_ln73_fu_1127_p1 ^ 32'd2147483648);

assign zext_ln135_1_fu_1304_p1 = j_13_reg_422;

assign zext_ln135_fu_965_p1 = j_10_reg_343;

assign zext_ln136_12_fu_1325_p1 = add_ln136_1_fu_1320_p2;

assign zext_ln136_13_fu_874_p1 = tmp_16_fu_866_p3;

assign zext_ln136_14_fu_951_p1 = j_10_reg_343;

assign zext_ln136_15_fu_960_p1 = add_ln136_8_fu_955_p2;

assign zext_ln136_16_fu_1200_p1 = tmp_18_fu_1192_p3;

assign zext_ln136_17_fu_1290_p1 = j_13_reg_422;

assign zext_ln136_18_fu_1299_p1 = add_ln136_9_fu_1294_p2;

assign zext_ln136_fu_986_p1 = add_ln136_fu_981_p2;

assign zext_ln178_1_fu_1024_p1 = add_ln178_fu_1019_p2;

assign zext_ln178_2_fu_1354_p1 = j_12_reg_445;

assign zext_ln178_3_fu_1363_p1 = add_ln178_1_fu_1358_p2;

assign zext_ln178_fu_1015_p1 = j_reg_366;

assign zext_ln73_1_fu_1092_p1 = add_ln73_fu_1087_p2;

assign zext_ln73_2_fu_1422_p1 = j_14_reg_456;

assign zext_ln73_3_fu_1431_p1 = add_ln73_1_fu_1426_p2;

assign zext_ln73_fu_1083_p1 = j_11_reg_377;

always @ (posedge ap_clk) begin
    tmp_16_reg_1844[1:0] <= 2'b00;
    sub_ln136_reg_1850[1:0] <= 2'b00;
    empty_107_reg_1882[1:0] <= 2'b00;
    tmp_18_reg_1958[1:0] <= 2'b00;
    sub_ln136_1_reg_1964[1:0] <= 2'b00;
    empty_114_reg_1997[1:0] <= 2'b00;
end

endmodule //tracking_tiny_solve
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tracking_Pipeline_VITIS_LOOP_93_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x0_address0,
        x0_ce0,
        x0_q0,
        x0_address1,
        x0_ce1,
        x0_q1,
        x_1_address0,
        x_1_ce0,
        x_1_we0,
        x_1_d0,
        x_1_address1,
        x_1_ce1,
        x_1_we1,
        x_1_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] x0_address0;
output   x0_ce0;
input  [31:0] x0_q0;
output  [3:0] x0_address1;
output   x0_ce1;
input  [31:0] x0_q1;
output  [6:0] x_1_address0;
output   x_1_ce0;
output   x_1_we0;
output  [31:0] x_1_d0;
output  [6:0] x_1_address1;
output   x_1_ce1;
output   x_1_we1;
output  [31:0] x_1_d1;

reg ap_idle;
reg[3:0] x0_address0;
reg x0_ce0;
reg[3:0] x0_address1;
reg x0_ce1;
reg[6:0] x_1_address0;
reg x_1_ce0;
reg x_1_we0;
reg[6:0] x_1_address1;
reg x_1_ce1;
reg x_1_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln93_fu_132_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
reg   [3:0] i_23_reg_192;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln93_reg_198;
wire   [63:0] i_32_cast16_fu_138_p1;
reg   [63:0] i_32_cast16_reg_202;
wire   [63:0] zext_ln95_fu_149_p1;
reg   [63:0] zext_ln95_reg_212;
wire   [63:0] zext_ln95_13_fu_170_p1;
reg   [63:0] zext_ln95_13_reg_222;
wire    ap_block_pp0_stage1_11001;
wire   [63:0] zext_ln95_14_fu_180_p1;
reg   [63:0] zext_ln95_14_reg_232;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
reg   [3:0] i_fu_36;
wire   [3:0] add_ln93_fu_154_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_23;
wire   [3:0] or_ln93_fu_143_p2;
wire   [3:0] or_ln93_3_fu_165_p2;
wire   [3:0] or_ln93_4_fu_175_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln93_fu_132_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_36 <= add_ln93_fu_154_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_36 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_23_reg_192 <= ap_sig_allocacmp_i_23;
        icmp_ln93_reg_198 <= icmp_ln93_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_fu_132_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_32_cast16_reg_202[3 : 0] <= i_32_cast16_fu_138_p1[3 : 0];
        zext_ln95_reg_212[3 : 1] <= zext_ln95_fu_149_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_198 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        zext_ln95_13_reg_222[0] <= zext_ln95_13_fu_170_p1[0];
zext_ln95_13_reg_222[3 : 2] <= zext_ln95_13_fu_170_p1[3 : 2];
        zext_ln95_14_reg_232[3 : 2] <= zext_ln95_14_fu_180_p1[3 : 2];
    end
end

always @ (*) begin
    if (((icmp_ln93_fu_132_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_23 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_23 = i_fu_36;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            x0_address0 = zext_ln95_14_fu_180_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x0_address0 = zext_ln95_fu_149_p1;
        end else begin
            x0_address0 = 'bx;
        end
    end else begin
        x0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            x0_address1 = zext_ln95_13_fu_170_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x0_address1 = i_32_cast16_fu_138_p1;
        end else begin
            x0_address1 = 'bx;
        end
    end else begin
        x0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x0_ce0 = 1'b1;
    end else begin
        x0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x0_ce1 = 1'b1;
    end else begin
        x0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_1_address0 = zext_ln95_14_reg_232;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        x_1_address0 = zext_ln95_reg_212;
    end else begin
        x_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_1_address1 = zext_ln95_13_reg_222;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        x_1_address1 = i_32_cast16_reg_202;
    end else begin
        x_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x_1_ce0 = 1'b1;
    end else begin
        x_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x_1_ce1 = 1'b1;
    end else begin
        x_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln93_reg_198 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x_1_we0 = 1'b1;
    end else begin
        x_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln93_reg_198 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x_1_we1 = 1'b1;
    end else begin
        x_1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln93_fu_154_p2 = (ap_sig_allocacmp_i_23 + 4'd4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_32_cast16_fu_138_p1 = ap_sig_allocacmp_i_23;

assign icmp_ln93_fu_132_p2 = ((ap_sig_allocacmp_i_23 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln93_3_fu_165_p2 = (i_23_reg_192 | 4'd2);

assign or_ln93_4_fu_175_p2 = (i_23_reg_192 | 4'd3);

assign or_ln93_fu_143_p2 = (ap_sig_allocacmp_i_23 | 4'd1);

assign x_1_d0 = x0_q0;

assign x_1_d1 = x0_q1;

assign zext_ln95_13_fu_170_p1 = or_ln93_3_fu_165_p2;

assign zext_ln95_14_fu_180_p1 = or_ln93_4_fu_175_p2;

assign zext_ln95_fu_149_p1 = or_ln93_fu_143_p2;

always @ (posedge ap_clk) begin
    i_32_cast16_reg_202[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln95_reg_212[0] <= 1'b1;
    zext_ln95_reg_212[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln95_13_reg_222[1] <= 1'b1;
    zext_ln95_13_reg_222[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln95_14_reg_232[1:0] <= 2'b11;
    zext_ln95_14_reg_232[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_tracking_Pipeline_VITIS_LOOP_93_1
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_tracking_Pipeline_VITIS_LOOP_100_1_Kinf_data_ROM_AUTO_1R (
address0, ce0, q0, reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 6;
parameter AddressRange = 48;

input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_tracking_Pipeline_VITIS_LOOP_100_1_Kinf_data_ROM_AUTO_1R.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[address0];
    end
end



endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tracking_Pipeline_VITIS_LOOP_100_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Kinf_1_address0,
        Kinf_1_ce0,
        Kinf_1_we0,
        Kinf_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] Kinf_1_address0;
output   Kinf_1_ce0;
output   Kinf_1_we0;
output  [31:0] Kinf_1_d0;

reg ap_idle;
reg Kinf_1_ce0;
reg Kinf_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln100_fu_69_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [5:0] Kinf_data_address0;
reg    Kinf_data_ce0;
wire   [31:0] Kinf_data_q0;
wire   [63:0] i_25_cast9_fu_81_p1;
reg   [63:0] i_25_cast9_reg_101;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [5:0] i_23_fu_30;
wire   [5:0] add_ln100_fu_75_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_tracking_Pipeline_VITIS_LOOP_100_1_Kinf_data_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
Kinf_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Kinf_data_address0),
    .ce0(Kinf_data_ce0),
    .q0(Kinf_data_q0)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln100_fu_69_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_23_fu_30 <= add_ln100_fu_75_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_23_fu_30 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_69_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_25_cast9_reg_101[5 : 0] <= i_25_cast9_fu_81_p1[5 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Kinf_1_ce0 = 1'b1;
    end else begin
        Kinf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Kinf_1_we0 = 1'b1;
    end else begin
        Kinf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Kinf_data_ce0 = 1'b1;
    end else begin
        Kinf_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln100_fu_69_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 6'd0;
    end else begin
        ap_sig_allocacmp_i = i_23_fu_30;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Kinf_1_address0 = i_25_cast9_reg_101;

assign Kinf_1_d0 = Kinf_data_q0;

assign Kinf_data_address0 = i_25_cast9_fu_81_p1;

assign add_ln100_fu_75_p2 = (ap_sig_allocacmp_i + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_25_cast9_fu_81_p1 = ap_sig_allocacmp_i;

assign icmp_ln100_fu_69_p2 = ((ap_sig_allocacmp_i == 6'd48) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    i_25_cast9_reg_101[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_tracking_Pipeline_VITIS_LOOP_100_1
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_tracking_Pipeline_VITIS_LOOP_100_110_Quu_inv_data_ROM_AUTO_1R (
address0, ce0, q0, reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 4;
parameter AddressRange = 16;

input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_tracking_Pipeline_VITIS_LOOP_100_110_Quu_inv_data_ROM_AUTO_1R.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[address0];
    end
end



endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tracking_Pipeline_VITIS_LOOP_100_110 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Quu_inv_1_address0,
        Quu_inv_1_ce0,
        Quu_inv_1_we0,
        Quu_inv_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] Quu_inv_1_address0;
output   Quu_inv_1_ce0;
output   Quu_inv_1_we0;
output  [31:0] Quu_inv_1_d0;

reg ap_idle;
reg Quu_inv_1_ce0;
reg Quu_inv_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln100_fu_69_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] Quu_inv_data_address0;
reg    Quu_inv_data_ce0;
wire   [31:0] Quu_inv_data_q0;
wire   [63:0] i_33_cast10_fu_81_p1;
reg   [63:0] i_33_cast10_reg_101;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [4:0] i_25_fu_30;
wire   [4:0] add_ln100_fu_75_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_tracking_Pipeline_VITIS_LOOP_100_110_Quu_inv_data_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
Quu_inv_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Quu_inv_data_address0),
    .ce0(Quu_inv_data_ce0),
    .q0(Quu_inv_data_q0)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln100_fu_69_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_25_fu_30 <= add_ln100_fu_75_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_25_fu_30 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_69_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_33_cast10_reg_101[4 : 0] <= i_33_cast10_fu_81_p1[4 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Quu_inv_1_ce0 = 1'b1;
    end else begin
        Quu_inv_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Quu_inv_1_we0 = 1'b1;
    end else begin
        Quu_inv_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Quu_inv_data_ce0 = 1'b1;
    end else begin
        Quu_inv_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln100_fu_69_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 5'd0;
    end else begin
        ap_sig_allocacmp_i = i_25_fu_30;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Quu_inv_1_address0 = i_33_cast10_reg_101;

assign Quu_inv_1_d0 = Quu_inv_data_q0;

assign Quu_inv_data_address0 = i_33_cast10_fu_81_p1;

assign add_ln100_fu_75_p2 = (ap_sig_allocacmp_i + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_33_cast10_fu_81_p1 = ap_sig_allocacmp_i;

assign icmp_ln100_fu_69_p2 = ((ap_sig_allocacmp_i == 5'd16) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    i_33_cast10_reg_101[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_tracking_Pipeline_VITIS_LOOP_100_110
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_tracking_Pipeline_VITIS_LOOP_100_112_Q_data_ROM_AUTO_1R (
address0, ce0, q0, reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 4;
parameter AddressRange = 12;

input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_tracking_Pipeline_VITIS_LOOP_100_112_Q_data_ROM_AUTO_1R.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[address0];
    end
end



endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tracking_Pipeline_VITIS_LOOP_100_112 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tiny_Q_address0,
        tiny_Q_ce0,
        tiny_Q_we0,
        tiny_Q_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] tiny_Q_address0;
output   tiny_Q_ce0;
output   tiny_Q_we0;
output  [31:0] tiny_Q_d0;

reg ap_idle;
reg tiny_Q_ce0;
reg tiny_Q_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln100_fu_69_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] Q_data_address0;
reg    Q_data_ce0;
wire   [31:0] Q_data_q0;
wire   [63:0] i_34_cast11_fu_81_p1;
reg   [63:0] i_34_cast11_reg_101;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [3:0] i_fu_30;
wire   [3:0] add_ln100_fu_75_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_29;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_tracking_Pipeline_VITIS_LOOP_100_112_Q_data_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
Q_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Q_data_address0),
    .ce0(Q_data_ce0),
    .q0(Q_data_q0)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln100_fu_69_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_30 <= add_ln100_fu_75_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_30 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_69_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_34_cast11_reg_101[3 : 0] <= i_34_cast11_fu_81_p1[3 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Q_data_ce0 = 1'b1;
    end else begin
        Q_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln100_fu_69_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_29 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_29 = i_fu_30;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_Q_ce0 = 1'b1;
    end else begin
        tiny_Q_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_Q_we0 = 1'b1;
    end else begin
        tiny_Q_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Q_data_address0 = i_34_cast11_fu_81_p1;

assign add_ln100_fu_75_p2 = (ap_sig_allocacmp_i_29 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_34_cast11_fu_81_p1 = ap_sig_allocacmp_i_29;

assign icmp_ln100_fu_69_p2 = ((ap_sig_allocacmp_i_29 == 4'd12) ? 1'b1 : 1'b0);

assign tiny_Q_address0 = i_34_cast11_reg_101;

assign tiny_Q_d0 = Q_data_q0;

always @ (posedge ap_clk) begin
    i_34_cast11_reg_101[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_tracking_Pipeline_VITIS_LOOP_100_112
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tracking_Pipeline_VITIS_LOOP_109_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        u_min_1_address0,
        u_min_1_ce0,
        u_min_1_we0,
        u_min_1_d0,
        u_min_1_address1,
        u_min_1_ce1,
        u_min_1_we1,
        u_min_1_d1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] u_min_1_address0;
output   u_min_1_ce0;
output   u_min_1_we0;
output  [31:0] u_min_1_d0;
output  [5:0] u_min_1_address1;
output   u_min_1_ce1;
output   u_min_1_we1;
output  [31:0] u_min_1_d1;

reg ap_idle;
reg[5:0] u_min_1_address0;
reg u_min_1_ce0;
reg u_min_1_we0;
reg[5:0] u_min_1_address1;
reg u_min_1_ce1;
reg u_min_1_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln109_fu_91_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [5:0] i_reg_151;
wire   [63:0] i_27_cast12_fu_97_p1;
wire   [63:0] zext_ln111_fu_108_p1;
wire   [63:0] zext_ln111_1_fu_129_p1;
wire   [63:0] zext_ln111_2_fu_139_p1;
reg   [5:0] i_27_fu_36;
wire   [5:0] add_ln109_fu_113_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i;
wire   [5:0] or_ln109_fu_102_p2;
wire   [5:0] or_ln109_1_fu_124_p2;
wire   [5:0] or_ln109_2_fu_134_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln109_fu_91_p2 == 1'd1)) begin
            i_27_fu_36 <= add_ln109_fu_113_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_27_fu_36 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        i_reg_151 <= ap_sig_allocacmp_i;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln109_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 6'd0;
    end else begin
        ap_sig_allocacmp_i = i_27_fu_36;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        u_min_1_address0 = zext_ln111_2_fu_139_p1;
    end else if (((icmp_ln109_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        u_min_1_address0 = zext_ln111_fu_108_p1;
    end else begin
        u_min_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        u_min_1_address1 = zext_ln111_1_fu_129_p1;
    end else if (((icmp_ln109_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        u_min_1_address1 = i_27_cast12_fu_97_p1;
    end else begin
        u_min_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln109_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        u_min_1_ce0 = 1'b1;
    end else begin
        u_min_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln109_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        u_min_1_ce1 = 1'b1;
    end else begin
        u_min_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln109_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        u_min_1_we0 = 1'b1;
    end else begin
        u_min_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln109_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        u_min_1_we1 = 1'b1;
    end else begin
        u_min_1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln109_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln109_fu_113_p2 = (ap_sig_allocacmp_i + 6'd4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_27_cast12_fu_97_p1 = ap_sig_allocacmp_i;

assign icmp_ln109_fu_91_p2 = ((ap_sig_allocacmp_i < 6'd36) ? 1'b1 : 1'b0);

assign or_ln109_1_fu_124_p2 = (i_reg_151 | 6'd2);

assign or_ln109_2_fu_134_p2 = (i_reg_151 | 6'd3);

assign or_ln109_fu_102_p2 = (ap_sig_allocacmp_i | 6'd1);

assign u_min_1_d0 = 32'd3205840765;

assign u_min_1_d1 = 32'd3205840765;

assign zext_ln111_1_fu_129_p1 = or_ln109_1_fu_124_p2;

assign zext_ln111_2_fu_139_p1 = or_ln109_2_fu_134_p2;

assign zext_ln111_fu_108_p1 = or_ln109_fu_102_p2;

endmodule //tracking_tracking_Pipeline_VITIS_LOOP_109_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tracking_Pipeline_VITIS_LOOP_109_113 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        u_max_1_address0,
        u_max_1_ce0,
        u_max_1_we0,
        u_max_1_d0,
        u_max_1_address1,
        u_max_1_ce1,
        u_max_1_we1,
        u_max_1_d1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] u_max_1_address0;
output   u_max_1_ce0;
output   u_max_1_we0;
output  [31:0] u_max_1_d0;
output  [5:0] u_max_1_address1;
output   u_max_1_ce1;
output   u_max_1_we1;
output  [31:0] u_max_1_d1;

reg ap_idle;
reg[5:0] u_max_1_address0;
reg u_max_1_ce0;
reg u_max_1_we0;
reg[5:0] u_max_1_address1;
reg u_max_1_ce1;
reg u_max_1_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln109_1_fu_91_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [5:0] i_28_reg_151;
wire   [63:0] i_28_cast13_fu_97_p1;
wire   [63:0] zext_ln111_3_fu_108_p1;
wire   [63:0] zext_ln111_4_fu_129_p1;
wire   [63:0] zext_ln111_fu_139_p1;
reg   [5:0] i_fu_36;
wire   [5:0] add_ln109_fu_113_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_28;
wire   [5:0] or_ln109_3_fu_102_p2;
wire   [5:0] or_ln109_4_fu_124_p2;
wire   [5:0] or_ln109_5_fu_134_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln109_1_fu_91_p2 == 1'd1)) begin
            i_fu_36 <= add_ln109_fu_113_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_36 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        i_28_reg_151 <= ap_sig_allocacmp_i_28;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln109_1_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_28 = 6'd0;
    end else begin
        ap_sig_allocacmp_i_28 = i_fu_36;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        u_max_1_address0 = zext_ln111_fu_139_p1;
    end else if (((icmp_ln109_1_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        u_max_1_address0 = zext_ln111_3_fu_108_p1;
    end else begin
        u_max_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        u_max_1_address1 = zext_ln111_4_fu_129_p1;
    end else if (((icmp_ln109_1_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        u_max_1_address1 = i_28_cast13_fu_97_p1;
    end else begin
        u_max_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln109_1_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        u_max_1_ce0 = 1'b1;
    end else begin
        u_max_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln109_1_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        u_max_1_ce1 = 1'b1;
    end else begin
        u_max_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln109_1_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        u_max_1_we0 = 1'b1;
    end else begin
        u_max_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln109_1_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        u_max_1_we1 = 1'b1;
    end else begin
        u_max_1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln109_1_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln109_fu_113_p2 = (ap_sig_allocacmp_i_28 + 6'd4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_28_cast13_fu_97_p1 = ap_sig_allocacmp_i_28;

assign icmp_ln109_1_fu_91_p2 = ((ap_sig_allocacmp_i_28 < 6'd36) ? 1'b1 : 1'b0);

assign or_ln109_3_fu_102_p2 = (ap_sig_allocacmp_i_28 | 6'd1);

assign or_ln109_4_fu_124_p2 = (i_28_reg_151 | 6'd2);

assign or_ln109_5_fu_134_p2 = (i_28_reg_151 | 6'd3);

assign u_max_1_d0 = 32'd1054179590;

assign u_max_1_d1 = 32'd1054179590;

assign zext_ln111_3_fu_108_p1 = or_ln109_3_fu_102_p2;

assign zext_ln111_4_fu_129_p1 = or_ln109_4_fu_124_p2;

assign zext_ln111_fu_139_p1 = or_ln109_5_fu_134_p2;

endmodule //tracking_tracking_Pipeline_VITIS_LOOP_109_113
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tracking_Pipeline_VITIS_LOOP_109_114 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_min_1_address0,
        x_min_1_ce0,
        x_min_1_we0,
        x_min_1_d0,
        x_min_1_address1,
        x_min_1_ce1,
        x_min_1_we1,
        x_min_1_d1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] x_min_1_address0;
output   x_min_1_ce0;
output   x_min_1_we0;
output  [31:0] x_min_1_d0;
output  [6:0] x_min_1_address1;
output   x_min_1_ce1;
output   x_min_1_we1;
output  [31:0] x_min_1_d1;

reg ap_idle;
reg[6:0] x_min_1_address0;
reg x_min_1_ce0;
reg x_min_1_we0;
reg[6:0] x_min_1_address1;
reg x_min_1_ce1;
reg x_min_1_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln109_2_fu_91_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [6:0] i_27_reg_151;
wire   [63:0] i_29_cast14_fu_97_p1;
wire   [63:0] zext_ln111_fu_108_p1;
wire   [63:0] zext_ln111_3_fu_129_p1;
wire   [63:0] zext_ln111_4_fu_139_p1;
reg   [6:0] i_fu_36;
wire   [6:0] add_ln109_fu_113_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_27;
wire   [6:0] or_ln109_fu_102_p2;
wire   [6:0] or_ln109_4_fu_124_p2;
wire   [6:0] or_ln109_5_fu_134_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln109_2_fu_91_p2 == 1'd1)) begin
            i_fu_36 <= add_ln109_fu_113_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_36 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        i_27_reg_151 <= ap_sig_allocacmp_i_27;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln109_2_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_27 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_27 = i_fu_36;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_min_1_address0 = zext_ln111_4_fu_139_p1;
    end else if (((icmp_ln109_2_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_min_1_address0 = zext_ln111_fu_108_p1;
    end else begin
        x_min_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_min_1_address1 = zext_ln111_3_fu_129_p1;
    end else if (((icmp_ln109_2_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_min_1_address1 = i_29_cast14_fu_97_p1;
    end else begin
        x_min_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln109_2_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        x_min_1_ce0 = 1'b1;
    end else begin
        x_min_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln109_2_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        x_min_1_ce1 = 1'b1;
    end else begin
        x_min_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln109_2_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        x_min_1_we0 = 1'b1;
    end else begin
        x_min_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln109_2_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        x_min_1_we1 = 1'b1;
    end else begin
        x_min_1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln109_2_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln109_fu_113_p2 = (ap_sig_allocacmp_i_27 + 7'd4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_29_cast14_fu_97_p1 = ap_sig_allocacmp_i_27;

assign icmp_ln109_2_fu_91_p2 = ((ap_sig_allocacmp_i_27 < 7'd120) ? 1'b1 : 1'b0);

assign or_ln109_4_fu_124_p2 = (i_27_reg_151 | 7'd2);

assign or_ln109_5_fu_134_p2 = (i_27_reg_151 | 7'd3);

assign or_ln109_fu_102_p2 = (ap_sig_allocacmp_i_27 | 7'd1);

assign x_min_1_d0 = 32'd3231711232;

assign x_min_1_d1 = 32'd3231711232;

assign zext_ln111_3_fu_129_p1 = or_ln109_4_fu_124_p2;

assign zext_ln111_4_fu_139_p1 = or_ln109_5_fu_134_p2;

assign zext_ln111_fu_108_p1 = or_ln109_fu_102_p2;

endmodule //tracking_tracking_Pipeline_VITIS_LOOP_109_114
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tracking_Pipeline_VITIS_LOOP_109_115 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_max_1_address0,
        x_max_1_ce0,
        x_max_1_we0,
        x_max_1_d0,
        x_max_1_address1,
        x_max_1_ce1,
        x_max_1_we1,
        x_max_1_d1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] x_max_1_address0;
output   x_max_1_ce0;
output   x_max_1_we0;
output  [31:0] x_max_1_d0;
output  [6:0] x_max_1_address1;
output   x_max_1_ce1;
output   x_max_1_we1;
output  [31:0] x_max_1_d1;

reg ap_idle;
reg[6:0] x_max_1_address0;
reg x_max_1_ce0;
reg x_max_1_we0;
reg[6:0] x_max_1_address1;
reg x_max_1_ce1;
reg x_max_1_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln109_3_fu_91_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [6:0] i_26_reg_151;
wire   [63:0] i_30_cast15_fu_97_p1;
wire   [63:0] zext_ln111_fu_108_p1;
wire   [63:0] zext_ln111_1_fu_129_p1;
wire   [63:0] zext_ln111_2_fu_139_p1;
reg   [6:0] i_fu_36;
wire   [6:0] add_ln109_fu_113_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_26;
wire   [6:0] or_ln109_fu_102_p2;
wire   [6:0] or_ln109_2_fu_124_p2;
wire   [6:0] or_ln109_3_fu_134_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln109_3_fu_91_p2 == 1'd1)) begin
            i_fu_36 <= add_ln109_fu_113_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_36 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        i_26_reg_151 <= ap_sig_allocacmp_i_26;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln109_3_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_26 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_26 = i_fu_36;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_max_1_address0 = zext_ln111_2_fu_139_p1;
    end else if (((icmp_ln109_3_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_max_1_address0 = zext_ln111_fu_108_p1;
    end else begin
        x_max_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_max_1_address1 = zext_ln111_1_fu_129_p1;
    end else if (((icmp_ln109_3_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_max_1_address1 = i_30_cast15_fu_97_p1;
    end else begin
        x_max_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln109_3_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        x_max_1_ce0 = 1'b1;
    end else begin
        x_max_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln109_3_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        x_max_1_ce1 = 1'b1;
    end else begin
        x_max_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln109_3_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        x_max_1_we0 = 1'b1;
    end else begin
        x_max_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln109_3_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        x_max_1_we1 = 1'b1;
    end else begin
        x_max_1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln109_3_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln109_fu_113_p2 = (ap_sig_allocacmp_i_26 + 7'd4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_30_cast15_fu_97_p1 = ap_sig_allocacmp_i_26;

assign icmp_ln109_3_fu_91_p2 = ((ap_sig_allocacmp_i_26 < 7'd120) ? 1'b1 : 1'b0);

assign or_ln109_2_fu_124_p2 = (i_26_reg_151 | 7'd2);

assign or_ln109_3_fu_134_p2 = (i_26_reg_151 | 7'd3);

assign or_ln109_fu_102_p2 = (ap_sig_allocacmp_i_26 | 7'd1);

assign x_max_1_d0 = 32'd1084227584;

assign x_max_1_d1 = 32'd1084227584;

assign zext_ln111_1_fu_129_p1 = or_ln109_2_fu_124_p2;

assign zext_ln111_2_fu_139_p1 = or_ln109_3_fu_134_p2;

assign zext_ln111_fu_108_p1 = or_ln109_fu_102_p2;

endmodule //tracking_tracking_Pipeline_VITIS_LOOP_109_115
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Kinf_1_address0,
        Kinf_1_ce0,
        Kinf_1_q0,
        KinfT_1_address0,
        KinfT_1_ce0,
        KinfT_1_we0,
        KinfT_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] Kinf_1_address0;
output   Kinf_1_ce0;
input  [31:0] Kinf_1_q0;
output  [5:0] KinfT_1_address0;
output   KinfT_1_ce0;
output   KinfT_1_we0;
output  [31:0] KinfT_1_d0;

reg ap_idle;
reg Kinf_1_ce0;
reg KinfT_1_ce0;
reg KinfT_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln185_fu_140_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] add_ln187_1_fu_248_p2;
reg   [5:0] add_ln187_1_reg_308;
wire   [63:0] zext_ln187_fu_235_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln187_1_fu_275_p1;
reg   [3:0] j_fu_50;
wire   [3:0] add_ln186_fu_254_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [2:0] i_fu_54;
wire   [2:0] select_ln185_1_fu_175_p3;
reg   [2:0] ap_sig_allocacmp_i_25;
reg   [5:0] indvar_flatten_fu_58;
wire   [5:0] add_ln185_3_fu_146_p2;
reg   [5:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [1:0] empty_fu_110_p1;
wire   [3:0] p_shl1_fu_122_p3;
wire   [5:0] p_shl_fu_114_p3;
wire   [5:0] p_shl1_cast_fu_130_p1;
wire   [0:0] icmp_ln186_fu_161_p2;
wire   [2:0] add_ln185_fu_155_p2;
wire   [1:0] empty_87_fu_187_p1;
wire   [3:0] p_shl1_mid1_fu_199_p3;
wire   [5:0] p_shl_mid1_fu_191_p3;
wire   [5:0] p_shl1_cast_mid1_fu_207_p1;
wire   [5:0] p_mid1_fu_211_p2;
wire   [5:0] empty_85_fu_134_p2;
wire   [3:0] select_ln185_fu_167_p3;
wire   [5:0] j_cast_fu_225_p1;
wire   [5:0] select_ln185_2_fu_217_p3;
wire   [5:0] add_ln187_fu_229_p2;
wire   [5:0] shl_ln_fu_240_p3;
wire   [5:0] zext_ln185_fu_183_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln185_fu_140_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_54 <= select_ln185_1_fu_175_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_54 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln185_fu_140_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_58 <= add_ln185_3_fu_146_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_58 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln185_fu_140_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_50 <= add_ln186_fu_254_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_50 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln185_fu_140_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln187_1_reg_308 <= add_ln187_1_fu_248_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        KinfT_1_ce0 = 1'b1;
    end else begin
        KinfT_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        KinfT_1_we0 = 1'b1;
    end else begin
        KinfT_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Kinf_1_ce0 = 1'b1;
    end else begin
        Kinf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln185_fu_140_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_25 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_25 = i_fu_54;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_58;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_50;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign KinfT_1_address0 = zext_ln187_1_fu_275_p1;

assign KinfT_1_d0 = Kinf_1_q0;

assign Kinf_1_address0 = zext_ln187_fu_235_p1;

assign add_ln185_3_fu_146_p2 = (ap_sig_allocacmp_indvar_flatten_load + 6'd1);

assign add_ln185_fu_155_p2 = (ap_sig_allocacmp_i_25 + 3'd1);

assign add_ln186_fu_254_p2 = (select_ln185_fu_167_p3 + 4'd1);

assign add_ln187_1_fu_248_p2 = (shl_ln_fu_240_p3 + zext_ln185_fu_183_p1);

assign add_ln187_fu_229_p2 = (j_cast_fu_225_p1 + select_ln185_2_fu_217_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_85_fu_134_p2 = (p_shl_fu_114_p3 - p_shl1_cast_fu_130_p1);

assign empty_87_fu_187_p1 = add_ln185_fu_155_p2[1:0];

assign empty_fu_110_p1 = ap_sig_allocacmp_i_25[1:0];

assign icmp_ln185_fu_140_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln186_fu_161_p2 = ((ap_sig_allocacmp_j_load == 4'd12) ? 1'b1 : 1'b0);

assign j_cast_fu_225_p1 = select_ln185_fu_167_p3;

assign p_mid1_fu_211_p2 = (p_shl_mid1_fu_191_p3 - p_shl1_cast_mid1_fu_207_p1);

assign p_shl1_cast_fu_130_p1 = p_shl1_fu_122_p3;

assign p_shl1_cast_mid1_fu_207_p1 = p_shl1_mid1_fu_199_p3;

assign p_shl1_fu_122_p3 = {{empty_fu_110_p1}, {2'd0}};

assign p_shl1_mid1_fu_199_p3 = {{empty_87_fu_187_p1}, {2'd0}};

assign p_shl_fu_114_p3 = {{empty_fu_110_p1}, {4'd0}};

assign p_shl_mid1_fu_191_p3 = {{empty_87_fu_187_p1}, {4'd0}};

assign select_ln185_1_fu_175_p3 = ((icmp_ln186_fu_161_p2[0:0] == 1'b1) ? add_ln185_fu_155_p2 : ap_sig_allocacmp_i_25);

assign select_ln185_2_fu_217_p3 = ((icmp_ln186_fu_161_p2[0:0] == 1'b1) ? p_mid1_fu_211_p2 : empty_85_fu_134_p2);

assign select_ln185_fu_167_p3 = ((icmp_ln186_fu_161_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign shl_ln_fu_240_p3 = {{select_ln185_fu_167_p3}, {2'd0}};

assign zext_ln185_fu_183_p1 = select_ln185_1_fu_175_p3;

assign zext_ln187_1_fu_275_p1 = add_ln187_1_reg_308;

assign zext_ln187_fu_235_p1 = add_ln187_fu_229_p2;

endmodule //tracking_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Pinf_1_address0,
        Pinf_1_ce0,
        Pinf_1_q0,
        PinfT_1_address0,
        PinfT_1_ce0,
        PinfT_1_we0,
        PinfT_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] Pinf_1_address0;
output   Pinf_1_ce0;
input  [31:0] Pinf_1_q0;
output  [7:0] PinfT_1_address0;
output   PinfT_1_ce0;
output   PinfT_1_we0;
output  [31:0] PinfT_1_d0;

reg ap_idle;
reg Pinf_1_ce0;
reg PinfT_1_ce0;
reg PinfT_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln185_fu_130_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] select_ln185_fu_157_p3;
reg   [3:0] select_ln185_reg_305;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] select_ln185_1_fu_165_p3;
reg   [3:0] select_ln185_1_reg_311;
wire   [63:0] zext_ln187_fu_217_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln187_2_fu_276_p1;
reg   [3:0] j_fu_44;
wire   [3:0] add_ln186_fu_222_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_24_fu_48;
reg   [3:0] ap_sig_allocacmp_i;
reg   [7:0] indvar_flatten11_fu_52;
wire   [7:0] add_ln185_fu_136_p2;
reg   [7:0] ap_sig_allocacmp_indvar_flatten11_load;
wire   [5:0] p_shl3_fu_112_p3;
wire   [7:0] p_shl2_fu_104_p3;
wire   [7:0] p_shl3_cast_fu_120_p1;
wire   [0:0] icmp_ln186_fu_151_p2;
wire   [3:0] add_ln185_1_fu_145_p2;
wire   [5:0] p_shl3_mid1_fu_181_p3;
wire   [7:0] p_shl2_mid1_fu_173_p3;
wire   [7:0] p_shl3_cast_mid1_fu_189_p1;
wire   [7:0] p_mid19_fu_193_p2;
wire   [7:0] empty_fu_124_p2;
wire   [7:0] j_18_cast_fu_207_p1;
wire   [7:0] select_ln185_2_fu_199_p3;
wire   [7:0] add_ln187_fu_211_p2;
wire   [5:0] shl_ln187_2_fu_253_p3;
wire   [7:0] shl_ln187_1_fu_246_p3;
wire   [7:0] zext_ln187_1_fu_260_p1;
wire   [7:0] sub_ln187_fu_264_p2;
wire   [7:0] zext_ln185_fu_243_p1;
wire   [7:0] add_ln187_1_fu_270_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln185_fu_130_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_24_fu_48 <= select_ln185_1_fu_165_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_24_fu_48 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln185_fu_130_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten11_fu_52 <= add_ln185_fu_136_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten11_fu_52 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln185_fu_130_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_44 <= add_ln186_fu_222_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_44 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln185_fu_130_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln185_1_reg_311 <= select_ln185_1_fu_165_p3;
        select_ln185_reg_305 <= select_ln185_fu_157_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        PinfT_1_ce0 = 1'b1;
    end else begin
        PinfT_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        PinfT_1_we0 = 1'b1;
    end else begin
        PinfT_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Pinf_1_ce0 = 1'b1;
    end else begin
        Pinf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln185_fu_130_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_24_fu_48;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten11_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten11_load = indvar_flatten11_fu_52;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_44;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign PinfT_1_address0 = zext_ln187_2_fu_276_p1;

assign PinfT_1_d0 = Pinf_1_q0;

assign Pinf_1_address0 = zext_ln187_fu_217_p1;

assign add_ln185_1_fu_145_p2 = (ap_sig_allocacmp_i + 4'd1);

assign add_ln185_fu_136_p2 = (ap_sig_allocacmp_indvar_flatten11_load + 8'd1);

assign add_ln186_fu_222_p2 = (select_ln185_fu_157_p3 + 4'd1);

assign add_ln187_1_fu_270_p2 = (sub_ln187_fu_264_p2 + zext_ln185_fu_243_p1);

assign add_ln187_fu_211_p2 = (j_18_cast_fu_207_p1 + select_ln185_2_fu_199_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_124_p2 = (p_shl2_fu_104_p3 - p_shl3_cast_fu_120_p1);

assign icmp_ln185_fu_130_p2 = ((ap_sig_allocacmp_indvar_flatten11_load == 8'd144) ? 1'b1 : 1'b0);

assign icmp_ln186_fu_151_p2 = ((ap_sig_allocacmp_j_load == 4'd12) ? 1'b1 : 1'b0);

assign j_18_cast_fu_207_p1 = select_ln185_fu_157_p3;

assign p_mid19_fu_193_p2 = (p_shl2_mid1_fu_173_p3 - p_shl3_cast_mid1_fu_189_p1);

assign p_shl2_fu_104_p3 = {{ap_sig_allocacmp_i}, {4'd0}};

assign p_shl2_mid1_fu_173_p3 = {{add_ln185_1_fu_145_p2}, {4'd0}};

assign p_shl3_cast_fu_120_p1 = p_shl3_fu_112_p3;

assign p_shl3_cast_mid1_fu_189_p1 = p_shl3_mid1_fu_181_p3;

assign p_shl3_fu_112_p3 = {{ap_sig_allocacmp_i}, {2'd0}};

assign p_shl3_mid1_fu_181_p3 = {{add_ln185_1_fu_145_p2}, {2'd0}};

assign select_ln185_1_fu_165_p3 = ((icmp_ln186_fu_151_p2[0:0] == 1'b1) ? add_ln185_1_fu_145_p2 : ap_sig_allocacmp_i);

assign select_ln185_2_fu_199_p3 = ((icmp_ln186_fu_151_p2[0:0] == 1'b1) ? p_mid19_fu_193_p2 : empty_fu_124_p2);

assign select_ln185_fu_157_p3 = ((icmp_ln186_fu_151_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign shl_ln187_1_fu_246_p3 = {{select_ln185_reg_305}, {4'd0}};

assign shl_ln187_2_fu_253_p3 = {{select_ln185_reg_305}, {2'd0}};

assign sub_ln187_fu_264_p2 = (shl_ln187_1_fu_246_p3 - zext_ln187_1_fu_260_p1);

assign zext_ln185_fu_243_p1 = select_ln185_1_reg_311;

assign zext_ln187_1_fu_260_p1 = shl_ln187_2_fu_253_p3;

assign zext_ln187_2_fu_276_p1 = add_ln187_1_fu_270_p2;

assign zext_ln187_fu_217_p1 = add_ln187_fu_211_p2;

endmodule //tracking_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Bdyn_1_address0,
        Bdyn_1_ce0,
        Bdyn_1_q0,
        BdynT_1_address0,
        BdynT_1_ce0,
        BdynT_1_we0,
        BdynT_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] Bdyn_1_address0;
output   Bdyn_1_ce0;
input  [31:0] Bdyn_1_q0;
output  [5:0] BdynT_1_address0;
output   BdynT_1_ce0;
output   BdynT_1_we0;
output  [31:0] BdynT_1_d0;

reg ap_idle;
reg Bdyn_1_ce0;
reg BdynT_1_ce0;
reg BdynT_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln185_fu_107_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] select_ln185_3_fu_145_p3;
reg   [3:0] select_ln185_3_reg_263;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] trunc_ln187_fu_176_p1;
reg   [1:0] trunc_ln187_reg_273;
wire   [63:0] zext_ln187_fu_171_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln187_4_fu_234_p1;
reg   [2:0] j_fu_50;
wire   [2:0] add_ln186_fu_180_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_54;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [5:0] indvar_flatten21_fu_58;
wire   [5:0] add_ln185_fu_113_p2;
reg   [5:0] ap_sig_allocacmp_indvar_flatten21_load;
wire   [0:0] icmp_ln186_fu_131_p2;
wire   [3:0] add_ln185_2_fu_125_p2;
wire   [2:0] select_ln185_fu_137_p3;
wire   [5:0] j_19_cast_fu_161_p1;
wire   [5:0] p_mid_fu_153_p3;
wire   [5:0] add_ln187_fu_165_p2;
wire   [3:0] shl_ln187_4_fu_211_p3;
wire   [5:0] shl_ln187_3_fu_204_p3;
wire   [5:0] zext_ln187_3_fu_218_p1;
wire   [5:0] sub_ln187_fu_222_p2;
wire   [5:0] zext_ln185_fu_201_p1;
wire   [5:0] add_ln187_2_fu_228_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln185_fu_107_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_54 <= select_ln185_3_fu_145_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_54 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln185_fu_107_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten21_fu_58 <= add_ln185_fu_113_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten21_fu_58 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln185_fu_107_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_50 <= add_ln186_fu_180_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_50 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln185_fu_107_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln185_3_reg_263 <= select_ln185_3_fu_145_p3;
        trunc_ln187_reg_273 <= trunc_ln187_fu_176_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BdynT_1_ce0 = 1'b1;
    end else begin
        BdynT_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BdynT_1_we0 = 1'b1;
    end else begin
        BdynT_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Bdyn_1_ce0 = 1'b1;
    end else begin
        Bdyn_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln185_fu_107_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_54;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten21_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten21_load = indvar_flatten21_fu_58;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_50;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BdynT_1_address0 = zext_ln187_4_fu_234_p1;

assign BdynT_1_d0 = Bdyn_1_q0;

assign Bdyn_1_address0 = zext_ln187_fu_171_p1;

assign add_ln185_2_fu_125_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign add_ln185_fu_113_p2 = (ap_sig_allocacmp_indvar_flatten21_load + 6'd1);

assign add_ln186_fu_180_p2 = (select_ln185_fu_137_p3 + 3'd1);

assign add_ln187_2_fu_228_p2 = (sub_ln187_fu_222_p2 + zext_ln185_fu_201_p1);

assign add_ln187_fu_165_p2 = (j_19_cast_fu_161_p1 + p_mid_fu_153_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln185_fu_107_p2 = ((ap_sig_allocacmp_indvar_flatten21_load == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln186_fu_131_p2 = ((ap_sig_allocacmp_j_load == 3'd4) ? 1'b1 : 1'b0);

assign j_19_cast_fu_161_p1 = select_ln185_fu_137_p3;

assign p_mid_fu_153_p3 = {{select_ln185_3_fu_145_p3}, {2'd0}};

assign select_ln185_3_fu_145_p3 = ((icmp_ln186_fu_131_p2[0:0] == 1'b1) ? add_ln185_2_fu_125_p2 : ap_sig_allocacmp_i_load);

assign select_ln185_fu_137_p3 = ((icmp_ln186_fu_131_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_load);

assign shl_ln187_3_fu_204_p3 = {{trunc_ln187_reg_273}, {4'd0}};

assign shl_ln187_4_fu_211_p3 = {{trunc_ln187_reg_273}, {2'd0}};

assign sub_ln187_fu_222_p2 = (shl_ln187_3_fu_204_p3 - zext_ln187_3_fu_218_p1);

assign trunc_ln187_fu_176_p1 = select_ln185_fu_137_p3[1:0];

assign zext_ln185_fu_201_p1 = select_ln185_3_reg_263;

assign zext_ln187_3_fu_218_p1 = shl_ln187_4_fu_211_p3;

assign zext_ln187_4_fu_234_p1 = add_ln187_2_fu_228_p2;

assign zext_ln187_fu_171_p1 = add_ln187_fu_165_p2;

endmodule //tracking_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_Xref_data_ROM_AUTO_1R (
address0, ce0, q0, reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 12;
parameter AddressRange = 3612;

input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_Xref_data_ROM_AUTO_1R.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[address0];
    end
end



endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sub_ln71,
        Xref_1_address0,
        Xref_1_ce0,
        Xref_1_we0,
        Xref_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] sub_ln71;
output  [6:0] Xref_1_address0;
output   Xref_1_ce0;
output   Xref_1_we0;
output  [31:0] Xref_1_d0;

reg ap_idle;
reg Xref_1_ce0;
reg Xref_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln210_fu_164_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [11:0] Xref_data_address0;
reg    Xref_data_ce0;
wire   [31:0] Xref_data_q0;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] add_ln212_1_fu_292_p2;
reg   [6:0] add_ln212_1_reg_382;
wire   [63:0] zext_ln212_fu_287_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln212_1_fu_335_p1;
reg   [3:0] j_fu_50;
wire   [3:0] add_ln211_fu_298_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [6:0] k_1_fu_54;
wire   [6:0] add_ln211_1_fu_304_p2;
reg   [6:0] ap_sig_allocacmp_k_1_load;
reg   [6:0] k_fu_58;
wire   [6:0] select_ln210_4_fu_265_p3;
reg   [6:0] ap_sig_allocacmp_k_load;
reg   [3:0] i_fu_62;
wire   [3:0] select_ln210_3_fu_257_p3;
reg   [3:0] ap_sig_allocacmp_i_24;
reg   [6:0] indvar_flatten31_fu_66;
wire   [6:0] add_ln210_2_fu_170_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten31_load;
wire   [2:0] empty_fu_134_p1;
wire   [5:0] p_shl5_fu_146_p3;
wire   [6:0] p_shl4_fu_138_p3;
wire   [6:0] p_shl15_cast_fu_154_p1;
wire   [0:0] icmp_ln211_fu_197_p2;
wire   [6:0] add_ln210_1_fu_191_p2;
wire   [3:0] add_ln210_fu_185_p2;
wire   [2:0] empty_83_fu_219_p1;
wire   [5:0] p_shl15_mid1_fu_231_p3;
wire   [6:0] p_shl14_mid1_fu_223_p3;
wire   [6:0] p_shl15_cast_mid1_fu_239_p1;
wire   [6:0] p_mid129_fu_243_p2;
wire   [6:0] empty_81_fu_158_p2;
wire   [3:0] select_ln210_1_fu_211_p3;
wire   [6:0] select_ln210_fu_203_p3;
wire   [11:0] k_1_cast_fu_277_p1;
wire   [11:0] add_ln212_fu_281_p2;
wire   [6:0] j_20_cast_fu_273_p1;
wire   [6:0] select_ln210_2_fu_249_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_Xref_data_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 3612 ),
    .AddressWidth( 12 ))
Xref_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Xref_data_address0),
    .ce0(Xref_data_ce0),
    .q0(Xref_data_q0)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln210_fu_164_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_62 <= select_ln210_3_fu_257_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_62 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln210_fu_164_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten31_fu_66 <= add_ln210_2_fu_170_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten31_fu_66 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln210_fu_164_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_50 <= add_ln211_fu_298_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_50 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln210_fu_164_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_1_fu_54 <= add_ln211_1_fu_304_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_1_fu_54 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln210_fu_164_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_58 <= select_ln210_4_fu_265_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_58 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln210_fu_164_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln212_1_reg_382 <= add_ln212_1_fu_292_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Xref_1_ce0 = 1'b1;
    end else begin
        Xref_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Xref_1_we0 = 1'b1;
    end else begin
        Xref_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Xref_data_ce0 = 1'b1;
    end else begin
        Xref_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln210_fu_164_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_24 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_24 = i_fu_62;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten31_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten31_load = indvar_flatten31_fu_66;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_50;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_1_load = 7'd0;
    end else begin
        ap_sig_allocacmp_k_1_load = k_1_fu_54;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_load = 7'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_58;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Xref_1_address0 = zext_ln212_1_fu_335_p1;

assign Xref_1_d0 = Xref_data_q0;

assign Xref_data_address0 = zext_ln212_fu_287_p1;

assign add_ln210_1_fu_191_p2 = (ap_sig_allocacmp_k_load + 7'd12);

assign add_ln210_2_fu_170_p2 = (ap_sig_allocacmp_indvar_flatten31_load + 7'd1);

assign add_ln210_fu_185_p2 = (ap_sig_allocacmp_i_24 + 4'd1);

assign add_ln211_1_fu_304_p2 = (select_ln210_fu_203_p3 + 7'd1);

assign add_ln211_fu_298_p2 = (select_ln210_1_fu_211_p3 + 4'd1);

assign add_ln212_1_fu_292_p2 = (j_20_cast_fu_273_p1 + select_ln210_2_fu_249_p3);

assign add_ln212_fu_281_p2 = (k_1_cast_fu_277_p1 + sub_ln71);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_81_fu_158_p2 = (p_shl4_fu_138_p3 - p_shl15_cast_fu_154_p1);

assign empty_83_fu_219_p1 = add_ln210_fu_185_p2[2:0];

assign empty_fu_134_p1 = ap_sig_allocacmp_i_24[2:0];

assign icmp_ln210_fu_164_p2 = ((ap_sig_allocacmp_indvar_flatten31_load == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln211_fu_197_p2 = ((ap_sig_allocacmp_j_load == 4'd12) ? 1'b1 : 1'b0);

assign j_20_cast_fu_273_p1 = select_ln210_1_fu_211_p3;

assign k_1_cast_fu_277_p1 = select_ln210_fu_203_p3;

assign p_mid129_fu_243_p2 = (p_shl14_mid1_fu_223_p3 - p_shl15_cast_mid1_fu_239_p1);

assign p_shl14_mid1_fu_223_p3 = {{empty_83_fu_219_p1}, {4'd0}};

assign p_shl15_cast_fu_154_p1 = p_shl5_fu_146_p3;

assign p_shl15_cast_mid1_fu_239_p1 = p_shl15_mid1_fu_231_p3;

assign p_shl15_mid1_fu_231_p3 = {{add_ln210_fu_185_p2}, {2'd0}};

assign p_shl4_fu_138_p3 = {{empty_fu_134_p1}, {4'd0}};

assign p_shl5_fu_146_p3 = {{ap_sig_allocacmp_i_24}, {2'd0}};

assign select_ln210_1_fu_211_p3 = ((icmp_ln211_fu_197_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign select_ln210_2_fu_249_p3 = ((icmp_ln211_fu_197_p2[0:0] == 1'b1) ? p_mid129_fu_243_p2 : empty_81_fu_158_p2);

assign select_ln210_3_fu_257_p3 = ((icmp_ln211_fu_197_p2[0:0] == 1'b1) ? add_ln210_fu_185_p2 : ap_sig_allocacmp_i_24);

assign select_ln210_4_fu_265_p3 = ((icmp_ln211_fu_197_p2[0:0] == 1'b1) ? add_ln210_1_fu_191_p2 : ap_sig_allocacmp_k_load);

assign select_ln210_fu_203_p3 = ((icmp_ln211_fu_197_p2[0:0] == 1'b1) ? add_ln210_1_fu_191_p2 : ap_sig_allocacmp_k_1_load);

assign zext_ln212_1_fu_335_p1 = add_ln212_1_reg_382;

assign zext_ln212_fu_287_p1 = add_ln212_fu_281_p2;

endmodule //tracking_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_u_1_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0, address1, ce1, q1,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 6;
parameter AddressRange = 36;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_u_1_RAM_AUTO_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        q1 <= ram[address1];
    end
end


endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_u_min_1_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0, address1, ce1, d1, we1,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 6;
parameter AddressRange = 36;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_u_min_1_RAM_AUTO_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
    end
end


endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s1_1_address0,
        s1_1_ce0,
        s1_1_q0,
        vnew_1_address0,
        vnew_1_ce0,
        vnew_1_q0,
        g_1_address0,
        g_1_ce0,
        g_1_we0,
        g_1_d0,
        grp_fu_174_p_din0,
        grp_fu_174_p_din1,
        grp_fu_174_p_opcode,
        grp_fu_174_p_dout0,
        grp_fu_174_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] s1_1_address0;
output   s1_1_ce0;
input  [31:0] s1_1_q0;
output  [6:0] vnew_1_address0;
output   vnew_1_ce0;
input  [31:0] vnew_1_q0;
output  [6:0] g_1_address0;
output   g_1_ce0;
output   g_1_we0;
output  [31:0] g_1_d0;
output  [31:0] grp_fu_174_p_din0;
output  [31:0] grp_fu_174_p_din1;
output  [0:0] grp_fu_174_p_opcode;
input  [31:0] grp_fu_174_p_dout0;
output   grp_fu_174_p_ce;

reg ap_idle;
reg s1_1_ce0;
reg vnew_1_ce0;
reg g_1_ce0;
reg g_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln167_fu_155_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln169_fu_246_p1;
reg   [63:0] zext_ln169_reg_298;
reg   [63:0] zext_ln169_reg_298_pp0_iter1_reg;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_46;
wire   [3:0] add_ln168_fu_252_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_50;
wire   [3:0] select_ln167_4_fu_228_p3;
reg   [3:0] ap_sig_allocacmp_i_19;
reg   [6:0] indvar_flatten9_fu_54;
wire   [6:0] add_ln167_fu_161_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten9_load;
wire   [2:0] empty_fu_125_p1;
wire   [5:0] p_shl3_fu_137_p3;
wire   [6:0] p_shl2_fu_129_p3;
wire   [6:0] p_shl3_cast_fu_145_p1;
wire   [0:0] icmp_ln168_fu_176_p2;
wire   [3:0] add_ln167_2_fu_170_p2;
wire   [2:0] empty_77_fu_190_p1;
wire   [5:0] p_shl3_mid1_fu_202_p3;
wire   [6:0] p_shl2_mid1_fu_194_p3;
wire   [6:0] p_shl3_cast_mid1_fu_210_p1;
wire   [6:0] p_mid17_fu_214_p2;
wire   [6:0] empty_75_fu_149_p2;
wire   [3:0] select_ln167_fu_182_p3;
wire   [6:0] j_17_cast_fu_236_p1;
wire   [6:0] select_ln167_3_fu_220_p3;
wire   [6:0] add_ln169_fu_240_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_50 <= select_ln167_4_fu_228_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten9_fu_54 <= add_ln167_fu_161_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten9_fu_54 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_46 <= add_ln168_fu_252_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_46 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        zext_ln169_reg_298_pp0_iter1_reg[6 : 0] <= zext_ln169_reg_298[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_fu_155_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln169_reg_298[6 : 0] <= zext_ln169_fu_246_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln167_fu_155_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_19 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_19 = i_fu_50;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten9_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten9_load = indvar_flatten9_fu_54;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        g_1_ce0 = 1'b1;
    end else begin
        g_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        g_1_we0 = 1'b1;
    end else begin
        g_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s1_1_ce0 = 1'b1;
    end else begin
        s1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vnew_1_ce0 = 1'b1;
    end else begin
        vnew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln167_2_fu_170_p2 = (ap_sig_allocacmp_i_19 + 4'd1);

assign add_ln167_fu_161_p2 = (ap_sig_allocacmp_indvar_flatten9_load + 7'd1);

assign add_ln168_fu_252_p2 = (select_ln167_fu_182_p3 + 4'd1);

assign add_ln169_fu_240_p2 = (j_17_cast_fu_236_p1 + select_ln167_3_fu_220_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_75_fu_149_p2 = (p_shl2_fu_129_p3 - p_shl3_cast_fu_145_p1);

assign empty_77_fu_190_p1 = add_ln167_2_fu_170_p2[2:0];

assign empty_fu_125_p1 = ap_sig_allocacmp_i_19[2:0];

assign g_1_address0 = zext_ln169_reg_298_pp0_iter1_reg;

assign g_1_d0 = grp_fu_174_p_dout0;

assign grp_fu_174_p_ce = 1'b1;

assign grp_fu_174_p_din0 = s1_1_q0;

assign grp_fu_174_p_din1 = vnew_1_q0;

assign grp_fu_174_p_opcode = 2'd1;

assign icmp_ln167_fu_155_p2 = ((ap_sig_allocacmp_indvar_flatten9_load == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln168_fu_176_p2 = ((ap_sig_allocacmp_j_load == 4'd12) ? 1'b1 : 1'b0);

assign j_17_cast_fu_236_p1 = select_ln167_fu_182_p3;

assign p_mid17_fu_214_p2 = (p_shl2_mid1_fu_194_p3 - p_shl3_cast_mid1_fu_210_p1);

assign p_shl2_fu_129_p3 = {{empty_fu_125_p1}, {4'd0}};

assign p_shl2_mid1_fu_194_p3 = {{empty_77_fu_190_p1}, {4'd0}};

assign p_shl3_cast_fu_145_p1 = p_shl3_fu_137_p3;

assign p_shl3_cast_mid1_fu_210_p1 = p_shl3_mid1_fu_202_p3;

assign p_shl3_fu_137_p3 = {{ap_sig_allocacmp_i_19}, {2'd0}};

assign p_shl3_mid1_fu_202_p3 = {{add_ln167_2_fu_170_p2}, {2'd0}};

assign s1_1_address0 = zext_ln169_fu_246_p1;

assign select_ln167_3_fu_220_p3 = ((icmp_ln168_fu_176_p2[0:0] == 1'b1) ? p_mid17_fu_214_p2 : empty_75_fu_149_p2);

assign select_ln167_4_fu_228_p3 = ((icmp_ln168_fu_176_p2[0:0] == 1'b1) ? add_ln167_2_fu_170_p2 : ap_sig_allocacmp_i_19);

assign select_ln167_fu_182_p3 = ((icmp_ln168_fu_176_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign vnew_1_address0 = zext_ln169_fu_246_p1;

assign zext_ln169_fu_246_p1 = add_ln169_fu_240_p2;

always @ (posedge ap_clk) begin
    zext_ln169_reg_298[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln169_reg_298_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        g_1_address0,
        g_1_ce0,
        g_1_q0,
        x_1_address0,
        x_1_ce0,
        x_1_q0,
        s1_1_address0,
        s1_1_ce0,
        s1_1_we0,
        s1_1_d0,
        grp_fu_174_p_din0,
        grp_fu_174_p_din1,
        grp_fu_174_p_opcode,
        grp_fu_174_p_dout0,
        grp_fu_174_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] g_1_address0;
output   g_1_ce0;
input  [31:0] g_1_q0;
output  [6:0] x_1_address0;
output   x_1_ce0;
input  [31:0] x_1_q0;
output  [6:0] s1_1_address0;
output   s1_1_ce0;
output   s1_1_we0;
output  [31:0] s1_1_d0;
output  [31:0] grp_fu_174_p_din0;
output  [31:0] grp_fu_174_p_din1;
output  [0:0] grp_fu_174_p_opcode;
input  [31:0] grp_fu_174_p_dout0;
output   grp_fu_174_p_ce;

reg ap_idle;
reg g_1_ce0;
reg x_1_ce0;
reg s1_1_ce0;
reg s1_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln176_fu_155_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln178_fu_246_p1;
reg   [63:0] zext_ln178_reg_298;
reg   [63:0] zext_ln178_reg_298_pp0_iter1_reg;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_46;
wire   [3:0] add_ln177_fu_252_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_50;
wire   [3:0] select_ln176_4_fu_228_p3;
reg   [3:0] ap_sig_allocacmp_i_18;
reg   [6:0] indvar_flatten_fu_54;
wire   [6:0] add_ln176_fu_161_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [2:0] empty_fu_125_p1;
wire   [5:0] p_shl1_fu_137_p3;
wire   [6:0] p_shl_fu_129_p3;
wire   [6:0] p_shl1_cast_fu_145_p1;
wire   [0:0] icmp_ln177_fu_176_p2;
wire   [3:0] add_ln176_2_fu_170_p2;
wire   [2:0] empty_74_fu_190_p1;
wire   [5:0] p_shl1_mid1_fu_202_p3;
wire   [6:0] p_shl_mid1_fu_194_p3;
wire   [6:0] p_shl1_cast_mid1_fu_210_p1;
wire   [6:0] p_mid1_fu_214_p2;
wire   [6:0] empty_72_fu_149_p2;
wire   [3:0] select_ln176_fu_182_p3;
wire   [6:0] j_16_cast_fu_236_p1;
wire   [6:0] select_ln176_3_fu_220_p3;
wire   [6:0] add_ln178_fu_240_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln176_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_50 <= select_ln176_4_fu_228_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln176_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_54 <= add_ln176_fu_161_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_54 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln176_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_46 <= add_ln177_fu_252_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_46 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        zext_ln178_reg_298_pp0_iter1_reg[6 : 0] <= zext_ln178_reg_298[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln176_fu_155_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln178_reg_298[6 : 0] <= zext_ln178_fu_246_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln176_fu_155_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_18 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_18 = i_fu_50;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_54;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        g_1_ce0 = 1'b1;
    end else begin
        g_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s1_1_ce0 = 1'b1;
    end else begin
        s1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s1_1_we0 = 1'b1;
    end else begin
        s1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_1_ce0 = 1'b1;
    end else begin
        x_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln176_2_fu_170_p2 = (ap_sig_allocacmp_i_18 + 4'd1);

assign add_ln176_fu_161_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln177_fu_252_p2 = (select_ln176_fu_182_p3 + 4'd1);

assign add_ln178_fu_240_p2 = (j_16_cast_fu_236_p1 + select_ln176_3_fu_220_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_72_fu_149_p2 = (p_shl_fu_129_p3 - p_shl1_cast_fu_145_p1);

assign empty_74_fu_190_p1 = add_ln176_2_fu_170_p2[2:0];

assign empty_fu_125_p1 = ap_sig_allocacmp_i_18[2:0];

assign g_1_address0 = zext_ln178_fu_246_p1;

assign grp_fu_174_p_ce = 1'b1;

assign grp_fu_174_p_din0 = g_1_q0;

assign grp_fu_174_p_din1 = x_1_q0;

assign grp_fu_174_p_opcode = 2'd0;

assign icmp_ln176_fu_155_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln177_fu_176_p2 = ((ap_sig_allocacmp_j_load == 4'd12) ? 1'b1 : 1'b0);

assign j_16_cast_fu_236_p1 = select_ln176_fu_182_p3;

assign p_mid1_fu_214_p2 = (p_shl_mid1_fu_194_p3 - p_shl1_cast_mid1_fu_210_p1);

assign p_shl1_cast_fu_145_p1 = p_shl1_fu_137_p3;

assign p_shl1_cast_mid1_fu_210_p1 = p_shl1_mid1_fu_202_p3;

assign p_shl1_fu_137_p3 = {{ap_sig_allocacmp_i_18}, {2'd0}};

assign p_shl1_mid1_fu_202_p3 = {{add_ln176_2_fu_170_p2}, {2'd0}};

assign p_shl_fu_129_p3 = {{empty_fu_125_p1}, {4'd0}};

assign p_shl_mid1_fu_194_p3 = {{empty_74_fu_190_p1}, {4'd0}};

assign s1_1_address0 = zext_ln178_reg_298_pp0_iter1_reg;

assign s1_1_d0 = grp_fu_174_p_dout0;

assign select_ln176_3_fu_220_p3 = ((icmp_ln177_fu_176_p2[0:0] == 1'b1) ? p_mid1_fu_214_p2 : empty_72_fu_149_p2);

assign select_ln176_4_fu_228_p3 = ((icmp_ln177_fu_176_p2[0:0] == 1'b1) ? add_ln176_2_fu_170_p2 : ap_sig_allocacmp_i_18);

assign select_ln176_fu_182_p3 = ((icmp_ln177_fu_176_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign x_1_address0 = zext_ln178_fu_246_p1;

assign zext_ln178_fu_246_p1 = add_ln178_fu_240_p2;

always @ (posedge ap_clk) begin
    zext_ln178_reg_298[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln178_reg_298_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_dual (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y_1_address0,
        y_1_ce0,
        y_1_we0,
        y_1_d0,
        y_1_q0,
        u_1_address0,
        u_1_ce0,
        u_1_q0,
        m1_1_address0,
        m1_1_ce0,
        m1_1_we0,
        m1_1_d0,
        m1_1_q0,
        g_1_address0,
        g_1_ce0,
        g_1_we0,
        g_1_d0,
        g_1_q0,
        x_1_address0,
        x_1_ce0,
        x_1_q0,
        s1_1_address0,
        s1_1_ce0,
        s1_1_we0,
        s1_1_d0,
        s1_1_q0,
        vnew_1_address0,
        vnew_1_ce0,
        vnew_1_q0,
        znew_1_address0,
        znew_1_ce0,
        znew_1_q0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] y_1_address0;
output   y_1_ce0;
output   y_1_we0;
output  [31:0] y_1_d0;
input  [31:0] y_1_q0;
output  [5:0] u_1_address0;
output   u_1_ce0;
input  [31:0] u_1_q0;
output  [5:0] m1_1_address0;
output   m1_1_ce0;
output   m1_1_we0;
output  [31:0] m1_1_d0;
input  [31:0] m1_1_q0;
output  [6:0] g_1_address0;
output   g_1_ce0;
output   g_1_we0;
output  [31:0] g_1_d0;
input  [31:0] g_1_q0;
output  [6:0] x_1_address0;
output   x_1_ce0;
input  [31:0] x_1_q0;
output  [6:0] s1_1_address0;
output   s1_1_ce0;
output   s1_1_we0;
output  [31:0] s1_1_d0;
input  [31:0] s1_1_q0;
output  [6:0] vnew_1_address0;
output   vnew_1_ce0;
input  [31:0] vnew_1_q0;
output  [5:0] znew_1_address0;
output   znew_1_ce0;
input  [31:0] znew_1_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] y_1_address0;
reg y_1_ce0;
reg y_1_we0;
reg u_1_ce0;
reg[5:0] m1_1_address0;
reg m1_1_ce0;
reg m1_1_we0;
reg[6:0] g_1_address0;
reg g_1_ce0;
reg g_1_we0;
reg[6:0] s1_1_address0;
reg s1_1_ce0;
reg s1_1_we0;
reg znew_1_ce0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] add_ln176_fu_198_p2;
reg   [3:0] add_ln176_reg_312;
wire    ap_CS_fsm_state2;
wire   [5:0] tmp_fu_204_p3;
reg   [5:0] tmp_reg_317;
wire   [0:0] icmp_ln176_fu_192_p2;
wire   [2:0] add_ln177_fu_227_p2;
reg   [2:0] add_ln177_reg_332;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln178_fu_238_p1;
reg   [63:0] zext_ln178_reg_337;
wire   [0:0] icmp_ln177_fu_221_p2;
wire    ap_CS_fsm_state4;
wire   [3:0] add_ln167_fu_257_p2;
reg   [3:0] add_ln167_reg_365;
wire    ap_CS_fsm_state6;
wire   [5:0] tmp_s_fu_263_p3;
reg   [5:0] tmp_s_reg_370;
wire   [0:0] icmp_ln167_fu_251_p2;
wire   [2:0] add_ln168_fu_281_p2;
reg   [2:0] add_ln168_reg_378;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln169_fu_292_p1;
reg   [63:0] zext_ln169_reg_383;
wire   [0:0] icmp_ln168_fu_275_p2;
wire    ap_CS_fsm_state8;
wire    grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_ap_start;
wire    grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_ap_done;
wire    grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_ap_idle;
wire    grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_ap_ready;
wire   [6:0] grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_g_1_address0;
wire    grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_g_1_ce0;
wire   [6:0] grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_x_1_address0;
wire    grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_x_1_ce0;
wire   [6:0] grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_s1_1_address0;
wire    grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_s1_1_ce0;
wire    grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_s1_1_we0;
wire   [31:0] grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_s1_1_d0;
wire   [31:0] grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_grp_fu_174_p_din0;
wire   [31:0] grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_grp_fu_174_p_din1;
wire   [0:0] grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_grp_fu_174_p_opcode;
wire    grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_grp_fu_174_p_ce;
wire    grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_start;
wire    grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_done;
wire    grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_idle;
wire    grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_ready;
wire   [6:0] grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_s1_1_address0;
wire    grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_s1_1_ce0;
wire   [6:0] grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_vnew_1_address0;
wire    grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_vnew_1_ce0;
wire   [6:0] grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_g_1_address0;
wire    grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_g_1_ce0;
wire    grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_g_1_we0;
wire   [31:0] grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_g_1_d0;
wire   [31:0] grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_grp_fu_174_p_din0;
wire   [31:0] grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_grp_fu_174_p_din1;
wire   [0:0] grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_grp_fu_174_p_opcode;
wire    grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_grp_fu_174_p_ce;
reg   [2:0] j_reg_132;
wire    ap_CS_fsm_state5;
reg   [2:0] j_9_reg_143;
wire    ap_CS_fsm_state9;
reg    grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_ap_start_reg;
wire    ap_CS_fsm_state10;
reg    grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg   [3:0] i_fu_56;
reg   [3:0] i_20_fu_60;
wire   [31:0] grp_fu_174_p2;
reg   [31:0] grp_fu_174_p0;
reg   [31:0] grp_fu_174_p1;
wire   [5:0] zext_ln177_fu_217_p1;
wire   [5:0] add_ln178_fu_233_p2;
wire   [5:0] zext_ln168_fu_271_p1;
wire   [5:0] add_ln169_fu_287_p2;
reg   [1:0] grp_fu_174_opcode;
reg    grp_fu_174_ce;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_ap_start_reg = 1'b0;
#0 grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_start_reg = 1'b0;
end

tracking_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2 grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_ap_start),
    .ap_done(grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_ap_done),
    .ap_idle(grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_ap_idle),
    .ap_ready(grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_ap_ready),
    .g_1_address0(grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_g_1_address0),
    .g_1_ce0(grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_g_1_ce0),
    .g_1_q0(g_1_q0),
    .x_1_address0(grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_x_1_address0),
    .x_1_ce0(grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_x_1_ce0),
    .x_1_q0(x_1_q0),
    .s1_1_address0(grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_s1_1_address0),
    .s1_1_ce0(grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_s1_1_ce0),
    .s1_1_we0(grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_s1_1_we0),
    .s1_1_d0(grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_s1_1_d0),
    .grp_fu_174_p_din0(grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_grp_fu_174_p_din0),
    .grp_fu_174_p_din1(grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_grp_fu_174_p_din1),
    .grp_fu_174_p_opcode(grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_grp_fu_174_p_opcode),
    .grp_fu_174_p_dout0(grp_fu_174_p2),
    .grp_fu_174_p_ce(grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_grp_fu_174_p_ce)
);

tracking_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2 grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_start),
    .ap_done(grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_done),
    .ap_idle(grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_idle),
    .ap_ready(grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_ready),
    .s1_1_address0(grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_s1_1_address0),
    .s1_1_ce0(grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_s1_1_ce0),
    .s1_1_q0(s1_1_q0),
    .vnew_1_address0(grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_vnew_1_address0),
    .vnew_1_ce0(grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_vnew_1_ce0),
    .vnew_1_q0(vnew_1_q0),
    .g_1_address0(grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_g_1_address0),
    .g_1_ce0(grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_g_1_ce0),
    .g_1_we0(grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_g_1_we0),
    .g_1_d0(grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_g_1_d0),
    .grp_fu_174_p_din0(grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_grp_fu_174_p_din0),
    .grp_fu_174_p_din1(grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_grp_fu_174_p_din1),
    .grp_fu_174_p_opcode(grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_grp_fu_174_p_opcode),
    .grp_fu_174_p_dout0(grp_fu_174_p2),
    .grp_fu_174_p_ce(grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_grp_fu_174_p_ce)
);

tracking_faddfsub_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_2_full_dsp_1_U117(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_174_p0),
    .din1(grp_fu_174_p1),
    .opcode(grp_fu_174_opcode),
    .ce(grp_fu_174_ce),
    .dout(grp_fu_174_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_start_reg <= 1'b1;
        end else if ((grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_ready == 1'b1)) begin
            grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln167_fu_251_p2 == 1'd1))) begin
            grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_ap_start_reg <= 1'b1;
        end else if ((grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_ap_ready == 1'b1)) begin
            grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln176_fu_192_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_20_fu_60 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln168_fu_275_p2 == 1'd1))) begin
        i_20_fu_60 <= add_ln167_reg_365;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_56 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln177_fu_221_p2 == 1'd1))) begin
        i_fu_56 <= add_ln176_reg_312;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln167_fu_251_p2 == 1'd0))) begin
        j_9_reg_143 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_9_reg_143 <= add_ln168_reg_378;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln176_fu_192_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_132 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_132 <= add_ln177_reg_332;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln167_reg_365 <= add_ln167_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln168_reg_378 <= add_ln168_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln176_reg_312 <= add_ln176_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln177_reg_332 <= add_ln177_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln176_fu_192_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_317[5 : 2] <= tmp_fu_204_p3[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln167_fu_251_p2 == 1'd0))) begin
        tmp_s_reg_370[5 : 2] <= tmp_s_fu_263_p3[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln168_fu_275_p2 == 1'd0))) begin
        zext_ln169_reg_383[5 : 0] <= zext_ln169_fu_292_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln177_fu_221_p2 == 1'd0))) begin
        zext_ln178_reg_337[5 : 0] <= zext_ln178_fu_238_p1[5 : 0];
    end
end

always @ (*) begin
    if ((grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_ap_done == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_done == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state12) & (grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_done == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        g_1_address0 = grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_g_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        g_1_address0 = grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_g_1_address0;
    end else begin
        g_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        g_1_ce0 = grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_g_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        g_1_ce0 = grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_g_1_ce0;
    end else begin
        g_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        g_1_we0 = grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_g_1_we0;
    end else begin
        g_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_174_ce = grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_grp_fu_174_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_174_ce = grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_grp_fu_174_p_ce;
    end else begin
        grp_fu_174_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_174_opcode = grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_grp_fu_174_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_174_opcode = grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_grp_fu_174_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_174_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_174_opcode = 2'd0;
    end else begin
        grp_fu_174_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_174_p0 = grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_grp_fu_174_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_174_p0 = grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_grp_fu_174_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_174_p0 = m1_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_174_p0 = y_1_q0;
    end else begin
        grp_fu_174_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_174_p1 = grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_grp_fu_174_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_174_p1 = grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_grp_fu_174_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_174_p1 = znew_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_174_p1 = u_1_q0;
    end else begin
        grp_fu_174_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        m1_1_address0 = zext_ln169_fu_292_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m1_1_address0 = zext_ln178_reg_337;
    end else begin
        m1_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        m1_1_ce0 = 1'b1;
    end else begin
        m1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m1_1_we0 = 1'b1;
    end else begin
        m1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        s1_1_address0 = grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_s1_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        s1_1_address0 = grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_s1_1_address0;
    end else begin
        s1_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        s1_1_ce0 = grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_s1_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        s1_1_ce0 = grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_s1_1_ce0;
    end else begin
        s1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        s1_1_we0 = grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_s1_1_we0;
    end else begin
        s1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        u_1_ce0 = 1'b1;
    end else begin
        u_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        y_1_address0 = zext_ln169_reg_383;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        y_1_address0 = zext_ln178_fu_238_p1;
    end else begin
        y_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3))) begin
        y_1_ce0 = 1'b1;
    end else begin
        y_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        y_1_we0 = 1'b1;
    end else begin
        y_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        znew_1_ce0 = 1'b1;
    end else begin
        znew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln176_fu_192_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln177_fu_221_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln167_fu_251_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln168_fu_275_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln167_fu_257_p2 = (i_20_fu_60 + 4'd1);

assign add_ln168_fu_281_p2 = (j_9_reg_143 + 3'd1);

assign add_ln169_fu_287_p2 = (zext_ln168_fu_271_p1 + tmp_s_reg_370);

assign add_ln176_fu_198_p2 = (i_fu_56 + 4'd1);

assign add_ln177_fu_227_p2 = (j_reg_132 + 3'd1);

assign add_ln178_fu_233_p2 = (zext_ln177_fu_217_p1 + tmp_reg_317);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign g_1_d0 = grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_g_1_d0;

assign grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_start = grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_ap_start_reg;

assign grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_ap_start = grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_ap_start_reg;

assign icmp_ln167_fu_251_p2 = ((i_20_fu_60 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln168_fu_275_p2 = ((j_9_reg_143 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln176_fu_192_p2 = ((i_fu_56 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln177_fu_221_p2 = ((j_reg_132 == 3'd4) ? 1'b1 : 1'b0);

assign m1_1_d0 = grp_fu_174_p2;

assign s1_1_d0 = grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_s1_1_d0;

assign tmp_fu_204_p3 = {{i_fu_56}, {2'd0}};

assign tmp_s_fu_263_p3 = {{i_20_fu_60}, {2'd0}};

assign u_1_address0 = zext_ln178_fu_238_p1;

assign vnew_1_address0 = grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_vnew_1_address0;

assign vnew_1_ce0 = grp_update_dual_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_164_vnew_1_ce0;

assign x_1_address0 = grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_x_1_address0;

assign x_1_ce0 = grp_update_dual_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_154_x_1_ce0;

assign y_1_d0 = grp_fu_174_p2;

assign zext_ln168_fu_271_p1 = j_9_reg_143;

assign zext_ln169_fu_292_p1 = add_ln169_fu_287_p2;

assign zext_ln177_fu_217_p1 = j_reg_132;

assign zext_ln178_fu_238_p1 = add_ln178_fu_233_p2;

assign znew_1_address0 = zext_ln169_fu_292_p1;

always @ (posedge ap_clk) begin
    tmp_reg_317[1:0] <= 2'b00;
    zext_ln178_reg_337[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_s_reg_370[1:0] <= 2'b00;
    zext_ln169_reg_383[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_update_dual
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_col_h1_address0,
        p_col_h1_ce0,
        p_col_h1_we0,
        p_col_h1_d0,
        tiny_x3_address0,
        tiny_x3_ce0,
        tiny_x3_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] p_col_h1_address0;
output   p_col_h1_ce0;
output   p_col_h1_we0;
output  [31:0] p_col_h1_d0;
output  [3:0] tiny_x3_address0;
output   tiny_x3_ce0;
input  [31:0] tiny_x3_q0;

reg ap_idle;
reg p_col_h1_ce0;
reg p_col_h1_we0;
reg tiny_x3_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln72_fu_70_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] j_8_cast_fu_82_p1;
reg   [63:0] j_8_cast_reg_117;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_32;
wire   [3:0] add_ln72_fu_76_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_5;
wire   [31:0] bitcast_ln73_fu_92_p1;
wire   [31:0] xor_ln73_fu_96_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln72_fu_70_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_32 <= add_ln72_fu_76_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_32 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_fu_70_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_8_cast_reg_117[3 : 0] <= j_8_cast_fu_82_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_70_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_5 = 4'd0;
    end else begin
        ap_sig_allocacmp_j_5 = j_fu_32;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_col_h1_ce0 = 1'b1;
    end else begin
        p_col_h1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_col_h1_we0 = 1'b1;
    end else begin
        p_col_h1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x3_ce0 = 1'b1;
    end else begin
        tiny_x3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln72_fu_76_p2 = (ap_sig_allocacmp_j_5 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln73_fu_92_p1 = tiny_x3_q0;

assign icmp_ln72_fu_70_p2 = ((ap_sig_allocacmp_j_5 == 4'd12) ? 1'b1 : 1'b0);

assign j_8_cast_fu_82_p1 = ap_sig_allocacmp_j_5;

assign p_col_h1_address0 = j_8_cast_reg_117;

assign p_col_h1_d0 = xor_ln73_fu_96_p2;

assign tiny_x3_address0 = j_8_cast_fu_82_p1;

assign xor_ln73_fu_96_p2 = (bitcast_ln73_fu_92_p1 ^ 32'd2147483648);

always @ (posedge ap_clk) begin
    j_8_cast_reg_117[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vnew_col_h1_address0,
        vnew_col_h1_ce0,
        vnew_col_h1_we0,
        vnew_col_h1_d0,
        vnew_col_h1_address1,
        vnew_col_h1_ce1,
        vnew_col_h1_we1,
        vnew_col_h1_d1,
        vnew_1_address0,
        vnew_1_ce0,
        vnew_1_q0,
        vnew_1_address1,
        vnew_1_ce1,
        vnew_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] vnew_col_h1_address0;
output   vnew_col_h1_ce0;
output   vnew_col_h1_we0;
output  [31:0] vnew_col_h1_d0;
output  [3:0] vnew_col_h1_address1;
output   vnew_col_h1_ce1;
output   vnew_col_h1_we1;
output  [31:0] vnew_col_h1_d1;
output  [6:0] vnew_1_address0;
output   vnew_1_ce0;
input  [31:0] vnew_1_q0;
output  [6:0] vnew_1_address1;
output   vnew_1_ce1;
input  [31:0] vnew_1_q1;

reg ap_idle;
reg[3:0] vnew_col_h1_address0;
reg vnew_col_h1_ce0;
reg vnew_col_h1_we0;
reg[3:0] vnew_col_h1_address1;
reg vnew_col_h1_ce1;
reg vnew_col_h1_we1;
reg[6:0] vnew_1_address0;
reg vnew_1_ce0;
reg[6:0] vnew_1_address1;
reg vnew_1_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_136_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
reg   [3:0] i_14_reg_261;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln86_reg_269;
wire   [3:0] or_ln86_1_fu_201_p2;
reg   [3:0] or_ln86_1_reg_283;
wire    ap_block_pp0_stage1_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln88_fu_156_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln88_32_fu_171_p1;
wire   [63:0] i_cast7_fu_187_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln88_1_fu_196_p1;
wire   [63:0] zext_ln88_33_fu_220_p1;
wire   [63:0] zext_ln88_34_fu_235_p1;
wire   [63:0] zext_ln88_3_fu_240_p1;
wire   [63:0] zext_ln88_6_fu_249_p1;
reg   [3:0] i_fu_40;
wire   [3:0] add_ln86_fu_176_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_14;
wire   [5:0] i_cast18_fu_142_p1;
wire   [5:0] add_ln88_fu_146_p2;
wire  signed [6:0] sext_ln88_fu_152_p1;
wire   [5:0] add_ln88_1_fu_161_p2;
wire  signed [6:0] sext_ln88_10_fu_167_p1;
wire   [3:0] or_ln86_fu_191_p2;
wire   [5:0] zext_ln88_4_fu_206_p1;
wire   [5:0] add_ln88_2_fu_210_p2;
wire  signed [6:0] sext_ln88_11_fu_216_p1;
wire   [5:0] add_ln88_3_fu_225_p2;
wire  signed [6:0] sext_ln88_12_fu_231_p1;
wire   [3:0] or_ln86_2_fu_244_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln86_fu_136_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_40 <= add_ln86_fu_176_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_14_reg_261 <= ap_sig_allocacmp_i_14;
        icmp_ln86_reg_269 <= icmp_ln86_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln86_1_reg_283[0] <= or_ln86_1_fu_201_p2[0];
or_ln86_1_reg_283[3 : 2] <= or_ln86_1_fu_201_p2[3 : 2];
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_136_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_14 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_14 = i_fu_40;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            vnew_1_address0 = zext_ln88_34_fu_235_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            vnew_1_address0 = zext_ln88_32_fu_171_p1;
        end else begin
            vnew_1_address0 = 'bx;
        end
    end else begin
        vnew_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            vnew_1_address1 = zext_ln88_33_fu_220_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            vnew_1_address1 = zext_ln88_fu_156_p1;
        end else begin
            vnew_1_address1 = 'bx;
        end
    end else begin
        vnew_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        vnew_1_ce0 = 1'b1;
    end else begin
        vnew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        vnew_1_ce1 = 1'b1;
    end else begin
        vnew_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vnew_col_h1_address0 = zext_ln88_6_fu_249_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        vnew_col_h1_address0 = zext_ln88_1_fu_196_p1;
    end else begin
        vnew_col_h1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vnew_col_h1_address1 = zext_ln88_3_fu_240_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        vnew_col_h1_address1 = i_cast7_fu_187_p1;
    end else begin
        vnew_col_h1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        vnew_col_h1_ce0 = 1'b1;
    end else begin
        vnew_col_h1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        vnew_col_h1_ce1 = 1'b1;
    end else begin
        vnew_col_h1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        vnew_col_h1_we0 = 1'b1;
    end else begin
        vnew_col_h1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        vnew_col_h1_we1 = 1'b1;
    end else begin
        vnew_col_h1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln86_fu_176_p2 = (ap_sig_allocacmp_i_14 + 4'd4);

assign add_ln88_1_fu_161_p2 = ($signed(i_cast18_fu_142_p1) + $signed(6'd45));

assign add_ln88_2_fu_210_p2 = ($signed(zext_ln88_4_fu_206_p1) + $signed(6'd44));

assign add_ln88_3_fu_225_p2 = ($signed(zext_ln88_4_fu_206_p1) + $signed(6'd45));

assign add_ln88_fu_146_p2 = ($signed(i_cast18_fu_142_p1) + $signed(6'd44));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_cast18_fu_142_p1 = ap_sig_allocacmp_i_14;

assign i_cast7_fu_187_p1 = i_14_reg_261;

assign icmp_ln86_fu_136_p2 = ((ap_sig_allocacmp_i_14 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln86_1_fu_201_p2 = (i_14_reg_261 | 4'd2);

assign or_ln86_2_fu_244_p2 = (i_14_reg_261 | 4'd3);

assign or_ln86_fu_191_p2 = (i_14_reg_261 | 4'd1);

assign sext_ln88_10_fu_167_p1 = $signed(add_ln88_1_fu_161_p2);

assign sext_ln88_11_fu_216_p1 = $signed(add_ln88_2_fu_210_p2);

assign sext_ln88_12_fu_231_p1 = $signed(add_ln88_3_fu_225_p2);

assign sext_ln88_fu_152_p1 = $signed(add_ln88_fu_146_p2);

assign vnew_col_h1_d0 = vnew_1_q0;

assign vnew_col_h1_d1 = vnew_1_q1;

assign zext_ln88_1_fu_196_p1 = or_ln86_fu_191_p2;

assign zext_ln88_32_fu_171_p1 = $unsigned(sext_ln88_10_fu_167_p1);

assign zext_ln88_33_fu_220_p1 = $unsigned(sext_ln88_11_fu_216_p1);

assign zext_ln88_34_fu_235_p1 = $unsigned(sext_ln88_12_fu_231_p1);

assign zext_ln88_3_fu_240_p1 = or_ln86_1_reg_283;

assign zext_ln88_4_fu_206_p1 = or_ln86_1_fu_201_p2;

assign zext_ln88_6_fu_249_p1 = or_ln86_2_fu_244_p2;

assign zext_ln88_fu_156_p1 = $unsigned(sext_ln88_fu_152_p1);

always @ (posedge ap_clk) begin
    or_ln86_1_reg_283[1] <= 1'b1;
end

endmodule //tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        g_col_h1_address0,
        g_col_h1_ce0,
        g_col_h1_we0,
        g_col_h1_d0,
        g_col_h1_address1,
        g_col_h1_ce1,
        g_col_h1_we1,
        g_col_h1_d1,
        g_1_address0,
        g_1_ce0,
        g_1_q0,
        g_1_address1,
        g_1_ce1,
        g_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] g_col_h1_address0;
output   g_col_h1_ce0;
output   g_col_h1_we0;
output  [31:0] g_col_h1_d0;
output  [3:0] g_col_h1_address1;
output   g_col_h1_ce1;
output   g_col_h1_we1;
output  [31:0] g_col_h1_d1;
output  [6:0] g_1_address0;
output   g_1_ce0;
input  [31:0] g_1_q0;
output  [6:0] g_1_address1;
output   g_1_ce1;
input  [31:0] g_1_q1;

reg ap_idle;
reg[3:0] g_col_h1_address0;
reg g_col_h1_ce0;
reg g_col_h1_we0;
reg[3:0] g_col_h1_address1;
reg g_col_h1_ce1;
reg g_col_h1_we1;
reg[6:0] g_1_address0;
reg g_1_ce0;
reg[6:0] g_1_address1;
reg g_1_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_136_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
reg   [3:0] i_reg_261;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln86_reg_269;
wire   [3:0] or_ln86_4_fu_201_p2;
reg   [3:0] or_ln86_4_reg_283;
wire    ap_block_pp0_stage1_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln88_fu_156_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln88_29_fu_171_p1;
wire   [63:0] i_6_cast9_fu_187_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln88_9_fu_196_p1;
wire   [63:0] zext_ln88_30_fu_220_p1;
wire   [63:0] zext_ln88_31_fu_235_p1;
wire   [63:0] zext_ln88_11_fu_240_p1;
wire   [63:0] zext_ln88_14_fu_249_p1;
reg   [3:0] i_6_fu_40;
wire   [3:0] add_ln86_fu_176_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
wire   [5:0] i_6_cast24_fu_142_p1;
wire   [5:0] add_ln88_4_fu_146_p2;
wire  signed [6:0] sext_ln88_fu_152_p1;
wire   [5:0] add_ln88_5_fu_161_p2;
wire  signed [6:0] sext_ln88_7_fu_167_p1;
wire   [3:0] or_ln86_3_fu_191_p2;
wire   [5:0] zext_ln88_12_fu_206_p1;
wire   [5:0] add_ln88_6_fu_210_p2;
wire  signed [6:0] sext_ln88_8_fu_216_p1;
wire   [5:0] add_ln88_7_fu_225_p2;
wire  signed [6:0] sext_ln88_9_fu_231_p1;
wire   [3:0] or_ln86_5_fu_244_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln86_fu_136_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_6_fu_40 <= add_ln86_fu_176_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_6_fu_40 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_261 <= ap_sig_allocacmp_i;
        icmp_ln86_reg_269 <= icmp_ln86_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln86_4_reg_283[0] <= or_ln86_4_fu_201_p2[0];
or_ln86_4_reg_283[3 : 2] <= or_ln86_4_fu_201_p2[3 : 2];
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_136_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_6_fu_40;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            g_1_address0 = zext_ln88_31_fu_235_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            g_1_address0 = zext_ln88_29_fu_171_p1;
        end else begin
            g_1_address0 = 'bx;
        end
    end else begin
        g_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            g_1_address1 = zext_ln88_30_fu_220_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            g_1_address1 = zext_ln88_fu_156_p1;
        end else begin
            g_1_address1 = 'bx;
        end
    end else begin
        g_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        g_1_ce0 = 1'b1;
    end else begin
        g_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        g_1_ce1 = 1'b1;
    end else begin
        g_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        g_col_h1_address0 = zext_ln88_14_fu_249_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        g_col_h1_address0 = zext_ln88_9_fu_196_p1;
    end else begin
        g_col_h1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        g_col_h1_address1 = zext_ln88_11_fu_240_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        g_col_h1_address1 = i_6_cast9_fu_187_p1;
    end else begin
        g_col_h1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        g_col_h1_ce0 = 1'b1;
    end else begin
        g_col_h1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        g_col_h1_ce1 = 1'b1;
    end else begin
        g_col_h1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        g_col_h1_we0 = 1'b1;
    end else begin
        g_col_h1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        g_col_h1_we1 = 1'b1;
    end else begin
        g_col_h1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln86_fu_176_p2 = (ap_sig_allocacmp_i + 4'd4);

assign add_ln88_4_fu_146_p2 = ($signed(i_6_cast24_fu_142_p1) + $signed(6'd44));

assign add_ln88_5_fu_161_p2 = ($signed(i_6_cast24_fu_142_p1) + $signed(6'd45));

assign add_ln88_6_fu_210_p2 = ($signed(zext_ln88_12_fu_206_p1) + $signed(6'd44));

assign add_ln88_7_fu_225_p2 = ($signed(zext_ln88_12_fu_206_p1) + $signed(6'd45));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign g_col_h1_d0 = g_1_q0;

assign g_col_h1_d1 = g_1_q1;

assign i_6_cast24_fu_142_p1 = ap_sig_allocacmp_i;

assign i_6_cast9_fu_187_p1 = i_reg_261;

assign icmp_ln86_fu_136_p2 = ((ap_sig_allocacmp_i == 4'd12) ? 1'b1 : 1'b0);

assign or_ln86_3_fu_191_p2 = (i_reg_261 | 4'd1);

assign or_ln86_4_fu_201_p2 = (i_reg_261 | 4'd2);

assign or_ln86_5_fu_244_p2 = (i_reg_261 | 4'd3);

assign sext_ln88_7_fu_167_p1 = $signed(add_ln88_5_fu_161_p2);

assign sext_ln88_8_fu_216_p1 = $signed(add_ln88_6_fu_210_p2);

assign sext_ln88_9_fu_231_p1 = $signed(add_ln88_7_fu_225_p2);

assign sext_ln88_fu_152_p1 = $signed(add_ln88_4_fu_146_p2);

assign zext_ln88_11_fu_240_p1 = or_ln86_4_reg_283;

assign zext_ln88_12_fu_206_p1 = or_ln86_4_fu_201_p2;

assign zext_ln88_14_fu_249_p1 = or_ln86_5_fu_244_p2;

assign zext_ln88_29_fu_171_p1 = $unsigned(sext_ln88_7_fu_167_p1);

assign zext_ln88_30_fu_220_p1 = $unsigned(sext_ln88_8_fu_216_p1);

assign zext_ln88_31_fu_235_p1 = $unsigned(sext_ln88_9_fu_231_p1);

assign zext_ln88_9_fu_196_p1 = or_ln86_3_fu_191_p2;

assign zext_ln88_fu_156_p1 = $unsigned(sext_ln88_fu_152_p1);

always @ (posedge ap_clk) begin
    or_ln86_4_reg_283[1] <= 1'b1;
end

endmodule //tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xref_col_h1_address0,
        xref_col_h1_ce0,
        xref_col_h1_we0,
        xref_col_h1_d0,
        xref_col_h1_address1,
        xref_col_h1_ce1,
        xref_col_h1_we1,
        xref_col_h1_d1,
        Xref_1_address0,
        Xref_1_ce0,
        Xref_1_q0,
        Xref_1_address1,
        Xref_1_ce1,
        Xref_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] xref_col_h1_address0;
output   xref_col_h1_ce0;
output   xref_col_h1_we0;
output  [31:0] xref_col_h1_d0;
output  [3:0] xref_col_h1_address1;
output   xref_col_h1_ce1;
output   xref_col_h1_we1;
output  [31:0] xref_col_h1_d1;
output  [6:0] Xref_1_address0;
output   Xref_1_ce0;
input  [31:0] Xref_1_q0;
output  [6:0] Xref_1_address1;
output   Xref_1_ce1;
input  [31:0] Xref_1_q1;

reg ap_idle;
reg[3:0] xref_col_h1_address0;
reg xref_col_h1_ce0;
reg xref_col_h1_we0;
reg[3:0] xref_col_h1_address1;
reg xref_col_h1_ce1;
reg xref_col_h1_we1;
reg[6:0] Xref_1_address0;
reg Xref_1_ce0;
reg[6:0] Xref_1_address1;
reg Xref_1_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_136_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
reg   [3:0] i_reg_261;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln86_reg_269;
wire   [3:0] or_ln86_fu_201_p2;
reg   [3:0] or_ln86_reg_283;
wire    ap_block_pp0_stage1_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln88_fu_156_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln88_26_fu_171_p1;
wire   [63:0] i_7_cast11_fu_187_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln88_17_fu_196_p1;
wire   [63:0] zext_ln88_27_fu_220_p1;
wire   [63:0] zext_ln88_28_fu_235_p1;
wire   [63:0] zext_ln88_19_fu_240_p1;
wire   [63:0] zext_ln88_22_fu_249_p1;
reg   [3:0] i_7_fu_40;
wire   [3:0] add_ln86_fu_176_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
wire   [5:0] i_7_cast30_fu_142_p1;
wire   [5:0] add_ln88_8_fu_146_p2;
wire  signed [6:0] sext_ln88_fu_152_p1;
wire   [5:0] add_ln88_9_fu_161_p2;
wire  signed [6:0] sext_ln88_4_fu_167_p1;
wire   [3:0] or_ln86_6_fu_191_p2;
wire   [5:0] zext_ln88_20_fu_206_p1;
wire   [5:0] add_ln88_fu_210_p2;
wire  signed [6:0] sext_ln88_5_fu_216_p1;
wire   [5:0] add_ln88_10_fu_225_p2;
wire  signed [6:0] sext_ln88_6_fu_231_p1;
wire   [3:0] or_ln86_7_fu_244_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln86_fu_136_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_7_fu_40 <= add_ln86_fu_176_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_7_fu_40 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_261 <= ap_sig_allocacmp_i;
        icmp_ln86_reg_269 <= icmp_ln86_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln86_reg_283[0] <= or_ln86_fu_201_p2[0];
or_ln86_reg_283[3 : 2] <= or_ln86_fu_201_p2[3 : 2];
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            Xref_1_address0 = zext_ln88_28_fu_235_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            Xref_1_address0 = zext_ln88_26_fu_171_p1;
        end else begin
            Xref_1_address0 = 'bx;
        end
    end else begin
        Xref_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            Xref_1_address1 = zext_ln88_27_fu_220_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            Xref_1_address1 = zext_ln88_fu_156_p1;
        end else begin
            Xref_1_address1 = 'bx;
        end
    end else begin
        Xref_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        Xref_1_ce0 = 1'b1;
    end else begin
        Xref_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        Xref_1_ce1 = 1'b1;
    end else begin
        Xref_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_136_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_7_fu_40;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xref_col_h1_address0 = zext_ln88_22_fu_249_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        xref_col_h1_address0 = zext_ln88_17_fu_196_p1;
    end else begin
        xref_col_h1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xref_col_h1_address1 = zext_ln88_19_fu_240_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        xref_col_h1_address1 = i_7_cast11_fu_187_p1;
    end else begin
        xref_col_h1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        xref_col_h1_ce0 = 1'b1;
    end else begin
        xref_col_h1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        xref_col_h1_ce1 = 1'b1;
    end else begin
        xref_col_h1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        xref_col_h1_we0 = 1'b1;
    end else begin
        xref_col_h1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        xref_col_h1_we1 = 1'b1;
    end else begin
        xref_col_h1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln86_fu_176_p2 = (ap_sig_allocacmp_i + 4'd4);

assign add_ln88_10_fu_225_p2 = ($signed(zext_ln88_20_fu_206_p1) + $signed(6'd45));

assign add_ln88_8_fu_146_p2 = ($signed(i_7_cast30_fu_142_p1) + $signed(6'd44));

assign add_ln88_9_fu_161_p2 = ($signed(i_7_cast30_fu_142_p1) + $signed(6'd45));

assign add_ln88_fu_210_p2 = ($signed(zext_ln88_20_fu_206_p1) + $signed(6'd44));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_7_cast11_fu_187_p1 = i_reg_261;

assign i_7_cast30_fu_142_p1 = ap_sig_allocacmp_i;

assign icmp_ln86_fu_136_p2 = ((ap_sig_allocacmp_i == 4'd12) ? 1'b1 : 1'b0);

assign or_ln86_6_fu_191_p2 = (i_reg_261 | 4'd1);

assign or_ln86_7_fu_244_p2 = (i_reg_261 | 4'd3);

assign or_ln86_fu_201_p2 = (i_reg_261 | 4'd2);

assign sext_ln88_4_fu_167_p1 = $signed(add_ln88_9_fu_161_p2);

assign sext_ln88_5_fu_216_p1 = $signed(add_ln88_fu_210_p2);

assign sext_ln88_6_fu_231_p1 = $signed(add_ln88_10_fu_225_p2);

assign sext_ln88_fu_152_p1 = $signed(add_ln88_8_fu_146_p2);

assign xref_col_h1_d0 = Xref_1_q0;

assign xref_col_h1_d1 = Xref_1_q1;

assign zext_ln88_17_fu_196_p1 = or_ln86_6_fu_191_p2;

assign zext_ln88_19_fu_240_p1 = or_ln86_reg_283;

assign zext_ln88_20_fu_206_p1 = or_ln86_fu_201_p2;

assign zext_ln88_22_fu_249_p1 = or_ln86_7_fu_244_p2;

assign zext_ln88_26_fu_171_p1 = $unsigned(sext_ln88_4_fu_167_p1);

assign zext_ln88_27_fu_220_p1 = $unsigned(sext_ln88_5_fu_216_p1);

assign zext_ln88_28_fu_235_p1 = $unsigned(sext_ln88_6_fu_231_p1);

assign zext_ln88_fu_156_p1 = $unsigned(sext_ln88_fu_152_p1);

always @ (posedge ap_clk) begin
    or_ln86_reg_283[1] <= 1'b1;
end

endmodule //tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_col_h1_address0,
        p_col_h1_ce0,
        p_col_h1_we0,
        p_col_h1_d0,
        p_col_h1_address1,
        p_col_h1_ce1,
        p_col_h1_we1,
        p_col_h1_d1,
        p_1_address0,
        p_1_ce0,
        p_1_q0,
        p_1_address1,
        p_1_ce1,
        p_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] p_col_h1_address0;
output   p_col_h1_ce0;
output   p_col_h1_we0;
output  [31:0] p_col_h1_d0;
output  [3:0] p_col_h1_address1;
output   p_col_h1_ce1;
output   p_col_h1_we1;
output  [31:0] p_col_h1_d1;
output  [6:0] p_1_address0;
output   p_1_ce0;
input  [31:0] p_1_q0;
output  [6:0] p_1_address1;
output   p_1_ce1;
input  [31:0] p_1_q1;

reg ap_idle;
reg[3:0] p_col_h1_address0;
reg p_col_h1_ce0;
reg p_col_h1_we0;
reg[3:0] p_col_h1_address1;
reg p_col_h1_ce1;
reg p_col_h1_we1;
reg[6:0] p_1_address0;
reg p_1_ce0;
reg[6:0] p_1_address1;
reg p_1_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_136_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
reg   [3:0] i_reg_261;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln86_reg_269;
wire   [3:0] or_ln86_5_fu_201_p2;
reg   [3:0] or_ln86_5_reg_283;
wire    ap_block_pp0_stage1_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln88_fu_156_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln88_20_fu_171_p1;
wire   [63:0] i_8_cast13_fu_187_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln88_19_fu_196_p1;
wire   [63:0] zext_ln88_23_fu_220_p1;
wire   [63:0] zext_ln88_25_fu_235_p1;
wire   [63:0] zext_ln88_21_fu_240_p1;
wire   [63:0] zext_ln88_24_fu_249_p1;
reg   [3:0] i_8_fu_40;
wire   [3:0] add_ln86_fu_176_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
wire   [5:0] i_8_cast36_fu_142_p1;
wire   [5:0] add_ln88_fu_146_p2;
wire  signed [6:0] sext_ln88_fu_152_p1;
wire   [5:0] add_ln88_7_fu_161_p2;
wire  signed [6:0] sext_ln88_1_fu_167_p1;
wire   [3:0] or_ln86_fu_191_p2;
wire   [5:0] zext_ln88_22_fu_206_p1;
wire   [5:0] add_ln88_8_fu_210_p2;
wire  signed [6:0] sext_ln88_2_fu_216_p1;
wire   [5:0] add_ln88_9_fu_225_p2;
wire  signed [6:0] sext_ln88_3_fu_231_p1;
wire   [3:0] or_ln86_6_fu_244_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln86_fu_136_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_8_fu_40 <= add_ln86_fu_176_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_8_fu_40 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_261 <= ap_sig_allocacmp_i;
        icmp_ln86_reg_269 <= icmp_ln86_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln86_5_reg_283[0] <= or_ln86_5_fu_201_p2[0];
or_ln86_5_reg_283[3 : 2] <= or_ln86_5_fu_201_p2[3 : 2];
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_136_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_8_fu_40;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_1_address0 = zext_ln88_25_fu_235_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_1_address0 = zext_ln88_20_fu_171_p1;
        end else begin
            p_1_address0 = 'bx;
        end
    end else begin
        p_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_1_address1 = zext_ln88_23_fu_220_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_1_address1 = zext_ln88_fu_156_p1;
        end else begin
            p_1_address1 = 'bx;
        end
    end else begin
        p_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_1_ce0 = 1'b1;
    end else begin
        p_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_1_ce1 = 1'b1;
    end else begin
        p_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_col_h1_address0 = zext_ln88_24_fu_249_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_col_h1_address0 = zext_ln88_19_fu_196_p1;
    end else begin
        p_col_h1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_col_h1_address1 = zext_ln88_21_fu_240_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_col_h1_address1 = i_8_cast13_fu_187_p1;
    end else begin
        p_col_h1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_col_h1_ce0 = 1'b1;
    end else begin
        p_col_h1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_col_h1_ce1 = 1'b1;
    end else begin
        p_col_h1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_col_h1_we0 = 1'b1;
    end else begin
        p_col_h1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_col_h1_we1 = 1'b1;
    end else begin
        p_col_h1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln86_fu_176_p2 = (ap_sig_allocacmp_i + 4'd4);

assign add_ln88_7_fu_161_p2 = ($signed(i_8_cast36_fu_142_p1) + $signed(6'd45));

assign add_ln88_8_fu_210_p2 = ($signed(zext_ln88_22_fu_206_p1) + $signed(6'd44));

assign add_ln88_9_fu_225_p2 = ($signed(zext_ln88_22_fu_206_p1) + $signed(6'd45));

assign add_ln88_fu_146_p2 = ($signed(i_8_cast36_fu_142_p1) + $signed(6'd44));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_8_cast13_fu_187_p1 = i_reg_261;

assign i_8_cast36_fu_142_p1 = ap_sig_allocacmp_i;

assign icmp_ln86_fu_136_p2 = ((ap_sig_allocacmp_i == 4'd12) ? 1'b1 : 1'b0);

assign or_ln86_5_fu_201_p2 = (i_reg_261 | 4'd2);

assign or_ln86_6_fu_244_p2 = (i_reg_261 | 4'd3);

assign or_ln86_fu_191_p2 = (i_reg_261 | 4'd1);

assign p_col_h1_d0 = p_1_q0;

assign p_col_h1_d1 = p_1_q1;

assign sext_ln88_1_fu_167_p1 = $signed(add_ln88_7_fu_161_p2);

assign sext_ln88_2_fu_216_p1 = $signed(add_ln88_8_fu_210_p2);

assign sext_ln88_3_fu_231_p1 = $signed(add_ln88_9_fu_225_p2);

assign sext_ln88_fu_152_p1 = $signed(add_ln88_fu_146_p2);

assign zext_ln88_19_fu_196_p1 = or_ln86_fu_191_p2;

assign zext_ln88_20_fu_171_p1 = $unsigned(sext_ln88_1_fu_167_p1);

assign zext_ln88_21_fu_240_p1 = or_ln86_5_reg_283;

assign zext_ln88_22_fu_206_p1 = or_ln86_5_fu_201_p2;

assign zext_ln88_23_fu_220_p1 = $unsigned(sext_ln88_2_fu_216_p1);

assign zext_ln88_24_fu_249_p1 = or_ln86_6_fu_244_p2;

assign zext_ln88_25_fu_235_p1 = $unsigned(sext_ln88_3_fu_231_p1);

assign zext_ln88_fu_156_p1 = $unsigned(sext_ln88_fu_152_p1);

always @ (posedge ap_clk) begin
    or_ln86_5_reg_283[1] <= 1'b1;
end

endmodule //tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_col_h1_address0,
        p_col_h1_ce0,
        p_col_h1_q0,
        p_col_h1_address1,
        p_col_h1_ce1,
        p_col_h1_q1,
        p_1_address0,
        p_1_ce0,
        p_1_we0,
        p_1_d0,
        p_1_address1,
        p_1_ce1,
        p_1_we1,
        p_1_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] p_col_h1_address0;
output   p_col_h1_ce0;
input  [31:0] p_col_h1_q0;
output  [3:0] p_col_h1_address1;
output   p_col_h1_ce1;
input  [31:0] p_col_h1_q1;
output  [6:0] p_1_address0;
output   p_1_ce0;
output   p_1_we0;
output  [31:0] p_1_d0;
output  [6:0] p_1_address1;
output   p_1_ce1;
output   p_1_we1;
output  [31:0] p_1_d1;

reg ap_idle;
reg[3:0] p_col_h1_address0;
reg p_col_h1_ce0;
reg[3:0] p_col_h1_address1;
reg p_col_h1_ce1;
reg[6:0] p_1_address0;
reg p_1_ce0;
reg p_1_we0;
reg[6:0] p_1_address1;
reg p_1_ce1;
reg p_1_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln93_fu_136_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
reg   [3:0] i_reg_262;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln93_reg_269;
wire   [3:0] or_ln93_1_fu_202_p2;
reg   [3:0] or_ln93_1_reg_283;
wire    ap_block_pp0_stage1_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] i_10_cast16_fu_142_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln95_1_fu_153_p1;
wire   [63:0] zext_ln95_fu_182_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln95_10_fu_197_p1;
wire   [63:0] zext_ln95_3_fu_207_p1;
wire   [63:0] zext_ln95_6_fu_217_p1;
wire   [63:0] zext_ln95_11_fu_235_p1;
wire   [63:0] zext_ln95_12_fu_250_p1;
reg   [3:0] i_10_fu_40;
wire   [3:0] add_ln93_fu_158_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
wire   [3:0] or_ln93_fu_147_p2;
wire   [5:0] i_10_cast42_fu_169_p1;
wire   [5:0] add_ln95_fu_172_p2;
wire  signed [6:0] sext_ln95_fu_178_p1;
wire   [5:0] add_ln95_1_fu_187_p2;
wire  signed [6:0] sext_ln95_1_fu_193_p1;
wire   [3:0] or_ln93_2_fu_212_p2;
wire   [5:0] zext_ln95_4_fu_222_p1;
wire   [5:0] add_ln95_2_fu_225_p2;
wire  signed [6:0] sext_ln95_2_fu_231_p1;
wire   [5:0] add_ln95_3_fu_240_p2;
wire  signed [6:0] sext_ln95_3_fu_246_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln93_fu_136_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_10_fu_40 <= add_ln93_fu_158_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_10_fu_40 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_262 <= ap_sig_allocacmp_i;
        icmp_ln93_reg_269 <= icmp_ln93_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln93_1_reg_283[0] <= or_ln93_1_fu_202_p2[0];
or_ln93_1_reg_283[3 : 2] <= or_ln93_1_fu_202_p2[3 : 2];
    end
end

always @ (*) begin
    if (((icmp_ln93_fu_136_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_10_fu_40;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_1_address0 = zext_ln95_12_fu_250_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_1_address0 = zext_ln95_10_fu_197_p1;
    end else begin
        p_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_1_address1 = zext_ln95_11_fu_235_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_1_address1 = zext_ln95_fu_182_p1;
    end else begin
        p_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_1_ce0 = 1'b1;
    end else begin
        p_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_1_ce1 = 1'b1;
    end else begin
        p_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln93_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_1_we0 = 1'b1;
    end else begin
        p_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln93_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_1_we1 = 1'b1;
    end else begin
        p_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_col_h1_address0 = zext_ln95_6_fu_217_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_col_h1_address0 = zext_ln95_1_fu_153_p1;
        end else begin
            p_col_h1_address0 = 'bx;
        end
    end else begin
        p_col_h1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_col_h1_address1 = zext_ln95_3_fu_207_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_col_h1_address1 = i_10_cast16_fu_142_p1;
        end else begin
            p_col_h1_address1 = 'bx;
        end
    end else begin
        p_col_h1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_col_h1_ce0 = 1'b1;
    end else begin
        p_col_h1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_col_h1_ce1 = 1'b1;
    end else begin
        p_col_h1_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln93_fu_158_p2 = (ap_sig_allocacmp_i + 4'd4);

assign add_ln95_1_fu_187_p2 = ($signed(i_10_cast42_fu_169_p1) + $signed(6'd45));

assign add_ln95_2_fu_225_p2 = ($signed(zext_ln95_4_fu_222_p1) + $signed(6'd44));

assign add_ln95_3_fu_240_p2 = ($signed(zext_ln95_4_fu_222_p1) + $signed(6'd45));

assign add_ln95_fu_172_p2 = ($signed(i_10_cast42_fu_169_p1) + $signed(6'd44));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_10_cast16_fu_142_p1 = ap_sig_allocacmp_i;

assign i_10_cast42_fu_169_p1 = i_reg_262;

assign icmp_ln93_fu_136_p2 = ((ap_sig_allocacmp_i == 4'd12) ? 1'b1 : 1'b0);

assign or_ln93_1_fu_202_p2 = (i_reg_262 | 4'd2);

assign or_ln93_2_fu_212_p2 = (i_reg_262 | 4'd3);

assign or_ln93_fu_147_p2 = (ap_sig_allocacmp_i | 4'd1);

assign p_1_d0 = p_col_h1_q0;

assign p_1_d1 = p_col_h1_q1;

assign sext_ln95_1_fu_193_p1 = $signed(add_ln95_1_fu_187_p2);

assign sext_ln95_2_fu_231_p1 = $signed(add_ln95_2_fu_225_p2);

assign sext_ln95_3_fu_246_p1 = $signed(add_ln95_3_fu_240_p2);

assign sext_ln95_fu_178_p1 = $signed(add_ln95_fu_172_p2);

assign zext_ln95_10_fu_197_p1 = $unsigned(sext_ln95_1_fu_193_p1);

assign zext_ln95_11_fu_235_p1 = $unsigned(sext_ln95_2_fu_231_p1);

assign zext_ln95_12_fu_250_p1 = $unsigned(sext_ln95_3_fu_246_p1);

assign zext_ln95_1_fu_153_p1 = or_ln93_fu_147_p2;

assign zext_ln95_3_fu_207_p1 = or_ln93_1_fu_202_p2;

assign zext_ln95_4_fu_222_p1 = or_ln93_1_reg_283;

assign zext_ln95_6_fu_217_p1 = or_ln93_2_fu_212_p2;

assign zext_ln95_fu_182_p1 = $unsigned(sext_ln95_fu_178_p1);

always @ (posedge ap_clk) begin
    or_ln93_1_reg_283[1] <= 1'b1;
end

endmodule //tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xref_col_h1_load,
        xref_col_h1_load_1,
        xref_col_h1_load_2,
        xref_col_h1_load_3,
        xref_col_h1_load_4,
        xref_col_h1_load_5,
        xref_col_h1_load_6,
        xref_col_h1_load_7,
        xref_col_h1_load_8,
        xref_col_h1_load_9,
        xref_col_h1_load_10,
        xref_col_h1_load_11,
        PinfT_1_address0,
        PinfT_1_ce0,
        PinfT_1_q0,
        PinfT_1_address1,
        PinfT_1_ce1,
        PinfT_1_q1,
        tiny_x1_address0,
        tiny_x1_ce0,
        tiny_x1_we0,
        tiny_x1_d0,
        grp_fu_406_p_din0,
        grp_fu_406_p_din1,
        grp_fu_406_p_opcode,
        grp_fu_406_p_dout0,
        grp_fu_406_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] xref_col_h1_load;
input  [31:0] xref_col_h1_load_1;
input  [31:0] xref_col_h1_load_2;
input  [31:0] xref_col_h1_load_3;
input  [31:0] xref_col_h1_load_4;
input  [31:0] xref_col_h1_load_5;
input  [31:0] xref_col_h1_load_6;
input  [31:0] xref_col_h1_load_7;
input  [31:0] xref_col_h1_load_8;
input  [31:0] xref_col_h1_load_9;
input  [31:0] xref_col_h1_load_10;
input  [31:0] xref_col_h1_load_11;
output  [7:0] PinfT_1_address0;
output   PinfT_1_ce0;
input  [31:0] PinfT_1_q0;
output  [7:0] PinfT_1_address1;
output   PinfT_1_ce1;
input  [31:0] PinfT_1_q1;
output  [3:0] tiny_x1_address0;
output   tiny_x1_ce0;
output   tiny_x1_we0;
output  [31:0] tiny_x1_d0;
output  [31:0] grp_fu_406_p_din0;
output  [31:0] grp_fu_406_p_din1;
output  [0:0] grp_fu_406_p_opcode;
input  [31:0] grp_fu_406_p_dout0;
output   grp_fu_406_p_ce;

reg ap_idle;
reg[7:0] PinfT_1_address0;
reg PinfT_1_ce0;
reg[7:0] PinfT_1_address1;
reg PinfT_1_ce1;
reg tiny_x1_ce0;
reg tiny_x1_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state12_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_subdone;
reg   [0:0] icmp_ln133_reg_563;
reg    ap_condition_exit_pp0_iter0_stage5;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [31:0] grp_fu_293_p2;
reg   [31:0] reg_303;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage5_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state15_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] grp_fu_286_p2;
reg   [3:0] i_reg_558;
reg   [3:0] i_reg_558_pp0_iter1_reg;
reg   [3:0] i_reg_558_pp0_iter2_reg;
wire   [0:0] icmp_ln133_fu_328_p2;
reg   [0:0] icmp_ln133_reg_563_pp0_iter1_reg;
wire   [7:0] empty_65_fu_360_p2;
reg   [7:0] empty_65_reg_567;
wire   [31:0] grp_fu_298_p2;
reg   [31:0] mul9_i_1_reg_591;
reg   [31:0] mul9_i_2_reg_606;
reg   [31:0] mul9_i_3_reg_611;
reg   [31:0] mul9_i_5_reg_626;
reg   [31:0] mul9_i_6_reg_641;
reg   [31:0] mul9_i_7_reg_646;
reg   [31:0] mul9_i_8_reg_661;
reg   [31:0] mul9_i_9_reg_666;
reg   [31:0] mul9_i_s_reg_681;
reg   [31:0] mul9_i_10_reg_686;
reg   [31:0] mul9_i_10_reg_686_pp0_iter2_reg;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage2_subdone;
wire   [63:0] zext_ln136_fu_366_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln136_1_fu_377_p1;
wire   [63:0] zext_ln136_2_fu_392_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln136_3_fu_402_p1;
wire   [63:0] zext_ln136_4_fu_412_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln136_5_fu_422_p1;
wire   [63:0] zext_ln136_6_fu_432_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln136_7_fu_442_p1;
wire   [63:0] zext_ln136_8_fu_452_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln136_9_fu_462_p1;
wire   [63:0] zext_ln136_10_fu_472_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln136_11_fu_482_p1;
wire   [63:0] i_9_cast15_fu_487_p1;
reg   [3:0] i_9_fu_86;
wire   [3:0] add_ln133_fu_334_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
reg   [31:0] grp_fu_280_p0;
reg   [31:0] grp_fu_280_p1;
reg   [31:0] grp_fu_286_p0;
reg   [31:0] grp_fu_286_p1;
reg   [31:0] grp_fu_293_p1;
reg   [31:0] grp_fu_298_p1;
wire   [5:0] p_shl1_fu_348_p3;
wire   [7:0] p_shl_fu_340_p3;
wire   [7:0] p_shl1_cast_fu_356_p1;
wire   [7:0] or_ln136_fu_371_p2;
wire   [7:0] or_ln136_1_fu_387_p2;
wire   [7:0] or_ln136_2_fu_397_p2;
wire   [7:0] add_ln136_fu_407_p2;
wire   [7:0] add_ln136_1_fu_417_p2;
wire   [7:0] add_ln136_2_fu_427_p2;
wire   [7:0] add_ln136_3_fu_437_p2;
wire   [7:0] add_ln136_4_fu_447_p2;
wire   [7:0] add_ln136_5_fu_457_p2;
wire   [7:0] add_ln136_6_fu_467_p2;
wire   [7:0] add_ln136_7_fu_477_p2;
wire    ap_block_pp0_stage2_00001;
wire    ap_block_pp0_stage3_00001;
wire    ap_block_pp0_stage4_00001;
wire    ap_block_pp0_stage5_00001;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage1_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage2;
reg    ap_idle_pp0_0to0;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_fadd_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_2_full_dsp_1_U173(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_286_p0),
    .din1(grp_fu_286_p1),
    .ce(1'b1),
    .dout(grp_fu_286_p2)
);

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U174(
    .din0(PinfT_1_q1),
    .din1(grp_fu_293_p1),
    .dout(grp_fu_293_p2)
);

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U175(
    .din0(PinfT_1_q0),
    .din1(grp_fu_298_p1),
    .dout(grp_fu_298_p2)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage5),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage5)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln133_fu_328_p2 == 1'd0))) begin
            i_9_fu_86 <= add_ln133_fu_334_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_9_fu_86 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln133_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_65_reg_567[7 : 2] <= empty_65_fu_360_p2[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_558 <= ap_sig_allocacmp_i;
        i_reg_558_pp0_iter1_reg <= i_reg_558;
        i_reg_558_pp0_iter2_reg <= i_reg_558_pp0_iter1_reg;
        icmp_ln133_reg_563 <= icmp_ln133_fu_328_p2;
        icmp_ln133_reg_563_pp0_iter1_reg <= icmp_ln133_reg_563;
        mul9_i_10_reg_686_pp0_iter2_reg <= mul9_i_10_reg_686;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul9_i_10_reg_686 <= grp_fu_298_p2;
        mul9_i_s_reg_681 <= grp_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul9_i_1_reg_591 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul9_i_2_reg_606 <= grp_fu_293_p2;
        mul9_i_3_reg_611 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul9_i_5_reg_626 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mul9_i_6_reg_641 <= grp_fu_293_p2;
        mul9_i_7_reg_646 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mul9_i_8_reg_661 <= grp_fu_293_p2;
        mul9_i_9_reg_666 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln133_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        reg_303 <= grp_fu_293_p2;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            PinfT_1_address0 = zext_ln136_11_fu_482_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            PinfT_1_address0 = zext_ln136_9_fu_462_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            PinfT_1_address0 = zext_ln136_7_fu_442_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            PinfT_1_address0 = zext_ln136_5_fu_422_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            PinfT_1_address0 = zext_ln136_3_fu_402_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            PinfT_1_address0 = zext_ln136_1_fu_377_p1;
        end else begin
            PinfT_1_address0 = 'bx;
        end
    end else begin
        PinfT_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            PinfT_1_address1 = zext_ln136_10_fu_472_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            PinfT_1_address1 = zext_ln136_8_fu_452_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            PinfT_1_address1 = zext_ln136_6_fu_432_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            PinfT_1_address1 = zext_ln136_4_fu_412_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            PinfT_1_address1 = zext_ln136_2_fu_392_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            PinfT_1_address1 = zext_ln136_fu_366_p1;
        end else begin
            PinfT_1_address1 = 'bx;
        end
    end else begin
        PinfT_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        PinfT_1_ce0 = 1'b1;
    end else begin
        PinfT_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        PinfT_1_ce1 = 1'b1;
    end else begin
        PinfT_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln133_reg_563 == 1'd1) & (1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln133_reg_563_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter1_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_9_fu_86;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_280_p0 = grp_fu_406_p_dout0;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_280_p0 = reg_303;
    end else begin
        grp_fu_280_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_280_p1 = mul9_i_5_reg_626;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_280_p1 = reg_303;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_280_p1 = mul9_i_3_reg_611;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_280_p1 = mul9_i_2_reg_606;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_280_p1 = mul9_i_1_reg_591;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_280_p1 = 32'd0;
    end else begin
        grp_fu_280_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_286_p0 = grp_fu_286_p2;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_286_p0 = grp_fu_406_p_dout0;
    end else begin
        grp_fu_286_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_286_p1 = mul9_i_10_reg_686_pp0_iter2_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_286_p1 = mul9_i_s_reg_681;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_286_p1 = mul9_i_9_reg_666;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_286_p1 = mul9_i_8_reg_661;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_286_p1 = mul9_i_7_reg_646;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_286_p1 = mul9_i_6_reg_641;
    end else begin
        grp_fu_286_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_293_p1 = xref_col_h1_load_10;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_293_p1 = xref_col_h1_load_8;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_293_p1 = xref_col_h1_load_6;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_293_p1 = xref_col_h1_load_4;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_293_p1 = xref_col_h1_load_2;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_293_p1 = xref_col_h1_load;
    end else begin
        grp_fu_293_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_298_p1 = xref_col_h1_load_11;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_298_p1 = xref_col_h1_load_9;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_298_p1 = xref_col_h1_load_7;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_298_p1 = xref_col_h1_load_5;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_298_p1 = xref_col_h1_load_3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_298_p1 = xref_col_h1_load_1;
    end else begin
        grp_fu_298_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tiny_x1_ce0 = 1'b1;
    end else begin
        tiny_x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tiny_x1_we0 = 1'b1;
    end else begin
        tiny_x1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln133_fu_334_p2 = (ap_sig_allocacmp_i + 4'd1);

assign add_ln136_1_fu_417_p2 = (empty_65_reg_567 + 8'd5);

assign add_ln136_2_fu_427_p2 = (empty_65_reg_567 + 8'd6);

assign add_ln136_3_fu_437_p2 = (empty_65_reg_567 + 8'd7);

assign add_ln136_4_fu_447_p2 = (empty_65_reg_567 + 8'd8);

assign add_ln136_5_fu_457_p2 = (empty_65_reg_567 + 8'd9);

assign add_ln136_6_fu_467_p2 = (empty_65_reg_567 + 8'd10);

assign add_ln136_7_fu_477_p2 = (empty_65_reg_567 + 8'd11);

assign add_ln136_fu_407_p2 = (empty_65_reg_567 + 8'd4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage5;

assign empty_65_fu_360_p2 = (p_shl_fu_340_p3 - p_shl1_cast_fu_356_p1);

assign grp_fu_406_p_ce = 1'b1;

assign grp_fu_406_p_din0 = grp_fu_280_p0;

assign grp_fu_406_p_din1 = grp_fu_280_p1;

assign grp_fu_406_p_opcode = 2'd0;

assign i_9_cast15_fu_487_p1 = i_reg_558_pp0_iter2_reg;

assign icmp_ln133_fu_328_p2 = ((ap_sig_allocacmp_i == 4'd12) ? 1'b1 : 1'b0);

assign or_ln136_1_fu_387_p2 = (empty_65_reg_567 | 8'd2);

assign or_ln136_2_fu_397_p2 = (empty_65_reg_567 | 8'd3);

assign or_ln136_fu_371_p2 = (empty_65_fu_360_p2 | 8'd1);

assign p_shl1_cast_fu_356_p1 = p_shl1_fu_348_p3;

assign p_shl1_fu_348_p3 = {{ap_sig_allocacmp_i}, {2'd0}};

assign p_shl_fu_340_p3 = {{ap_sig_allocacmp_i}, {4'd0}};

assign tiny_x1_address0 = i_9_cast15_fu_487_p1;

assign tiny_x1_d0 = grp_fu_286_p2;

assign zext_ln136_10_fu_472_p1 = add_ln136_6_fu_467_p2;

assign zext_ln136_11_fu_482_p1 = add_ln136_7_fu_477_p2;

assign zext_ln136_1_fu_377_p1 = or_ln136_fu_371_p2;

assign zext_ln136_2_fu_392_p1 = or_ln136_1_fu_387_p2;

assign zext_ln136_3_fu_402_p1 = or_ln136_2_fu_397_p2;

assign zext_ln136_4_fu_412_p1 = add_ln136_fu_407_p2;

assign zext_ln136_5_fu_422_p1 = add_ln136_1_fu_417_p2;

assign zext_ln136_6_fu_432_p1 = add_ln136_2_fu_427_p2;

assign zext_ln136_7_fu_442_p1 = add_ln136_3_fu_437_p2;

assign zext_ln136_8_fu_452_p1 = add_ln136_4_fu_447_p2;

assign zext_ln136_9_fu_462_p1 = add_ln136_5_fu_457_p2;

assign zext_ln136_fu_366_p1 = empty_65_fu_360_p2;

always @ (posedge ap_clk) begin
    empty_65_reg_567[1:0] <= 2'b00;
end

endmodule //tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tiny_rho_load,
        tiny_x1_address0,
        tiny_x1_ce0,
        tiny_x1_q0,
        tiny_x2_address0,
        tiny_x2_ce0,
        tiny_x2_we0,
        tiny_x2_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] tiny_rho_load;
output  [3:0] tiny_x1_address0;
output   tiny_x1_ce0;
input  [31:0] tiny_x1_q0;
output  [3:0] tiny_x2_address0;
output   tiny_x2_ce0;
output   tiny_x2_we0;
output  [31:0] tiny_x2_d0;

reg ap_idle;
reg tiny_x1_ce0;
reg tiny_x2_ce0;
reg tiny_x2_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln160_fu_84_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] j_6_cast_fu_96_p1;
reg   [63:0] j_6_cast_reg_121;
wire    ap_block_pp0_stage0;
reg   [3:0] j_6_fu_34;
wire   [3:0] add_ln160_fu_90_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j;
wire   [31:0] mul5_i_fu_70_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U168(
    .din0(tiny_rho_load),
    .din1(tiny_x1_q0),
    .dout(mul5_i_fu_70_p2)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln160_fu_84_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_6_fu_34 <= add_ln160_fu_90_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_6_fu_34 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln160_fu_84_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_6_cast_reg_121[3 : 0] <= j_6_cast_fu_96_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln160_fu_84_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j = 4'd0;
    end else begin
        ap_sig_allocacmp_j = j_6_fu_34;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x1_ce0 = 1'b1;
    end else begin
        tiny_x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x2_ce0 = 1'b1;
    end else begin
        tiny_x2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x2_we0 = 1'b1;
    end else begin
        tiny_x2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln160_fu_90_p2 = (ap_sig_allocacmp_j + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln160_fu_84_p2 = ((ap_sig_allocacmp_j == 4'd12) ? 1'b1 : 1'b0);

assign j_6_cast_fu_96_p1 = ap_sig_allocacmp_j;

assign tiny_x1_address0 = j_6_cast_fu_96_p1;

assign tiny_x2_address0 = j_6_cast_reg_121;

assign tiny_x2_d0 = mul5_i_fu_70_p2;

always @ (posedge ap_clk) begin
    j_6_cast_reg_121[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vnew_col_h1_address0,
        vnew_col_h1_ce0,
        vnew_col_h1_q0,
        g_col_h1_address0,
        g_col_h1_ce0,
        g_col_h1_q0,
        tiny_x1_address0,
        tiny_x1_ce0,
        tiny_x1_we0,
        tiny_x1_d0,
        grp_fu_406_p_din0,
        grp_fu_406_p_din1,
        grp_fu_406_p_opcode,
        grp_fu_406_p_dout0,
        grp_fu_406_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] vnew_col_h1_address0;
output   vnew_col_h1_ce0;
input  [31:0] vnew_col_h1_q0;
output  [3:0] g_col_h1_address0;
output   g_col_h1_ce0;
input  [31:0] g_col_h1_q0;
output  [3:0] tiny_x1_address0;
output   tiny_x1_ce0;
output   tiny_x1_we0;
output  [31:0] tiny_x1_d0;
output  [31:0] grp_fu_406_p_din0;
output  [31:0] grp_fu_406_p_din1;
output  [0:0] grp_fu_406_p_opcode;
input  [31:0] grp_fu_406_p_dout0;
output   grp_fu_406_p_ce;

reg ap_idle;
reg vnew_col_h1_ce0;
reg g_col_h1_ce0;
reg tiny_x1_ce0;
reg tiny_x1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln168_fu_90_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] j_cast_fu_102_p1;
reg   [63:0] j_cast_reg_124;
reg   [63:0] j_cast_reg_124_pp0_iter1_reg;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_32;
wire   [3:0] add_ln168_fu_96_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_7;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln168_fu_90_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_32 <= add_ln168_fu_96_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_32 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        j_cast_reg_124_pp0_iter1_reg[3 : 0] <= j_cast_reg_124[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln168_fu_90_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_cast_reg_124[3 : 0] <= j_cast_fu_102_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln168_fu_90_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_7 = 4'd0;
    end else begin
        ap_sig_allocacmp_j_7 = j_fu_32;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        g_col_h1_ce0 = 1'b1;
    end else begin
        g_col_h1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tiny_x1_ce0 = 1'b1;
    end else begin
        tiny_x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tiny_x1_we0 = 1'b1;
    end else begin
        tiny_x1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vnew_col_h1_ce0 = 1'b1;
    end else begin
        vnew_col_h1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln168_fu_96_p2 = (ap_sig_allocacmp_j_7 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign g_col_h1_address0 = j_cast_fu_102_p1;

assign grp_fu_406_p_ce = 1'b1;

assign grp_fu_406_p_din0 = vnew_col_h1_q0;

assign grp_fu_406_p_din1 = g_col_h1_q0;

assign grp_fu_406_p_opcode = 2'd1;

assign icmp_ln168_fu_90_p2 = ((ap_sig_allocacmp_j_7 == 4'd12) ? 1'b1 : 1'b0);

assign j_cast_fu_102_p1 = ap_sig_allocacmp_j_7;

assign tiny_x1_address0 = j_cast_reg_124_pp0_iter1_reg;

assign tiny_x1_d0 = grp_fu_406_p_dout0;

assign vnew_col_h1_address0 = j_cast_fu_102_p1;

always @ (posedge ap_clk) begin
    j_cast_reg_124[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_cast_reg_124_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tiny_x1_address0,
        tiny_x1_ce0,
        tiny_x1_q0,
        tiny_x2_address0,
        tiny_x2_ce0,
        tiny_x2_q0,
        tiny_x3_address0,
        tiny_x3_ce0,
        tiny_x3_we0,
        tiny_x3_d0,
        grp_fu_406_p_din0,
        grp_fu_406_p_din1,
        grp_fu_406_p_opcode,
        grp_fu_406_p_dout0,
        grp_fu_406_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] tiny_x1_address0;
output   tiny_x1_ce0;
input  [31:0] tiny_x1_q0;
output  [3:0] tiny_x2_address0;
output   tiny_x2_ce0;
input  [31:0] tiny_x2_q0;
output  [3:0] tiny_x3_address0;
output   tiny_x3_ce0;
output   tiny_x3_we0;
output  [31:0] tiny_x3_d0;
output  [31:0] grp_fu_406_p_din0;
output  [31:0] grp_fu_406_p_din1;
output  [0:0] grp_fu_406_p_opcode;
input  [31:0] grp_fu_406_p_dout0;
output   grp_fu_406_p_ce;

reg ap_idle;
reg tiny_x1_ce0;
reg tiny_x2_ce0;
reg tiny_x3_ce0;
reg tiny_x3_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln177_fu_90_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] j_7_cast_fu_102_p1;
reg   [63:0] j_7_cast_reg_124;
reg   [63:0] j_7_cast_reg_124_pp0_iter1_reg;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_32;
wire   [3:0] add_ln177_fu_96_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_6;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln177_fu_90_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_32 <= add_ln177_fu_96_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_32 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        j_7_cast_reg_124_pp0_iter1_reg[3 : 0] <= j_7_cast_reg_124[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_fu_90_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_7_cast_reg_124[3 : 0] <= j_7_cast_fu_102_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln177_fu_90_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_6 = 4'd0;
    end else begin
        ap_sig_allocacmp_j_6 = j_fu_32;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x1_ce0 = 1'b1;
    end else begin
        tiny_x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x2_ce0 = 1'b1;
    end else begin
        tiny_x2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tiny_x3_ce0 = 1'b1;
    end else begin
        tiny_x3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tiny_x3_we0 = 1'b1;
    end else begin
        tiny_x3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln177_fu_96_p2 = (ap_sig_allocacmp_j_6 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_406_p_ce = 1'b1;

assign grp_fu_406_p_din0 = tiny_x1_q0;

assign grp_fu_406_p_din1 = tiny_x2_q0;

assign grp_fu_406_p_opcode = 2'd0;

assign icmp_ln177_fu_90_p2 = ((ap_sig_allocacmp_j_6 == 4'd12) ? 1'b1 : 1'b0);

assign j_7_cast_fu_102_p1 = ap_sig_allocacmp_j_6;

assign tiny_x1_address0 = j_7_cast_fu_102_p1;

assign tiny_x2_address0 = j_7_cast_fu_102_p1;

assign tiny_x3_address0 = j_7_cast_reg_124_pp0_iter1_reg;

assign tiny_x3_d0 = grp_fu_406_p_dout0;

always @ (posedge ap_clk) begin
    j_7_cast_reg_124[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_7_cast_reg_124_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_update_linear_cost_4_vnew_col_h1_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0, address1, ce1, d1, we1,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 4;
parameter AddressRange = 12;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];




always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
    end
end


endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vnew_1_address0,
        vnew_1_ce0,
        vnew_1_q0,
        vnew_1_address1,
        vnew_1_ce1,
        vnew_1_q1,
        g_1_address0,
        g_1_ce0,
        g_1_q0,
        g_1_address1,
        g_1_ce1,
        g_1_q1,
        Xref_1_address0,
        Xref_1_ce0,
        Xref_1_q0,
        Xref_1_address1,
        Xref_1_ce1,
        Xref_1_q1,
        p_1_address0,
        p_1_ce0,
        p_1_we0,
        p_1_d0,
        p_1_q0,
        p_1_address1,
        p_1_ce1,
        p_1_we1,
        p_1_d1,
        p_1_q1,
        tiny_x1_address0,
        tiny_x1_ce0,
        tiny_x1_we0,
        tiny_x1_d0,
        tiny_x1_q0,
        tiny_rho,
        tiny_x2_address0,
        tiny_x2_ce0,
        tiny_x2_we0,
        tiny_x2_d0,
        tiny_x2_q0,
        PinfT_1_address0,
        PinfT_1_ce0,
        PinfT_1_q0,
        PinfT_1_address1,
        PinfT_1_ce1,
        PinfT_1_q1,
        tiny_x3_address0,
        tiny_x3_ce0,
        tiny_x3_we0,
        tiny_x3_d0,
        tiny_x3_q0,
        grp_fu_303_p_din0,
        grp_fu_303_p_din1,
        grp_fu_303_p_opcode,
        grp_fu_303_p_dout0,
        grp_fu_303_p_ce
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] vnew_1_address0;
output   vnew_1_ce0;
input  [31:0] vnew_1_q0;
output  [6:0] vnew_1_address1;
output   vnew_1_ce1;
input  [31:0] vnew_1_q1;
output  [6:0] g_1_address0;
output   g_1_ce0;
input  [31:0] g_1_q0;
output  [6:0] g_1_address1;
output   g_1_ce1;
input  [31:0] g_1_q1;
output  [6:0] Xref_1_address0;
output   Xref_1_ce0;
input  [31:0] Xref_1_q0;
output  [6:0] Xref_1_address1;
output   Xref_1_ce1;
input  [31:0] Xref_1_q1;
output  [6:0] p_1_address0;
output   p_1_ce0;
output   p_1_we0;
output  [31:0] p_1_d0;
input  [31:0] p_1_q0;
output  [6:0] p_1_address1;
output   p_1_ce1;
output   p_1_we1;
output  [31:0] p_1_d1;
input  [31:0] p_1_q1;
output  [3:0] tiny_x1_address0;
output   tiny_x1_ce0;
output   tiny_x1_we0;
output  [31:0] tiny_x1_d0;
input  [31:0] tiny_x1_q0;
input  [31:0] tiny_rho;
output  [3:0] tiny_x2_address0;
output   tiny_x2_ce0;
output   tiny_x2_we0;
output  [31:0] tiny_x2_d0;
input  [31:0] tiny_x2_q0;
output  [7:0] PinfT_1_address0;
output   PinfT_1_ce0;
input  [31:0] PinfT_1_q0;
output  [7:0] PinfT_1_address1;
output   PinfT_1_ce1;
input  [31:0] PinfT_1_q1;
output  [3:0] tiny_x3_address0;
output   tiny_x3_ce0;
output   tiny_x3_we0;
output  [31:0] tiny_x3_d0;
input  [31:0] tiny_x3_q0;
output  [31:0] grp_fu_303_p_din0;
output  [31:0] grp_fu_303_p_din1;
output  [1:0] grp_fu_303_p_opcode;
input  [31:0] grp_fu_303_p_dout0;
output   grp_fu_303_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] p_1_address0;
reg p_1_ce0;
reg p_1_we0;
reg[6:0] p_1_address1;
reg p_1_ce1;
reg p_1_we1;
reg[3:0] tiny_x1_address0;
reg tiny_x1_ce0;
reg tiny_x1_we0;
reg[31:0] tiny_x1_d0;
reg[3:0] tiny_x2_address0;
reg tiny_x2_ce0;
reg tiny_x2_we0;
reg[3:0] tiny_x3_address0;
reg tiny_x3_ce0;
reg tiny_x3_we0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state3;
wire   [31:0] xref_col_h1_q1;
reg   [31:0] xref_col_h1_load_reg_293;
wire    ap_CS_fsm_state4;
wire   [31:0] xref_col_h1_q0;
reg   [31:0] xref_col_h1_load_1_reg_298;
reg   [31:0] xref_col_h1_load_2_reg_316;
wire    ap_CS_fsm_state5;
reg   [31:0] xref_col_h1_load_3_reg_321;
reg   [31:0] xref_col_h1_load_4_reg_336;
wire    ap_CS_fsm_state6;
reg   [31:0] xref_col_h1_load_5_reg_341;
reg   [31:0] xref_col_h1_load_6_reg_356;
wire    ap_CS_fsm_state7;
reg   [31:0] xref_col_h1_load_7_reg_361;
reg   [31:0] xref_col_h1_load_8_reg_376;
wire    ap_CS_fsm_state8;
reg   [31:0] xref_col_h1_load_9_reg_381;
reg   [31:0] xref_col_h1_load_10_reg_396;
wire    ap_CS_fsm_state9;
reg   [31:0] xref_col_h1_load_11_reg_401;
reg   [3:0] vnew_col_h1_address0;
reg    vnew_col_h1_ce0;
reg    vnew_col_h1_we0;
wire   [31:0] vnew_col_h1_q0;
reg    vnew_col_h1_ce1;
reg    vnew_col_h1_we1;
reg   [3:0] g_col_h1_address0;
reg    g_col_h1_ce0;
reg    g_col_h1_we0;
wire   [31:0] g_col_h1_q0;
reg    g_col_h1_ce1;
reg    g_col_h1_we1;
reg   [3:0] xref_col_h1_address0;
reg    xref_col_h1_ce0;
reg    xref_col_h1_we0;
reg   [3:0] xref_col_h1_address1;
reg    xref_col_h1_ce1;
reg    xref_col_h1_we1;
reg   [3:0] p_col_h1_address0;
reg    p_col_h1_ce0;
reg    p_col_h1_we0;
reg   [31:0] p_col_h1_d0;
wire   [31:0] p_col_h1_q0;
reg   [3:0] p_col_h1_address1;
reg    p_col_h1_ce1;
reg    p_col_h1_we1;
wire   [31:0] p_col_h1_q1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_ap_start;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_ap_done;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_ap_idle;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_ap_ready;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_ce0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_we0;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_d0;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_address1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_ce1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_we1;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_d1;
wire   [6:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_1_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_1_ce0;
wire   [6:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_1_address1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_1_ce1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_ap_start;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_ap_done;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_ap_idle;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_ap_ready;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_ce0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_we0;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_d0;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_address1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_ce1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_we1;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_d1;
wire   [6:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_1_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_1_ce0;
wire   [6:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_1_address1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_1_ce1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_ap_start;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_ap_done;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_ap_idle;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_ap_ready;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_ce0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_we0;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_d0;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_address1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_ce1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_we1;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_d1;
wire   [6:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_Xref_1_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_Xref_1_ce0;
wire   [6:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_Xref_1_address1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_Xref_1_ce1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_ap_start;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_ap_done;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_ap_idle;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_ap_ready;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_ce0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_we0;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_d0;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_address1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_ce1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_we1;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_d1;
wire   [6:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_1_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_1_ce0;
wire   [6:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_1_address1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_1_ce1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_start;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_done;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_idle;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_ready;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_vnew_col_h1_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_vnew_col_h1_ce0;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_g_col_h1_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_g_col_h1_ce0;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_tiny_x1_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_tiny_x1_ce0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_tiny_x1_we0;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_tiny_x1_d0;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_grp_fu_406_p_din0;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_grp_fu_406_p_din1;
wire   [0:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_grp_fu_406_p_opcode;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_grp_fu_406_p_ce;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_start;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_done;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_idle;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_ready;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_tiny_x1_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_tiny_x1_ce0;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_tiny_x2_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_tiny_x2_ce0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_tiny_x2_we0;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_tiny_x2_d0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_ap_start;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_ap_done;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_ap_idle;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_ap_ready;
wire   [7:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_PinfT_1_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_PinfT_1_ce0;
wire   [7:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_PinfT_1_address1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_PinfT_1_ce1;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_tiny_x1_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_tiny_x1_ce0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_tiny_x1_we0;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_tiny_x1_d0;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_grp_fu_406_p_din0;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_grp_fu_406_p_din1;
wire   [0:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_grp_fu_406_p_opcode;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_grp_fu_406_p_ce;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_ap_start;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_ap_done;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_ap_idle;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_ap_ready;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x1_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x1_ce0;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x2_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x2_ce0;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x3_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x3_ce0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x3_we0;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x3_d0;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_grp_fu_406_p_din0;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_grp_fu_406_p_din1;
wire   [0:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_grp_fu_406_p_opcode;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_grp_fu_406_p_ce;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_ap_start;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_ap_done;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_ap_idle;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_ap_ready;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_p_col_h1_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_p_col_h1_ce0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_p_col_h1_we0;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_p_col_h1_d0;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_tiny_x3_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_tiny_x3_ce0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_start;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_done;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_idle;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_ready;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_col_h1_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_col_h1_ce0;
wire   [3:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_col_h1_address1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_col_h1_ce1;
wire   [6:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_address0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_ce0;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_we0;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_d0;
wire   [6:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_address1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_ce1;
wire    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_we1;
wire   [31:0] grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_d1;
reg    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_ap_start_reg;
reg    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_ap_start_reg;
reg    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_ap_start_reg;
reg    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_start_reg;
reg    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_start_reg;
reg    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_ap_start_reg;
wire    ap_CS_fsm_state10;
reg    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_ap_start_reg;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg    grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_start_reg;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg   [31:0] grp_fu_406_p0;
reg   [31:0] grp_fu_406_p1;
reg   [1:0] grp_fu_406_opcode;
reg    grp_fu_406_ce;
reg   [15:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_block_state2_on_subcall_done;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_start_reg = 1'b0;
end

tracking_update_linear_cost_4_vnew_col_h1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
vnew_col_h1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(vnew_col_h1_address0),
    .ce0(vnew_col_h1_ce0),
    .we0(vnew_col_h1_we0),
    .d0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_d0),
    .q0(vnew_col_h1_q0),
    .address1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_address1),
    .ce1(vnew_col_h1_ce1),
    .we1(vnew_col_h1_we1),
    .d1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_d1)
);

tracking_update_linear_cost_4_vnew_col_h1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
g_col_h1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(g_col_h1_address0),
    .ce0(g_col_h1_ce0),
    .we0(g_col_h1_we0),
    .d0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_d0),
    .q0(g_col_h1_q0),
    .address1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_address1),
    .ce1(g_col_h1_ce1),
    .we1(g_col_h1_we1),
    .d1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_d1)
);

tracking_forward_pass_2_x_col_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
xref_col_h1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(xref_col_h1_address0),
    .ce0(xref_col_h1_ce0),
    .we0(xref_col_h1_we0),
    .d0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_d0),
    .q0(xref_col_h1_q0),
    .address1(xref_col_h1_address1),
    .ce1(xref_col_h1_ce1),
    .we1(xref_col_h1_we1),
    .d1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_d1),
    .q1(xref_col_h1_q1)
);

tracking_forward_pass_2_x_col_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
p_col_h1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_col_h1_address0),
    .ce0(p_col_h1_ce0),
    .we0(p_col_h1_we0),
    .d0(p_col_h1_d0),
    .q0(p_col_h1_q0),
    .address1(p_col_h1_address1),
    .ce1(p_col_h1_ce1),
    .we1(p_col_h1_we1),
    .d1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_d1),
    .q1(p_col_h1_q1)
);

tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_ap_start),
    .ap_done(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_ap_done),
    .ap_idle(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_ap_idle),
    .ap_ready(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_ap_ready),
    .vnew_col_h1_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_address0),
    .vnew_col_h1_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_ce0),
    .vnew_col_h1_we0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_we0),
    .vnew_col_h1_d0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_d0),
    .vnew_col_h1_address1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_address1),
    .vnew_col_h1_ce1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_ce1),
    .vnew_col_h1_we1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_we1),
    .vnew_col_h1_d1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_d1),
    .vnew_1_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_1_address0),
    .vnew_1_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_1_ce0),
    .vnew_1_q0(vnew_1_q0),
    .vnew_1_address1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_1_address1),
    .vnew_1_ce1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_1_ce1),
    .vnew_1_q1(vnew_1_q1)
);

tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_ap_start),
    .ap_done(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_ap_done),
    .ap_idle(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_ap_idle),
    .ap_ready(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_ap_ready),
    .g_col_h1_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_address0),
    .g_col_h1_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_ce0),
    .g_col_h1_we0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_we0),
    .g_col_h1_d0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_d0),
    .g_col_h1_address1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_address1),
    .g_col_h1_ce1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_ce1),
    .g_col_h1_we1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_we1),
    .g_col_h1_d1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_d1),
    .g_1_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_1_address0),
    .g_1_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_1_ce0),
    .g_1_q0(g_1_q0),
    .g_1_address1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_1_address1),
    .g_1_ce1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_1_ce1),
    .g_1_q1(g_1_q1)
);

tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_ap_start),
    .ap_done(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_ap_done),
    .ap_idle(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_ap_idle),
    .ap_ready(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_ap_ready),
    .xref_col_h1_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_address0),
    .xref_col_h1_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_ce0),
    .xref_col_h1_we0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_we0),
    .xref_col_h1_d0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_d0),
    .xref_col_h1_address1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_address1),
    .xref_col_h1_ce1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_ce1),
    .xref_col_h1_we1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_we1),
    .xref_col_h1_d1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_d1),
    .Xref_1_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_Xref_1_address0),
    .Xref_1_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_Xref_1_ce0),
    .Xref_1_q0(Xref_1_q0),
    .Xref_1_address1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_Xref_1_address1),
    .Xref_1_ce1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_Xref_1_ce1),
    .Xref_1_q1(Xref_1_q1)
);

tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_ap_start),
    .ap_done(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_ap_done),
    .ap_idle(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_ap_idle),
    .ap_ready(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_ap_ready),
    .p_col_h1_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_address0),
    .p_col_h1_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_ce0),
    .p_col_h1_we0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_we0),
    .p_col_h1_d0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_d0),
    .p_col_h1_address1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_address1),
    .p_col_h1_ce1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_ce1),
    .p_col_h1_we1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_we1),
    .p_col_h1_d1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_d1),
    .p_1_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_1_address0),
    .p_1_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_1_ce0),
    .p_1_q0(p_1_q0),
    .p_1_address1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_1_address1),
    .p_1_ce1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_1_ce1),
    .p_1_q1(p_1_q1)
);

tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_start),
    .ap_done(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_done),
    .ap_idle(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_idle),
    .ap_ready(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_ready),
    .vnew_col_h1_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_vnew_col_h1_address0),
    .vnew_col_h1_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_vnew_col_h1_ce0),
    .vnew_col_h1_q0(vnew_col_h1_q0),
    .g_col_h1_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_g_col_h1_address0),
    .g_col_h1_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_g_col_h1_ce0),
    .g_col_h1_q0(g_col_h1_q0),
    .tiny_x1_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_tiny_x1_address0),
    .tiny_x1_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_tiny_x1_ce0),
    .tiny_x1_we0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_tiny_x1_we0),
    .tiny_x1_d0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_tiny_x1_d0),
    .grp_fu_406_p_din0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_grp_fu_406_p_din0),
    .grp_fu_406_p_din1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_grp_fu_406_p_din1),
    .grp_fu_406_p_opcode(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_grp_fu_406_p_opcode),
    .grp_fu_406_p_dout0(grp_fu_303_p_dout0),
    .grp_fu_406_p_ce(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_grp_fu_406_p_ce)
);

tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_start),
    .ap_done(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_done),
    .ap_idle(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_idle),
    .ap_ready(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_ready),
    .tiny_rho_load(tiny_rho),
    .tiny_x1_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_tiny_x1_address0),
    .tiny_x1_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_tiny_x1_ce0),
    .tiny_x1_q0(tiny_x1_q0),
    .tiny_x2_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_tiny_x2_address0),
    .tiny_x2_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_tiny_x2_ce0),
    .tiny_x2_we0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_tiny_x2_we0),
    .tiny_x2_d0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_tiny_x2_d0)
);

tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_ap_start),
    .ap_done(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_ap_done),
    .ap_idle(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_ap_idle),
    .ap_ready(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_ap_ready),
    .xref_col_h1_load(xref_col_h1_load_reg_293),
    .xref_col_h1_load_1(xref_col_h1_load_1_reg_298),
    .xref_col_h1_load_2(xref_col_h1_load_2_reg_316),
    .xref_col_h1_load_3(xref_col_h1_load_3_reg_321),
    .xref_col_h1_load_4(xref_col_h1_load_4_reg_336),
    .xref_col_h1_load_5(xref_col_h1_load_5_reg_341),
    .xref_col_h1_load_6(xref_col_h1_load_6_reg_356),
    .xref_col_h1_load_7(xref_col_h1_load_7_reg_361),
    .xref_col_h1_load_8(xref_col_h1_load_8_reg_376),
    .xref_col_h1_load_9(xref_col_h1_load_9_reg_381),
    .xref_col_h1_load_10(xref_col_h1_load_10_reg_396),
    .xref_col_h1_load_11(xref_col_h1_load_11_reg_401),
    .PinfT_1_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_PinfT_1_address0),
    .PinfT_1_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_PinfT_1_ce0),
    .PinfT_1_q0(PinfT_1_q0),
    .PinfT_1_address1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_PinfT_1_address1),
    .PinfT_1_ce1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_PinfT_1_ce1),
    .PinfT_1_q1(PinfT_1_q1),
    .tiny_x1_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_tiny_x1_address0),
    .tiny_x1_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_tiny_x1_ce0),
    .tiny_x1_we0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_tiny_x1_we0),
    .tiny_x1_d0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_tiny_x1_d0),
    .grp_fu_406_p_din0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_grp_fu_406_p_din0),
    .grp_fu_406_p_din1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_grp_fu_406_p_din1),
    .grp_fu_406_p_opcode(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_grp_fu_406_p_opcode),
    .grp_fu_406_p_dout0(grp_fu_303_p_dout0),
    .grp_fu_406_p_ce(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_grp_fu_406_p_ce)
);

tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_ap_start),
    .ap_done(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_ap_done),
    .ap_idle(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_ap_idle),
    .ap_ready(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_ap_ready),
    .tiny_x1_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x1_address0),
    .tiny_x1_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x1_ce0),
    .tiny_x1_q0(tiny_x1_q0),
    .tiny_x2_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x2_address0),
    .tiny_x2_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x2_ce0),
    .tiny_x2_q0(tiny_x2_q0),
    .tiny_x3_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x3_address0),
    .tiny_x3_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x3_ce0),
    .tiny_x3_we0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x3_we0),
    .tiny_x3_d0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x3_d0),
    .grp_fu_406_p_din0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_grp_fu_406_p_din0),
    .grp_fu_406_p_din1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_grp_fu_406_p_din1),
    .grp_fu_406_p_opcode(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_grp_fu_406_p_opcode),
    .grp_fu_406_p_dout0(grp_fu_303_p_dout0),
    .grp_fu_406_p_ce(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_grp_fu_406_p_ce)
);

tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_ap_start),
    .ap_done(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_ap_done),
    .ap_idle(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_ap_idle),
    .ap_ready(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_ap_ready),
    .p_col_h1_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_p_col_h1_address0),
    .p_col_h1_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_p_col_h1_ce0),
    .p_col_h1_we0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_p_col_h1_we0),
    .p_col_h1_d0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_p_col_h1_d0),
    .tiny_x3_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_tiny_x3_address0),
    .tiny_x3_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_tiny_x3_ce0),
    .tiny_x3_q0(tiny_x3_q0)
);

tracking_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1 grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_start),
    .ap_done(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_done),
    .ap_idle(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_idle),
    .ap_ready(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_ready),
    .p_col_h1_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_col_h1_address0),
    .p_col_h1_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_col_h1_ce0),
    .p_col_h1_q0(p_col_h1_q0),
    .p_col_h1_address1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_col_h1_address1),
    .p_col_h1_ce1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_col_h1_ce1),
    .p_col_h1_q1(p_col_h1_q1),
    .p_1_address0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_address0),
    .p_1_ce0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_ce0),
    .p_1_we0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_we0),
    .p_1_d0(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_d0),
    .p_1_address1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_address1),
    .p_1_ce1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_ce1),
    .p_1_we1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_we1),
    .p_1_d1(grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_ap_ready == 1'b1)) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_ready == 1'b1)) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_ready == 1'b1)) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_ap_ready == 1'b1)) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_ap_ready == 1'b1)) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_ap_ready == 1'b1)) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_ap_ready == 1'b1)) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_ap_ready == 1'b1)) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_ap_ready == 1'b1)) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_ready == 1'b1)) begin
            grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        xref_col_h1_load_10_reg_396 <= xref_col_h1_q1;
        xref_col_h1_load_11_reg_401 <= xref_col_h1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xref_col_h1_load_1_reg_298 <= xref_col_h1_q0;
        xref_col_h1_load_reg_293 <= xref_col_h1_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        xref_col_h1_load_2_reg_316 <= xref_col_h1_q1;
        xref_col_h1_load_3_reg_321 <= xref_col_h1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        xref_col_h1_load_4_reg_336 <= xref_col_h1_q1;
        xref_col_h1_load_5_reg_341 <= xref_col_h1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        xref_col_h1_load_6_reg_356 <= xref_col_h1_q1;
        xref_col_h1_load_7_reg_361 <= xref_col_h1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        xref_col_h1_load_8_reg_376 <= xref_col_h1_q1;
        xref_col_h1_load_9_reg_381 <= xref_col_h1_q0;
    end
end

always @ (*) begin
    if ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_ap_done == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_ap_done == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_ap_done == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_done == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        g_col_h1_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_g_col_h1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        g_col_h1_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_address0;
    end else begin
        g_col_h1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        g_col_h1_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_g_col_h1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        g_col_h1_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_ce0;
    end else begin
        g_col_h1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        g_col_h1_ce1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_ce1;
    end else begin
        g_col_h1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        g_col_h1_we0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_we0;
    end else begin
        g_col_h1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        g_col_h1_we1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_col_h1_we1;
    end else begin
        g_col_h1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_406_ce = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_grp_fu_406_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_406_ce = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_grp_fu_406_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_406_ce = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_grp_fu_406_p_ce;
    end else begin
        grp_fu_406_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_406_opcode = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_grp_fu_406_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_406_opcode = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_grp_fu_406_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_406_opcode = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_grp_fu_406_p_opcode;
    end else begin
        grp_fu_406_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_406_p0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_grp_fu_406_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_406_p0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_grp_fu_406_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_406_p0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_grp_fu_406_p_din0;
    end else begin
        grp_fu_406_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_406_p1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_grp_fu_406_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_406_p1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_grp_fu_406_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_406_p1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_grp_fu_406_p_din1;
    end else begin
        grp_fu_406_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_1_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_1_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_1_address0;
    end else begin
        p_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_1_address1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_1_address1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_1_address1;
    end else begin
        p_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_1_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_1_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_1_ce0;
    end else begin
        p_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_1_ce1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_1_ce1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_1_ce1;
    end else begin
        p_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_1_we0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_we0;
    end else begin
        p_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_1_we1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_we1;
    end else begin
        p_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_col_h1_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_col_h1_address0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        p_col_h1_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_p_col_h1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_h1_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_address0;
    end else begin
        p_col_h1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_col_h1_address1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_col_h1_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_h1_address1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_address1;
    end else begin
        p_col_h1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_col_h1_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_col_h1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        p_col_h1_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_p_col_h1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_h1_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_ce0;
    end else begin
        p_col_h1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_col_h1_ce1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_col_h1_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_h1_ce1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_ce1;
    end else begin
        p_col_h1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        p_col_h1_d0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_p_col_h1_d0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_h1_d0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_d0;
    end else begin
        p_col_h1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        p_col_h1_we0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_p_col_h1_we0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_h1_we0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_we0;
    end else begin
        p_col_h1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_col_h1_we1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_p_col_h1_we1;
    end else begin
        p_col_h1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tiny_x1_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x1_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        tiny_x1_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_tiny_x1_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tiny_x1_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_tiny_x1_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tiny_x1_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_tiny_x1_address0;
    end else begin
        tiny_x1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tiny_x1_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        tiny_x1_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_tiny_x1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tiny_x1_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_tiny_x1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tiny_x1_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_tiny_x1_ce0;
    end else begin
        tiny_x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tiny_x1_d0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_tiny_x1_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tiny_x1_d0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_tiny_x1_d0;
    end else begin
        tiny_x1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tiny_x1_we0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_tiny_x1_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tiny_x1_we0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_tiny_x1_we0;
    end else begin
        tiny_x1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tiny_x2_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x2_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tiny_x2_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_tiny_x2_address0;
    end else begin
        tiny_x2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tiny_x2_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tiny_x2_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_tiny_x2_ce0;
    end else begin
        tiny_x2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tiny_x2_we0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_tiny_x2_we0;
    end else begin
        tiny_x2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tiny_x3_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_tiny_x3_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        tiny_x3_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x3_address0;
    end else begin
        tiny_x3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tiny_x3_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_tiny_x3_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        tiny_x3_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x3_ce0;
    end else begin
        tiny_x3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tiny_x3_we0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x3_we0;
    end else begin
        tiny_x3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        vnew_col_h1_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_vnew_col_h1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        vnew_col_h1_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_address0;
    end else begin
        vnew_col_h1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        vnew_col_h1_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_vnew_col_h1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        vnew_col_h1_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_ce0;
    end else begin
        vnew_col_h1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vnew_col_h1_ce1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_ce1;
    end else begin
        vnew_col_h1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vnew_col_h1_we0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_we0;
    end else begin
        vnew_col_h1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vnew_col_h1_we1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_col_h1_we1;
    end else begin
        vnew_col_h1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        xref_col_h1_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        xref_col_h1_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        xref_col_h1_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        xref_col_h1_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        xref_col_h1_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        xref_col_h1_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        xref_col_h1_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_address0;
    end else begin
        xref_col_h1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        xref_col_h1_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        xref_col_h1_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        xref_col_h1_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        xref_col_h1_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        xref_col_h1_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        xref_col_h1_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        xref_col_h1_address1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_address1;
    end else begin
        xref_col_h1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        xref_col_h1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        xref_col_h1_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_ce0;
    end else begin
        xref_col_h1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        xref_col_h1_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        xref_col_h1_ce1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_ce1;
    end else begin
        xref_col_h1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        xref_col_h1_we0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_we0;
    end else begin
        xref_col_h1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        xref_col_h1_we1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_xref_col_h1_we1;
    end else begin
        xref_col_h1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign PinfT_1_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_PinfT_1_address0;

assign PinfT_1_address1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_PinfT_1_address1;

assign PinfT_1_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_PinfT_1_ce0;

assign PinfT_1_ce1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_PinfT_1_ce1;

assign Xref_1_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_Xref_1_address0;

assign Xref_1_address1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_Xref_1_address1;

assign Xref_1_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_Xref_1_ce0;

assign Xref_1_ce1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_Xref_1_ce1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_ap_done == 1'b0) | (grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_ap_done == 1'b0) | (grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_ap_done == 1'b0) | (grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_ap_done == 1'b0));
end

assign g_1_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_1_address0;

assign g_1_address1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_1_address1;

assign g_1_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_1_ce0;

assign g_1_ce1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_g_1_ce1;

assign grp_fu_303_p_ce = grp_fu_406_ce;

assign grp_fu_303_p_din0 = grp_fu_406_p0;

assign grp_fu_303_p_din1 = grp_fu_406_p1;

assign grp_fu_303_p_opcode = grp_fu_406_opcode;

assign grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_ap_start = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_133_1_fu_232_ap_start_reg;

assign grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_start = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_ap_start_reg;

assign grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_start = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_168_2_fu_215_ap_start_reg;

assign grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_ap_start = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_ap_start_reg;

assign grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_ap_start = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_72_2_fu_264_ap_start_reg;

assign grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_ap_start = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_14_fu_191_ap_start_reg;

assign grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_ap_start = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_15_fu_199_ap_start_reg;

assign grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_ap_start = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_16_fu_207_ap_start_reg;

assign grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_ap_start = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_ap_start_reg;

assign grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_start = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_ap_start_reg;

assign p_1_d0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_d0;

assign p_1_d1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_93_1_fu_271_p_1_d1;

assign tiny_x2_d0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_160_2_fu_223_tiny_x2_d0;

assign tiny_x3_d0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_177_2_fu_254_tiny_x3_d0;

assign vnew_1_address0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_1_address0;

assign vnew_1_address1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_1_address1;

assign vnew_1_ce0 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_1_ce0;

assign vnew_1_ce1 = grp_update_linear_cost_4_Pipeline_VITIS_LOOP_86_1_fu_183_vnew_1_ce1;

endmodule //tracking_update_linear_cost_4
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_Pipeline_VITIS_LOOP_72_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        q_col_address0,
        q_col_ce0,
        q_col_we0,
        q_col_d0,
        tiny_x1_address0,
        tiny_x1_ce0,
        tiny_x1_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] q_col_address0;
output   q_col_ce0;
output   q_col_we0;
output  [31:0] q_col_d0;
output  [3:0] tiny_x1_address0;
output   tiny_x1_ce0;
input  [31:0] tiny_x1_q0;

reg ap_idle;
reg q_col_ce0;
reg q_col_we0;
reg tiny_x1_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln72_fu_70_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] j_14_cast_fu_82_p1;
reg   [63:0] j_14_cast_reg_117;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_32;
wire   [3:0] add_ln72_fu_76_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_4;
wire   [31:0] bitcast_ln73_fu_92_p1;
wire   [31:0] xor_ln73_fu_96_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln72_fu_70_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_32 <= add_ln72_fu_76_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_32 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_fu_70_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_14_cast_reg_117[3 : 0] <= j_14_cast_fu_82_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_70_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_4 = 4'd0;
    end else begin
        ap_sig_allocacmp_j_4 = j_fu_32;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_col_ce0 = 1'b1;
    end else begin
        q_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_col_we0 = 1'b1;
    end else begin
        q_col_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x1_ce0 = 1'b1;
    end else begin
        tiny_x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln72_fu_76_p2 = (ap_sig_allocacmp_j_4 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln73_fu_92_p1 = tiny_x1_q0;

assign icmp_ln72_fu_70_p2 = ((ap_sig_allocacmp_j_4 == 4'd12) ? 1'b1 : 1'b0);

assign j_14_cast_fu_82_p1 = ap_sig_allocacmp_j_4;

assign q_col_address0 = j_14_cast_reg_117;

assign q_col_d0 = xor_ln73_fu_96_p2;

assign tiny_x1_address0 = j_14_cast_fu_82_p1;

assign xor_ln73_fu_96_p2 = (bitcast_ln73_fu_92_p1 ^ 32'd2147483648);

always @ (posedge ap_clk) begin
    j_14_cast_reg_117[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_update_linear_cost_Pipeline_VITIS_LOOP_72_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_Pipeline_VITIS_LOOP_86_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        empty,
        xref_col_address0,
        xref_col_ce0,
        xref_col_we0,
        xref_col_d0,
        xref_col_address1,
        xref_col_ce1,
        xref_col_we1,
        xref_col_d1,
        Xref_1_address0,
        Xref_1_ce0,
        Xref_1_q0,
        Xref_1_address1,
        Xref_1_ce1,
        Xref_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] empty;
output  [3:0] xref_col_address0;
output   xref_col_ce0;
output   xref_col_we0;
output  [31:0] xref_col_d0;
output  [3:0] xref_col_address1;
output   xref_col_ce1;
output   xref_col_we1;
output  [31:0] xref_col_d1;
output  [6:0] Xref_1_address0;
output   Xref_1_ce0;
input  [31:0] Xref_1_q0;
output  [6:0] Xref_1_address1;
output   Xref_1_ce1;
input  [31:0] Xref_1_q1;

reg ap_idle;
reg[3:0] xref_col_address0;
reg xref_col_ce0;
reg xref_col_we0;
reg[3:0] xref_col_address1;
reg xref_col_ce1;
reg xref_col_we1;
reg[6:0] Xref_1_address0;
reg Xref_1_ce0;
reg[6:0] Xref_1_address1;
reg Xref_1_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_142_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_9_reg_262;
reg   [0:0] icmp_ln86_reg_269;
wire   [3:0] or_ln86_fu_163_p2;
reg   [3:0] or_ln86_reg_278;
wire   [3:0] or_ln86_3_fu_203_p2;
reg   [3:0] or_ln86_3_reg_288;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] or_ln86_4_fu_222_p2;
reg   [3:0] or_ln86_4_reg_298;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln88_fu_158_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln88_12_fu_179_p1;
wire   [63:0] i_14_cast8_fu_195_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln88_10_fu_199_p1;
wire   [63:0] zext_ln88_15_fu_217_p1;
wire   [63:0] zext_ln88_18_fu_236_p1;
wire   [63:0] zext_ln88_13_fu_241_p1;
wire   [63:0] zext_ln88_16_fu_245_p1;
reg   [3:0] i_fu_40;
wire   [3:0] add_ln86_fu_184_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_9;
wire   [6:0] i_14_cast4_fu_148_p1;
wire   [6:0] add_ln88_fu_152_p2;
wire   [6:0] zext_ln88_11_fu_169_p1;
wire   [6:0] add_ln88_4_fu_173_p2;
wire   [6:0] zext_ln88_14_fu_208_p1;
wire   [6:0] add_ln88_5_fu_212_p2;
wire   [6:0] zext_ln88_17_fu_227_p1;
wire   [6:0] add_ln88_6_fu_231_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln86_fu_142_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_40 <= add_ln86_fu_184_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_9_reg_262 <= ap_sig_allocacmp_i_9;
        icmp_ln86_reg_269 <= icmp_ln86_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln86_3_reg_288[0] <= or_ln86_3_fu_203_p2[0];
or_ln86_3_reg_288[3 : 2] <= or_ln86_3_fu_203_p2[3 : 2];
        or_ln86_4_reg_298[3 : 2] <= or_ln86_4_fu_222_p2[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_142_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln86_reg_278[3 : 1] <= or_ln86_fu_163_p2[3 : 1];
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            Xref_1_address0 = zext_ln88_18_fu_236_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            Xref_1_address0 = zext_ln88_12_fu_179_p1;
        end else begin
            Xref_1_address0 = 'bx;
        end
    end else begin
        Xref_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            Xref_1_address1 = zext_ln88_15_fu_217_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            Xref_1_address1 = zext_ln88_fu_158_p1;
        end else begin
            Xref_1_address1 = 'bx;
        end
    end else begin
        Xref_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        Xref_1_ce0 = 1'b1;
    end else begin
        Xref_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        Xref_1_ce1 = 1'b1;
    end else begin
        Xref_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_9 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_9 = i_fu_40;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xref_col_address0 = zext_ln88_16_fu_245_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        xref_col_address0 = zext_ln88_10_fu_199_p1;
    end else begin
        xref_col_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xref_col_address1 = zext_ln88_13_fu_241_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        xref_col_address1 = i_14_cast8_fu_195_p1;
    end else begin
        xref_col_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        xref_col_ce0 = 1'b1;
    end else begin
        xref_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        xref_col_ce1 = 1'b1;
    end else begin
        xref_col_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        xref_col_we0 = 1'b1;
    end else begin
        xref_col_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        xref_col_we1 = 1'b1;
    end else begin
        xref_col_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln86_fu_184_p2 = (ap_sig_allocacmp_i_9 + 4'd4);

assign add_ln88_4_fu_173_p2 = (zext_ln88_11_fu_169_p1 + empty);

assign add_ln88_5_fu_212_p2 = (zext_ln88_14_fu_208_p1 + empty);

assign add_ln88_6_fu_231_p2 = (zext_ln88_17_fu_227_p1 + empty);

assign add_ln88_fu_152_p2 = (i_14_cast4_fu_148_p1 + empty);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_14_cast4_fu_148_p1 = ap_sig_allocacmp_i_9;

assign i_14_cast8_fu_195_p1 = i_9_reg_262;

assign icmp_ln86_fu_142_p2 = ((ap_sig_allocacmp_i_9 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln86_3_fu_203_p2 = (i_9_reg_262 | 4'd2);

assign or_ln86_4_fu_222_p2 = (i_9_reg_262 | 4'd3);

assign or_ln86_fu_163_p2 = (ap_sig_allocacmp_i_9 | 4'd1);

assign xref_col_d0 = Xref_1_q0;

assign xref_col_d1 = Xref_1_q1;

assign zext_ln88_10_fu_199_p1 = or_ln86_reg_278;

assign zext_ln88_11_fu_169_p1 = or_ln86_fu_163_p2;

assign zext_ln88_12_fu_179_p1 = add_ln88_4_fu_173_p2;

assign zext_ln88_13_fu_241_p1 = or_ln86_3_reg_288;

assign zext_ln88_14_fu_208_p1 = or_ln86_3_fu_203_p2;

assign zext_ln88_15_fu_217_p1 = add_ln88_5_fu_212_p2;

assign zext_ln88_16_fu_245_p1 = or_ln86_4_reg_298;

assign zext_ln88_17_fu_227_p1 = or_ln86_4_fu_222_p2;

assign zext_ln88_18_fu_236_p1 = add_ln88_6_fu_231_p2;

assign zext_ln88_fu_158_p1 = add_ln88_fu_152_p2;

always @ (posedge ap_clk) begin
    or_ln86_reg_278[0] <= 1'b1;
    or_ln86_3_reg_288[1] <= 1'b1;
    or_ln86_4_reg_298[1:0] <= 2'b11;
end

endmodule //tracking_update_linear_cost_Pipeline_VITIS_LOOP_86_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_Pipeline_VITIS_LOOP_86_17 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        empty,
        q_col_address0,
        q_col_ce0,
        q_col_we0,
        q_col_d0,
        q_col_address1,
        q_col_ce1,
        q_col_we1,
        q_col_d1,
        q_1_address0,
        q_1_ce0,
        q_1_q0,
        q_1_address1,
        q_1_ce1,
        q_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] empty;
output  [3:0] q_col_address0;
output   q_col_ce0;
output   q_col_we0;
output  [31:0] q_col_d0;
output  [3:0] q_col_address1;
output   q_col_ce1;
output   q_col_we1;
output  [31:0] q_col_d1;
output  [6:0] q_1_address0;
output   q_1_ce0;
input  [31:0] q_1_q0;
output  [6:0] q_1_address1;
output   q_1_ce1;
input  [31:0] q_1_q1;

reg ap_idle;
reg[3:0] q_col_address0;
reg q_col_ce0;
reg q_col_we0;
reg[3:0] q_col_address1;
reg q_col_ce1;
reg q_col_we1;
reg[6:0] q_1_address0;
reg q_1_ce0;
reg[6:0] q_1_address1;
reg q_1_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_142_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_8_reg_262;
reg   [0:0] icmp_ln86_reg_269;
wire   [3:0] or_ln86_fu_163_p2;
reg   [3:0] or_ln86_reg_278;
wire   [3:0] or_ln86_1_fu_203_p2;
reg   [3:0] or_ln86_1_reg_288;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] or_ln86_2_fu_222_p2;
reg   [3:0] or_ln86_2_reg_298;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln88_fu_158_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln88_3_fu_179_p1;
wire   [63:0] i_16_cast12_fu_195_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln88_1_fu_199_p1;
wire   [63:0] zext_ln88_6_fu_217_p1;
wire   [63:0] zext_ln88_9_fu_236_p1;
wire   [63:0] zext_ln88_4_fu_241_p1;
wire   [63:0] zext_ln88_7_fu_245_p1;
reg   [3:0] i_fu_40;
wire   [3:0] add_ln86_fu_184_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_8;
wire   [6:0] i_16_cast6_fu_148_p1;
wire   [6:0] add_ln88_fu_152_p2;
wire   [6:0] zext_ln88_2_fu_169_p1;
wire   [6:0] add_ln88_1_fu_173_p2;
wire   [6:0] zext_ln88_5_fu_208_p1;
wire   [6:0] add_ln88_2_fu_212_p2;
wire   [6:0] zext_ln88_8_fu_227_p1;
wire   [6:0] add_ln88_3_fu_231_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln86_fu_142_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_40 <= add_ln86_fu_184_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_8_reg_262 <= ap_sig_allocacmp_i_8;
        icmp_ln86_reg_269 <= icmp_ln86_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln86_1_reg_288[0] <= or_ln86_1_fu_203_p2[0];
or_ln86_1_reg_288[3 : 2] <= or_ln86_1_fu_203_p2[3 : 2];
        or_ln86_2_reg_298[3 : 2] <= or_ln86_2_fu_222_p2[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_142_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln86_reg_278[3 : 1] <= or_ln86_fu_163_p2[3 : 1];
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_8 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_8 = i_fu_40;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            q_1_address0 = zext_ln88_9_fu_236_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            q_1_address0 = zext_ln88_3_fu_179_p1;
        end else begin
            q_1_address0 = 'bx;
        end
    end else begin
        q_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            q_1_address1 = zext_ln88_6_fu_217_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            q_1_address1 = zext_ln88_fu_158_p1;
        end else begin
            q_1_address1 = 'bx;
        end
    end else begin
        q_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        q_1_ce0 = 1'b1;
    end else begin
        q_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        q_1_ce1 = 1'b1;
    end else begin
        q_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_col_address0 = zext_ln88_7_fu_245_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        q_col_address0 = zext_ln88_1_fu_199_p1;
    end else begin
        q_col_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_col_address1 = zext_ln88_4_fu_241_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        q_col_address1 = i_16_cast12_fu_195_p1;
    end else begin
        q_col_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        q_col_ce0 = 1'b1;
    end else begin
        q_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        q_col_ce1 = 1'b1;
    end else begin
        q_col_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        q_col_we0 = 1'b1;
    end else begin
        q_col_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln86_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        q_col_we1 = 1'b1;
    end else begin
        q_col_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln86_fu_184_p2 = (ap_sig_allocacmp_i_8 + 4'd4);

assign add_ln88_1_fu_173_p2 = (zext_ln88_2_fu_169_p1 + empty);

assign add_ln88_2_fu_212_p2 = (zext_ln88_5_fu_208_p1 + empty);

assign add_ln88_3_fu_231_p2 = (zext_ln88_8_fu_227_p1 + empty);

assign add_ln88_fu_152_p2 = (i_16_cast6_fu_148_p1 + empty);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_16_cast12_fu_195_p1 = i_8_reg_262;

assign i_16_cast6_fu_148_p1 = ap_sig_allocacmp_i_8;

assign icmp_ln86_fu_142_p2 = ((ap_sig_allocacmp_i_8 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln86_1_fu_203_p2 = (i_8_reg_262 | 4'd2);

assign or_ln86_2_fu_222_p2 = (i_8_reg_262 | 4'd3);

assign or_ln86_fu_163_p2 = (ap_sig_allocacmp_i_8 | 4'd1);

assign q_col_d0 = q_1_q0;

assign q_col_d1 = q_1_q1;

assign zext_ln88_1_fu_199_p1 = or_ln86_reg_278;

assign zext_ln88_2_fu_169_p1 = or_ln86_fu_163_p2;

assign zext_ln88_3_fu_179_p1 = add_ln88_1_fu_173_p2;

assign zext_ln88_4_fu_241_p1 = or_ln86_1_reg_288;

assign zext_ln88_5_fu_208_p1 = or_ln86_1_fu_203_p2;

assign zext_ln88_6_fu_217_p1 = add_ln88_2_fu_212_p2;

assign zext_ln88_7_fu_245_p1 = or_ln86_2_reg_298;

assign zext_ln88_8_fu_227_p1 = or_ln86_2_fu_222_p2;

assign zext_ln88_9_fu_236_p1 = add_ln88_3_fu_231_p2;

assign zext_ln88_fu_158_p1 = add_ln88_fu_152_p2;

always @ (posedge ap_clk) begin
    or_ln86_reg_278[0] <= 1'b1;
    or_ln86_1_reg_288[1] <= 1'b1;
    or_ln86_2_reg_298[1:0] <= 2'b11;
end

endmodule //tracking_update_linear_cost_Pipeline_VITIS_LOOP_86_17
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_Pipeline_VITIS_LOOP_93_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        q_col_address0,
        q_col_ce0,
        q_col_q0,
        q_col_address1,
        q_col_ce1,
        q_col_q1,
        empty,
        q_1_address0,
        q_1_ce0,
        q_1_we0,
        q_1_d0,
        q_1_address1,
        q_1_ce1,
        q_1_we1,
        q_1_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] q_col_address0;
output   q_col_ce0;
input  [31:0] q_col_q0;
output  [3:0] q_col_address1;
output   q_col_ce1;
input  [31:0] q_col_q1;
input  [6:0] empty;
output  [6:0] q_1_address0;
output   q_1_ce0;
output   q_1_we0;
output  [31:0] q_1_d0;
output  [6:0] q_1_address1;
output   q_1_ce1;
output   q_1_we1;
output  [31:0] q_1_d1;

reg ap_idle;
reg[3:0] q_col_address0;
reg q_col_ce0;
reg[3:0] q_col_address1;
reg q_col_ce1;
reg[6:0] q_1_address0;
reg q_1_ce0;
reg q_1_we0;
reg[6:0] q_1_address1;
reg q_1_ce1;
reg q_1_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln93_fu_142_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_7_reg_262;
reg   [0:0] icmp_ln93_reg_269;
wire   [3:0] or_ln93_fu_153_p2;
reg   [3:0] or_ln93_reg_278;
wire   [3:0] or_ln93_1_fu_201_p2;
reg   [3:0] or_ln93_1_reg_288;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] or_ln93_2_fu_211_p2;
reg   [3:0] or_ln93_2_reg_298;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] i_19_cast16_fu_148_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln95_1_fu_159_p1;
wire   [63:0] zext_ln95_fu_183_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln95_3_fu_196_p1;
wire   [63:0] zext_ln95_4_fu_206_p1;
wire   [63:0] zext_ln95_7_fu_216_p1;
wire   [63:0] zext_ln95_6_fu_229_p1;
wire   [63:0] zext_ln95_9_fu_242_p1;
reg   [3:0] i_fu_40;
wire   [3:0] add_ln93_fu_164_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_7;
wire   [6:0] i_19_cast7_fu_175_p1;
wire   [6:0] add_ln95_fu_178_p2;
wire   [6:0] zext_ln95_2_fu_188_p1;
wire   [6:0] add_ln95_1_fu_191_p2;
wire   [6:0] zext_ln95_5_fu_221_p1;
wire   [6:0] add_ln95_2_fu_224_p2;
wire   [6:0] zext_ln95_8_fu_234_p1;
wire   [6:0] add_ln95_3_fu_237_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln93_fu_142_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_40 <= add_ln93_fu_164_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_7_reg_262 <= ap_sig_allocacmp_i_7;
        icmp_ln93_reg_269 <= icmp_ln93_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln93_1_reg_288[0] <= or_ln93_1_fu_201_p2[0];
or_ln93_1_reg_288[3 : 2] <= or_ln93_1_fu_201_p2[3 : 2];
        or_ln93_2_reg_298[3 : 2] <= or_ln93_2_fu_211_p2[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_fu_142_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln93_reg_278[3 : 1] <= or_ln93_fu_153_p2[3 : 1];
    end
end

always @ (*) begin
    if (((icmp_ln93_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_7 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_7 = i_fu_40;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_1_address0 = zext_ln95_9_fu_242_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        q_1_address0 = zext_ln95_3_fu_196_p1;
    end else begin
        q_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_1_address1 = zext_ln95_6_fu_229_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        q_1_address1 = zext_ln95_fu_183_p1;
    end else begin
        q_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        q_1_ce0 = 1'b1;
    end else begin
        q_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        q_1_ce1 = 1'b1;
    end else begin
        q_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln93_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        q_1_we0 = 1'b1;
    end else begin
        q_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln93_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        q_1_we1 = 1'b1;
    end else begin
        q_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            q_col_address0 = zext_ln95_7_fu_216_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            q_col_address0 = zext_ln95_1_fu_159_p1;
        end else begin
            q_col_address0 = 'bx;
        end
    end else begin
        q_col_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            q_col_address1 = zext_ln95_4_fu_206_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            q_col_address1 = i_19_cast16_fu_148_p1;
        end else begin
            q_col_address1 = 'bx;
        end
    end else begin
        q_col_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        q_col_ce0 = 1'b1;
    end else begin
        q_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        q_col_ce1 = 1'b1;
    end else begin
        q_col_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln93_fu_164_p2 = (ap_sig_allocacmp_i_7 + 4'd4);

assign add_ln95_1_fu_191_p2 = (zext_ln95_2_fu_188_p1 + empty);

assign add_ln95_2_fu_224_p2 = (zext_ln95_5_fu_221_p1 + empty);

assign add_ln95_3_fu_237_p2 = (zext_ln95_8_fu_234_p1 + empty);

assign add_ln95_fu_178_p2 = (i_19_cast7_fu_175_p1 + empty);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_19_cast16_fu_148_p1 = ap_sig_allocacmp_i_7;

assign i_19_cast7_fu_175_p1 = i_7_reg_262;

assign icmp_ln93_fu_142_p2 = ((ap_sig_allocacmp_i_7 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln93_1_fu_201_p2 = (i_7_reg_262 | 4'd2);

assign or_ln93_2_fu_211_p2 = (i_7_reg_262 | 4'd3);

assign or_ln93_fu_153_p2 = (ap_sig_allocacmp_i_7 | 4'd1);

assign q_1_d0 = q_col_q0;

assign q_1_d1 = q_col_q1;

assign zext_ln95_1_fu_159_p1 = or_ln93_fu_153_p2;

assign zext_ln95_2_fu_188_p1 = or_ln93_reg_278;

assign zext_ln95_3_fu_196_p1 = add_ln95_1_fu_191_p2;

assign zext_ln95_4_fu_206_p1 = or_ln93_1_fu_201_p2;

assign zext_ln95_5_fu_221_p1 = or_ln93_1_reg_288;

assign zext_ln95_6_fu_229_p1 = add_ln95_2_fu_224_p2;

assign zext_ln95_7_fu_216_p1 = or_ln93_2_fu_211_p2;

assign zext_ln95_8_fu_234_p1 = or_ln93_2_reg_298;

assign zext_ln95_9_fu_242_p1 = add_ln95_3_fu_237_p2;

assign zext_ln95_fu_183_p1 = add_ln95_fu_178_p2;

always @ (posedge ap_clk) begin
    or_ln93_reg_278[0] <= 1'b1;
    or_ln93_1_reg_288[1] <= 1'b1;
    or_ln93_2_reg_298[1:0] <= 2'b11;
end

endmodule //tracking_update_linear_cost_Pipeline_VITIS_LOOP_93_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_Pipeline_VITIS_LOOP_99_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xref_col_address0,
        xref_col_ce0,
        xref_col_q0,
        tiny_Q_address0,
        tiny_Q_ce0,
        tiny_Q_q0,
        tiny_x1_address0,
        tiny_x1_ce0,
        tiny_x1_we0,
        tiny_x1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] xref_col_address0;
output   xref_col_ce0;
input  [31:0] xref_col_q0;
output  [3:0] tiny_Q_address0;
output   tiny_Q_ce0;
input  [31:0] tiny_Q_q0;
output  [3:0] tiny_x1_address0;
output   tiny_x1_ce0;
output   tiny_x1_we0;
output  [31:0] tiny_x1_d0;

reg ap_idle;
reg xref_col_ce0;
reg tiny_Q_ce0;
reg tiny_x1_ce0;
reg tiny_x1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln99_fu_90_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] j_12_cast_fu_102_p1;
reg   [63:0] j_12_cast_reg_123;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_32;
wire   [3:0] add_ln99_fu_96_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_3;
wire   [31:0] mul9_i_i_fu_75_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U133(
    .din0(xref_col_q0),
    .din1(tiny_Q_q0),
    .dout(mul9_i_i_fu_75_p2)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln99_fu_90_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_32 <= add_ln99_fu_96_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_32 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_90_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_12_cast_reg_123[3 : 0] <= j_12_cast_fu_102_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln99_fu_90_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_3 = 4'd0;
    end else begin
        ap_sig_allocacmp_j_3 = j_fu_32;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_Q_ce0 = 1'b1;
    end else begin
        tiny_Q_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x1_ce0 = 1'b1;
    end else begin
        tiny_x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x1_we0 = 1'b1;
    end else begin
        tiny_x1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xref_col_ce0 = 1'b1;
    end else begin
        xref_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln99_fu_96_p2 = (ap_sig_allocacmp_j_3 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln99_fu_90_p2 = ((ap_sig_allocacmp_j_3 == 4'd12) ? 1'b1 : 1'b0);

assign j_12_cast_fu_102_p1 = ap_sig_allocacmp_j_3;

assign tiny_Q_address0 = j_12_cast_fu_102_p1;

assign tiny_x1_address0 = j_12_cast_reg_123;

assign tiny_x1_d0 = mul9_i_i_fu_75_p2;

assign xref_col_address0 = j_12_cast_fu_102_p1;

always @ (posedge ap_clk) begin
    j_12_cast_reg_123[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_update_linear_cost_Pipeline_VITIS_LOOP_99_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_Pipeline_VITIS_LOOP_100_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s1_1_address0,
        s1_1_ce0,
        s1_1_q0,
        q_1_address0,
        q_1_ce0,
        q_1_we0,
        q_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] s1_1_address0;
output   s1_1_ce0;
input  [31:0] s1_1_q0;
output  [6:0] q_1_address0;
output   q_1_ce0;
output   q_1_we0;
output  [31:0] q_1_d0;

reg ap_idle;
reg s1_1_ce0;
reg q_1_ce0;
reg q_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln100_fu_69_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] i_18_cast_fu_81_p1;
reg   [63:0] i_18_cast_reg_101;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [6:0] i_fu_30;
wire   [6:0] add_ln100_fu_75_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_13;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln100_fu_69_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_30 <= add_ln100_fu_75_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_30 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_69_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_18_cast_reg_101[6 : 0] <= i_18_cast_fu_81_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln100_fu_69_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_13 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_13 = i_fu_30;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_1_ce0 = 1'b1;
    end else begin
        q_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_1_we0 = 1'b1;
    end else begin
        q_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s1_1_ce0 = 1'b1;
    end else begin
        s1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_75_p2 = (ap_sig_allocacmp_i_13 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_18_cast_fu_81_p1 = ap_sig_allocacmp_i_13;

assign icmp_ln100_fu_69_p2 = ((ap_sig_allocacmp_i_13 == 7'd120) ? 1'b1 : 1'b0);

assign q_1_address0 = i_18_cast_reg_101;

assign q_1_d0 = s1_1_q0;

assign s1_1_address0 = i_18_cast_fu_81_p1;

always @ (posedge ap_clk) begin
    i_18_cast_reg_101[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_update_linear_cost_Pipeline_VITIS_LOOP_100_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tiny_rho_load,
        s1_1_address0,
        s1_1_ce0,
        s1_1_q0,
        s2_1_address0,
        s2_1_ce0,
        s2_1_we0,
        s2_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] tiny_rho_load;
output  [6:0] s1_1_address0;
output   s1_1_ce0;
input  [31:0] s1_1_q0;
output  [6:0] s2_1_address0;
output   s2_1_ce0;
output   s2_1_we0;
output  [31:0] s2_1_d0;

reg ap_idle;
reg s1_1_ce0;
reg s2_1_ce0;
reg s2_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln159_fu_148_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln161_fu_239_p1;
reg   [63:0] zext_ln161_reg_295;
reg   [63:0] zext_ln161_reg_295_pp0_iter1_reg;
wire   [31:0] mul5_i_i1_fu_92_p2;
reg   [31:0] mul5_i_i1_reg_305;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_48;
wire   [3:0] add_ln160_fu_244_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_52;
wire   [3:0] select_ln159_2_fu_221_p3;
reg   [3:0] ap_sig_allocacmp_i_12;
reg   [6:0] indvar_flatten9_fu_56;
wire   [6:0] add_ln159_fu_154_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten9_load;
wire   [2:0] empty_fu_118_p1;
wire   [5:0] p_shl5_fu_130_p3;
wire   [6:0] p_shl4_fu_122_p3;
wire   [6:0] p_shl5_cast_fu_138_p1;
wire   [0:0] icmp_ln160_fu_169_p2;
wire   [3:0] add_ln159_1_fu_163_p2;
wire   [2:0] empty_64_fu_183_p1;
wire   [5:0] p_shl5_mid1_fu_195_p3;
wire   [6:0] p_shl4_mid1_fu_187_p3;
wire   [6:0] p_shl5_cast_mid1_fu_203_p1;
wire   [6:0] p_mid17_fu_207_p2;
wire   [6:0] empty_62_fu_142_p2;
wire   [3:0] select_ln159_fu_175_p3;
wire   [6:0] j_11_cast_fu_229_p1;
wire   [6:0] select_ln159_1_fu_213_p3;
wire   [6:0] add_ln161_fu_233_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U146(
    .din0(tiny_rho_load),
    .din1(s1_1_q0),
    .dout(mul5_i_i1_fu_92_p2)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln159_fu_148_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_52 <= select_ln159_2_fu_221_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln159_fu_148_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten9_fu_56 <= add_ln159_fu_154_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten9_fu_56 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln159_fu_148_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_48 <= add_ln160_fu_244_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_48 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        mul5_i_i1_reg_305 <= mul5_i_i1_fu_92_p2;
        zext_ln161_reg_295_pp0_iter1_reg[6 : 0] <= zext_ln161_reg_295[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln159_fu_148_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln161_reg_295[6 : 0] <= zext_ln161_fu_239_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln159_fu_148_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_12 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_12 = i_fu_52;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten9_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten9_load = indvar_flatten9_fu_56;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s1_1_ce0 = 1'b1;
    end else begin
        s1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s2_1_ce0 = 1'b1;
    end else begin
        s2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s2_1_we0 = 1'b1;
    end else begin
        s2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln159_1_fu_163_p2 = (ap_sig_allocacmp_i_12 + 4'd1);

assign add_ln159_fu_154_p2 = (ap_sig_allocacmp_indvar_flatten9_load + 7'd1);

assign add_ln160_fu_244_p2 = (select_ln159_fu_175_p3 + 4'd1);

assign add_ln161_fu_233_p2 = (j_11_cast_fu_229_p1 + select_ln159_1_fu_213_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_62_fu_142_p2 = (p_shl4_fu_122_p3 - p_shl5_cast_fu_138_p1);

assign empty_64_fu_183_p1 = add_ln159_1_fu_163_p2[2:0];

assign empty_fu_118_p1 = ap_sig_allocacmp_i_12[2:0];

assign icmp_ln159_fu_148_p2 = ((ap_sig_allocacmp_indvar_flatten9_load == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln160_fu_169_p2 = ((ap_sig_allocacmp_j_load == 4'd12) ? 1'b1 : 1'b0);

assign j_11_cast_fu_229_p1 = select_ln159_fu_175_p3;

assign p_mid17_fu_207_p2 = (p_shl4_mid1_fu_187_p3 - p_shl5_cast_mid1_fu_203_p1);

assign p_shl4_fu_122_p3 = {{empty_fu_118_p1}, {4'd0}};

assign p_shl4_mid1_fu_187_p3 = {{empty_64_fu_183_p1}, {4'd0}};

assign p_shl5_cast_fu_138_p1 = p_shl5_fu_130_p3;

assign p_shl5_cast_mid1_fu_203_p1 = p_shl5_mid1_fu_195_p3;

assign p_shl5_fu_130_p3 = {{ap_sig_allocacmp_i_12}, {2'd0}};

assign p_shl5_mid1_fu_195_p3 = {{add_ln159_1_fu_163_p2}, {2'd0}};

assign s1_1_address0 = zext_ln161_fu_239_p1;

assign s2_1_address0 = zext_ln161_reg_295_pp0_iter1_reg;

assign s2_1_d0 = mul5_i_i1_reg_305;

assign select_ln159_1_fu_213_p3 = ((icmp_ln160_fu_169_p2[0:0] == 1'b1) ? p_mid17_fu_207_p2 : empty_62_fu_142_p2);

assign select_ln159_2_fu_221_p3 = ((icmp_ln160_fu_169_p2[0:0] == 1'b1) ? add_ln159_1_fu_163_p2 : ap_sig_allocacmp_i_12);

assign select_ln159_fu_175_p3 = ((icmp_ln160_fu_169_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign zext_ln161_fu_239_p1 = add_ln161_fu_233_p2;

always @ (posedge ap_clk) begin
    zext_ln161_reg_295[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln161_reg_295_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vnew_1_address0,
        vnew_1_ce0,
        vnew_1_q0,
        g_1_address0,
        g_1_ce0,
        g_1_q0,
        s1_1_address0,
        s1_1_ce0,
        s1_1_we0,
        s1_1_d0,
        grp_fu_303_p_din0,
        grp_fu_303_p_din1,
        grp_fu_303_p_opcode,
        grp_fu_303_p_dout0,
        grp_fu_303_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] vnew_1_address0;
output   vnew_1_ce0;
input  [31:0] vnew_1_q0;
output  [6:0] g_1_address0;
output   g_1_ce0;
input  [31:0] g_1_q0;
output  [6:0] s1_1_address0;
output   s1_1_ce0;
output   s1_1_we0;
output  [31:0] s1_1_d0;
output  [31:0] grp_fu_303_p_din0;
output  [31:0] grp_fu_303_p_din1;
output  [0:0] grp_fu_303_p_opcode;
input  [31:0] grp_fu_303_p_dout0;
output   grp_fu_303_p_ce;

reg ap_idle;
reg vnew_1_ce0;
reg g_1_ce0;
reg s1_1_ce0;
reg s1_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln167_fu_155_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln169_fu_246_p1;
reg   [63:0] zext_ln169_reg_298;
reg   [63:0] zext_ln169_reg_298_pp0_iter1_reg;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_46;
wire   [3:0] add_ln168_fu_252_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_50;
wire   [3:0] select_ln167_2_fu_228_p3;
reg   [3:0] ap_sig_allocacmp_i_11;
reg   [6:0] indvar_flatten_fu_54;
wire   [6:0] add_ln167_fu_161_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [2:0] empty_fu_125_p1;
wire   [5:0] p_shl3_fu_137_p3;
wire   [6:0] p_shl2_fu_129_p3;
wire   [6:0] p_shl3_cast_fu_145_p1;
wire   [0:0] icmp_ln168_fu_176_p2;
wire   [3:0] add_ln167_1_fu_170_p2;
wire   [2:0] empty_61_fu_190_p1;
wire   [5:0] p_shl3_mid1_fu_202_p3;
wire   [6:0] p_shl2_mid1_fu_194_p3;
wire   [6:0] p_shl3_cast_mid1_fu_210_p1;
wire   [6:0] p_mid1_fu_214_p2;
wire   [6:0] empty_59_fu_149_p2;
wire   [3:0] select_ln167_fu_182_p3;
wire   [6:0] j_10_cast_fu_236_p1;
wire   [6:0] select_ln167_1_fu_220_p3;
wire   [6:0] add_ln169_fu_240_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_50 <= select_ln167_2_fu_228_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_54 <= add_ln167_fu_161_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_54 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_46 <= add_ln168_fu_252_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_46 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        zext_ln169_reg_298_pp0_iter1_reg[6 : 0] <= zext_ln169_reg_298[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_fu_155_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln169_reg_298[6 : 0] <= zext_ln169_fu_246_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln167_fu_155_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_11 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_11 = i_fu_50;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_54;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        g_1_ce0 = 1'b1;
    end else begin
        g_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s1_1_ce0 = 1'b1;
    end else begin
        s1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s1_1_we0 = 1'b1;
    end else begin
        s1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vnew_1_ce0 = 1'b1;
    end else begin
        vnew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln167_1_fu_170_p2 = (ap_sig_allocacmp_i_11 + 4'd1);

assign add_ln167_fu_161_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln168_fu_252_p2 = (select_ln167_fu_182_p3 + 4'd1);

assign add_ln169_fu_240_p2 = (j_10_cast_fu_236_p1 + select_ln167_1_fu_220_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_59_fu_149_p2 = (p_shl2_fu_129_p3 - p_shl3_cast_fu_145_p1);

assign empty_61_fu_190_p1 = add_ln167_1_fu_170_p2[2:0];

assign empty_fu_125_p1 = ap_sig_allocacmp_i_11[2:0];

assign g_1_address0 = zext_ln169_fu_246_p1;

assign grp_fu_303_p_ce = 1'b1;

assign grp_fu_303_p_din0 = vnew_1_q0;

assign grp_fu_303_p_din1 = g_1_q0;

assign grp_fu_303_p_opcode = 2'd1;

assign icmp_ln167_fu_155_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln168_fu_176_p2 = ((ap_sig_allocacmp_j_load == 4'd12) ? 1'b1 : 1'b0);

assign j_10_cast_fu_236_p1 = select_ln167_fu_182_p3;

assign p_mid1_fu_214_p2 = (p_shl2_mid1_fu_194_p3 - p_shl3_cast_mid1_fu_210_p1);

assign p_shl2_fu_129_p3 = {{empty_fu_125_p1}, {4'd0}};

assign p_shl2_mid1_fu_194_p3 = {{empty_61_fu_190_p1}, {4'd0}};

assign p_shl3_cast_fu_145_p1 = p_shl3_fu_137_p3;

assign p_shl3_cast_mid1_fu_210_p1 = p_shl3_mid1_fu_202_p3;

assign p_shl3_fu_137_p3 = {{ap_sig_allocacmp_i_11}, {2'd0}};

assign p_shl3_mid1_fu_202_p3 = {{add_ln167_1_fu_170_p2}, {2'd0}};

assign s1_1_address0 = zext_ln169_reg_298_pp0_iter1_reg;

assign s1_1_d0 = grp_fu_303_p_dout0;

assign select_ln167_1_fu_220_p3 = ((icmp_ln168_fu_176_p2[0:0] == 1'b1) ? p_mid1_fu_214_p2 : empty_59_fu_149_p2);

assign select_ln167_2_fu_228_p3 = ((icmp_ln168_fu_176_p2[0:0] == 1'b1) ? add_ln167_1_fu_170_p2 : ap_sig_allocacmp_i_11);

assign select_ln167_fu_182_p3 = ((icmp_ln168_fu_176_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign vnew_1_address0 = zext_ln169_fu_246_p1;

assign zext_ln169_fu_246_p1 = add_ln169_fu_240_p2;

always @ (posedge ap_clk) begin
    zext_ln169_reg_298[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln169_reg_298_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        q_1_address0,
        q_1_ce0,
        q_1_q0,
        s2_1_address0,
        s2_1_ce0,
        s2_1_q0,
        s1_1_address0,
        s1_1_ce0,
        s1_1_we0,
        s1_1_d0,
        grp_fu_303_p_din0,
        grp_fu_303_p_din1,
        grp_fu_303_p_opcode,
        grp_fu_303_p_dout0,
        grp_fu_303_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] q_1_address0;
output   q_1_ce0;
input  [31:0] q_1_q0;
output  [6:0] s2_1_address0;
output   s2_1_ce0;
input  [31:0] s2_1_q0;
output  [6:0] s1_1_address0;
output   s1_1_ce0;
output   s1_1_we0;
output  [31:0] s1_1_d0;
output  [31:0] grp_fu_303_p_din0;
output  [31:0] grp_fu_303_p_din1;
output  [0:0] grp_fu_303_p_opcode;
input  [31:0] grp_fu_303_p_dout0;
output   grp_fu_303_p_ce;

reg ap_idle;
reg q_1_ce0;
reg s2_1_ce0;
reg s1_1_ce0;
reg s1_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln167_fu_155_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln169_fu_246_p1;
reg   [63:0] zext_ln169_reg_298;
reg   [63:0] zext_ln169_reg_298_pp0_iter1_reg;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_46;
wire   [3:0] add_ln168_fu_252_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_50;
wire   [3:0] select_ln167_2_fu_228_p3;
reg   [3:0] ap_sig_allocacmp_i_10;
reg   [6:0] indvar_flatten19_fu_54;
wire   [6:0] add_ln167_fu_161_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten19_load;
wire   [2:0] empty_fu_125_p1;
wire   [5:0] p_shl7_fu_137_p3;
wire   [6:0] p_shl6_fu_129_p3;
wire   [6:0] p_shl7_cast_fu_145_p1;
wire   [0:0] icmp_ln168_fu_176_p2;
wire   [3:0] add_ln167_1_fu_170_p2;
wire   [2:0] empty_58_fu_190_p1;
wire   [5:0] p_shl7_mid1_fu_202_p3;
wire   [6:0] p_shl6_mid1_fu_194_p3;
wire   [6:0] p_shl7_cast_mid1_fu_210_p1;
wire   [6:0] p_mid117_fu_214_p2;
wire   [6:0] empty_56_fu_149_p2;
wire   [3:0] select_ln167_fu_182_p3;
wire   [6:0] j_13_cast_fu_236_p1;
wire   [6:0] select_ln167_1_fu_220_p3;
wire   [6:0] add_ln169_fu_240_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_50 <= select_ln167_2_fu_228_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten19_fu_54 <= add_ln167_fu_161_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten19_fu_54 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_46 <= add_ln168_fu_252_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_46 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        zext_ln169_reg_298_pp0_iter1_reg[6 : 0] <= zext_ln169_reg_298[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_fu_155_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln169_reg_298[6 : 0] <= zext_ln169_fu_246_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln167_fu_155_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_10 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_10 = i_fu_50;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten19_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten19_load = indvar_flatten19_fu_54;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_1_ce0 = 1'b1;
    end else begin
        q_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s1_1_ce0 = 1'b1;
    end else begin
        s1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s1_1_we0 = 1'b1;
    end else begin
        s1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s2_1_ce0 = 1'b1;
    end else begin
        s2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln167_1_fu_170_p2 = (ap_sig_allocacmp_i_10 + 4'd1);

assign add_ln167_fu_161_p2 = (ap_sig_allocacmp_indvar_flatten19_load + 7'd1);

assign add_ln168_fu_252_p2 = (select_ln167_fu_182_p3 + 4'd1);

assign add_ln169_fu_240_p2 = (j_13_cast_fu_236_p1 + select_ln167_1_fu_220_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_56_fu_149_p2 = (p_shl6_fu_129_p3 - p_shl7_cast_fu_145_p1);

assign empty_58_fu_190_p1 = add_ln167_1_fu_170_p2[2:0];

assign empty_fu_125_p1 = ap_sig_allocacmp_i_10[2:0];

assign grp_fu_303_p_ce = 1'b1;

assign grp_fu_303_p_din0 = q_1_q0;

assign grp_fu_303_p_din1 = s2_1_q0;

assign grp_fu_303_p_opcode = 2'd1;

assign icmp_ln167_fu_155_p2 = ((ap_sig_allocacmp_indvar_flatten19_load == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln168_fu_176_p2 = ((ap_sig_allocacmp_j_load == 4'd12) ? 1'b1 : 1'b0);

assign j_13_cast_fu_236_p1 = select_ln167_fu_182_p3;

assign p_mid117_fu_214_p2 = (p_shl6_mid1_fu_194_p3 - p_shl7_cast_mid1_fu_210_p1);

assign p_shl6_fu_129_p3 = {{empty_fu_125_p1}, {4'd0}};

assign p_shl6_mid1_fu_194_p3 = {{empty_58_fu_190_p1}, {4'd0}};

assign p_shl7_cast_fu_145_p1 = p_shl7_fu_137_p3;

assign p_shl7_cast_mid1_fu_210_p1 = p_shl7_mid1_fu_202_p3;

assign p_shl7_fu_137_p3 = {{ap_sig_allocacmp_i_10}, {2'd0}};

assign p_shl7_mid1_fu_202_p3 = {{add_ln167_1_fu_170_p2}, {2'd0}};

assign q_1_address0 = zext_ln169_fu_246_p1;

assign s1_1_address0 = zext_ln169_reg_298_pp0_iter1_reg;

assign s1_1_d0 = grp_fu_303_p_dout0;

assign s2_1_address0 = zext_ln169_fu_246_p1;

assign select_ln167_1_fu_220_p3 = ((icmp_ln168_fu_176_p2[0:0] == 1'b1) ? p_mid117_fu_214_p2 : empty_56_fu_149_p2);

assign select_ln167_2_fu_228_p3 = ((icmp_ln168_fu_176_p2[0:0] == 1'b1) ? add_ln167_1_fu_170_p2 : ap_sig_allocacmp_i_10);

assign select_ln167_fu_182_p3 = ((icmp_ln168_fu_176_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign zext_ln169_fu_246_p1 = add_ln169_fu_240_p2;

always @ (posedge ap_clk) begin
    zext_ln169_reg_298[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln169_reg_298_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_update_linear_cost_xref_col_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0, address1, ce1, d1, we1,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 4;
parameter AddressRange = 12;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];




always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
    end
end


endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_linear_cost (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        znew_1_address0,
        znew_1_ce0,
        znew_1_q0,
        y_1_address0,
        y_1_ce0,
        y_1_q0,
        m1_1_address0,
        m1_1_ce0,
        m1_1_we0,
        m1_1_d0,
        m1_1_q0,
        tiny_rho,
        r_1_address0,
        r_1_ce0,
        r_1_we0,
        r_1_d0,
        vnew_1_address0,
        vnew_1_ce0,
        vnew_1_q0,
        vnew_1_address1,
        vnew_1_ce1,
        vnew_1_q1,
        g_1_address0,
        g_1_ce0,
        g_1_q0,
        g_1_address1,
        g_1_ce1,
        g_1_q1,
        s1_1_address0,
        s1_1_ce0,
        s1_1_we0,
        s1_1_d0,
        s1_1_q0,
        s2_1_address0,
        s2_1_ce0,
        s2_1_we0,
        s2_1_d0,
        s2_1_q0,
        q_1_address0,
        q_1_ce0,
        q_1_we0,
        q_1_d0,
        q_1_q0,
        q_1_address1,
        q_1_ce1,
        q_1_we1,
        q_1_d1,
        q_1_q1,
        Xref_1_address0,
        Xref_1_ce0,
        Xref_1_q0,
        Xref_1_address1,
        Xref_1_ce1,
        Xref_1_q1,
        p_1_address0,
        p_1_ce0,
        p_1_we0,
        p_1_d0,
        p_1_q0,
        p_1_address1,
        p_1_ce1,
        p_1_we1,
        p_1_d1,
        p_1_q1,
        tiny_x1_address0,
        tiny_x1_ce0,
        tiny_x1_we0,
        tiny_x1_d0,
        tiny_x1_q0,
        tiny_x2_address0,
        tiny_x2_ce0,
        tiny_x2_we0,
        tiny_x2_d0,
        tiny_x2_q0,
        PinfT_1_address0,
        PinfT_1_ce0,
        PinfT_1_q0,
        PinfT_1_address1,
        PinfT_1_ce1,
        PinfT_1_q1,
        tiny_x3_address0,
        tiny_x3_ce0,
        tiny_x3_we0,
        tiny_x3_d0,
        tiny_x3_q0,
        tiny_Q_address0,
        tiny_Q_ce0,
        tiny_Q_q0
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] znew_1_address0;
output   znew_1_ce0;
input  [31:0] znew_1_q0;
output  [5:0] y_1_address0;
output   y_1_ce0;
input  [31:0] y_1_q0;
output  [5:0] m1_1_address0;
output   m1_1_ce0;
output   m1_1_we0;
output  [31:0] m1_1_d0;
input  [31:0] m1_1_q0;
input  [31:0] tiny_rho;
output  [5:0] r_1_address0;
output   r_1_ce0;
output   r_1_we0;
output  [31:0] r_1_d0;
output  [6:0] vnew_1_address0;
output   vnew_1_ce0;
input  [31:0] vnew_1_q0;
output  [6:0] vnew_1_address1;
output   vnew_1_ce1;
input  [31:0] vnew_1_q1;
output  [6:0] g_1_address0;
output   g_1_ce0;
input  [31:0] g_1_q0;
output  [6:0] g_1_address1;
output   g_1_ce1;
input  [31:0] g_1_q1;
output  [6:0] s1_1_address0;
output   s1_1_ce0;
output   s1_1_we0;
output  [31:0] s1_1_d0;
input  [31:0] s1_1_q0;
output  [6:0] s2_1_address0;
output   s2_1_ce0;
output   s2_1_we0;
output  [31:0] s2_1_d0;
input  [31:0] s2_1_q0;
output  [6:0] q_1_address0;
output   q_1_ce0;
output   q_1_we0;
output  [31:0] q_1_d0;
input  [31:0] q_1_q0;
output  [6:0] q_1_address1;
output   q_1_ce1;
output   q_1_we1;
output  [31:0] q_1_d1;
input  [31:0] q_1_q1;
output  [6:0] Xref_1_address0;
output   Xref_1_ce0;
input  [31:0] Xref_1_q0;
output  [6:0] Xref_1_address1;
output   Xref_1_ce1;
input  [31:0] Xref_1_q1;
output  [6:0] p_1_address0;
output   p_1_ce0;
output   p_1_we0;
output  [31:0] p_1_d0;
input  [31:0] p_1_q0;
output  [6:0] p_1_address1;
output   p_1_ce1;
output   p_1_we1;
output  [31:0] p_1_d1;
input  [31:0] p_1_q1;
output  [3:0] tiny_x1_address0;
output   tiny_x1_ce0;
output   tiny_x1_we0;
output  [31:0] tiny_x1_d0;
input  [31:0] tiny_x1_q0;
output  [3:0] tiny_x2_address0;
output   tiny_x2_ce0;
output   tiny_x2_we0;
output  [31:0] tiny_x2_d0;
input  [31:0] tiny_x2_q0;
output  [7:0] PinfT_1_address0;
output   PinfT_1_ce0;
input  [31:0] PinfT_1_q0;
output  [7:0] PinfT_1_address1;
output   PinfT_1_ce1;
input  [31:0] PinfT_1_q1;
output  [3:0] tiny_x3_address0;
output   tiny_x3_ce0;
output   tiny_x3_we0;
output  [31:0] tiny_x3_d0;
input  [31:0] tiny_x3_q0;
output  [3:0] tiny_Q_address0;
output   tiny_Q_ce0;
input  [31:0] tiny_Q_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg znew_1_ce0;
reg y_1_ce0;
reg[5:0] m1_1_address0;
reg m1_1_ce0;
reg m1_1_we0;
reg r_1_ce0;
reg r_1_we0;
reg[6:0] vnew_1_address0;
reg vnew_1_ce0;
reg vnew_1_ce1;
reg[6:0] g_1_address0;
reg g_1_ce0;
reg g_1_ce1;
reg[6:0] s1_1_address0;
reg s1_1_ce0;
reg s1_1_we0;
reg[31:0] s1_1_d0;
reg[6:0] s2_1_address0;
reg s2_1_ce0;
reg s2_1_we0;
reg[6:0] q_1_address0;
reg q_1_ce0;
reg q_1_we0;
reg[31:0] q_1_d0;
reg[6:0] q_1_address1;
reg q_1_ce1;
reg q_1_we1;
reg[6:0] Xref_1_address0;
reg Xref_1_ce0;
reg[6:0] Xref_1_address1;
reg Xref_1_ce1;
reg[3:0] tiny_x1_address0;
reg tiny_x1_ce0;
reg tiny_x1_we0;
reg[31:0] tiny_x1_d0;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] add_ln167_fu_329_p2;
reg   [3:0] add_ln167_reg_517;
wire    ap_CS_fsm_state2;
wire   [5:0] tmp_fu_335_p3;
reg   [5:0] tmp_reg_522;
wire   [0:0] icmp_ln167_fu_323_p2;
wire   [31:0] bitcast_ln116_1_fu_357_p1;
reg   [31:0] bitcast_ln116_1_reg_539;
wire   [2:0] add_ln168_fu_376_p2;
reg   [2:0] add_ln168_reg_547;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln169_fu_387_p1;
reg   [63:0] zext_ln169_reg_552;
wire   [0:0] icmp_ln168_fu_370_p2;
wire    ap_CS_fsm_state4;
wire   [3:0] add_ln159_fu_406_p2;
reg   [3:0] add_ln159_reg_580;
wire    ap_CS_fsm_state6;
wire   [5:0] tmp_s_fu_412_p3;
reg   [5:0] tmp_s_reg_585;
wire   [0:0] icmp_ln159_fu_400_p2;
wire   [2:0] add_ln160_fu_435_p2;
reg   [2:0] add_ln160_reg_600;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln161_fu_446_p1;
reg   [63:0] zext_ln161_reg_605;
wire   [0:0] icmp_ln160_fu_429_p2;
wire   [31:0] mul5_i_i_fu_310_p2;
reg   [31:0] mul5_i_i_reg_615;
wire    ap_CS_fsm_state8;
wire   [6:0] empty_71_fu_494_p2;
reg   [6:0] empty_71_reg_623;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln215_fu_458_p2;
reg   [3:0] xref_col_address0;
reg    xref_col_ce0;
reg    xref_col_we0;
wire   [31:0] xref_col_q0;
reg    xref_col_ce1;
reg    xref_col_we1;
reg   [3:0] q_col_address0;
reg    q_col_ce0;
reg    q_col_we0;
reg   [31:0] q_col_d0;
wire   [31:0] q_col_q0;
reg   [3:0] q_col_address1;
reg    q_col_ce1;
reg    q_col_we1;
wire   [31:0] q_col_q1;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_ap_start;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_ap_done;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_ap_idle;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_ap_ready;
wire   [3:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_ce0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_we0;
wire   [31:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_d0;
wire   [3:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_address1;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_ce1;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_we1;
wire   [31:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_d1;
wire   [6:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_Xref_1_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_Xref_1_ce0;
wire   [6:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_Xref_1_address1;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_Xref_1_ce1;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_ap_start;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_ap_done;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_ap_idle;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_ap_ready;
wire   [3:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_ce0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_we0;
wire   [31:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_d0;
wire   [3:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_address1;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_ce1;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_we1;
wire   [31:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_d1;
wire   [6:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_1_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_1_ce0;
wire   [6:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_1_address1;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_1_ce1;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_ap_start;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_ap_done;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_ap_idle;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_ap_ready;
wire   [6:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_vnew_1_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_vnew_1_ce0;
wire   [6:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_g_1_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_g_1_ce0;
wire   [6:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_s1_1_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_s1_1_ce0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_s1_1_we0;
wire   [31:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_s1_1_d0;
wire   [31:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_grp_fu_303_p_din0;
wire   [31:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_grp_fu_303_p_din1;
wire   [0:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_grp_fu_303_p_opcode;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_grp_fu_303_p_ce;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_ap_start;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_ap_done;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_ap_idle;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_ap_ready;
wire   [3:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_xref_col_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_xref_col_ce0;
wire   [3:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_tiny_Q_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_tiny_Q_ce0;
wire   [3:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_tiny_x1_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_tiny_x1_ce0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_tiny_x1_we0;
wire   [31:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_tiny_x1_d0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_ap_start;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_ap_done;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_ap_idle;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_ap_ready;
wire   [3:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_q_col_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_q_col_ce0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_q_col_we0;
wire   [31:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_q_col_d0;
wire   [3:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_tiny_x1_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_tiny_x1_ce0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_ap_start;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_ap_done;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_ap_idle;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_ap_ready;
wire   [3:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_col_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_col_ce0;
wire   [3:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_col_address1;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_col_ce1;
wire   [6:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_ce0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_we0;
wire   [31:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_d0;
wire   [6:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_address1;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_ce1;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_we1;
wire   [31:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_d1;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_ap_start;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_ap_done;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_ap_idle;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_ap_ready;
wire   [6:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_s1_1_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_s1_1_ce0;
wire   [6:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_s2_1_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_s2_1_ce0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_s2_1_we0;
wire   [31:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_s2_1_d0;
wire    grp_update_linear_cost_4_fu_263_ap_start;
wire    grp_update_linear_cost_4_fu_263_ap_done;
wire    grp_update_linear_cost_4_fu_263_ap_idle;
wire    grp_update_linear_cost_4_fu_263_ap_ready;
wire   [6:0] grp_update_linear_cost_4_fu_263_vnew_1_address0;
wire    grp_update_linear_cost_4_fu_263_vnew_1_ce0;
wire   [6:0] grp_update_linear_cost_4_fu_263_vnew_1_address1;
wire    grp_update_linear_cost_4_fu_263_vnew_1_ce1;
wire   [6:0] grp_update_linear_cost_4_fu_263_g_1_address0;
wire    grp_update_linear_cost_4_fu_263_g_1_ce0;
wire   [6:0] grp_update_linear_cost_4_fu_263_g_1_address1;
wire    grp_update_linear_cost_4_fu_263_g_1_ce1;
wire   [6:0] grp_update_linear_cost_4_fu_263_Xref_1_address0;
wire    grp_update_linear_cost_4_fu_263_Xref_1_ce0;
wire   [6:0] grp_update_linear_cost_4_fu_263_Xref_1_address1;
wire    grp_update_linear_cost_4_fu_263_Xref_1_ce1;
wire   [6:0] grp_update_linear_cost_4_fu_263_p_1_address0;
wire    grp_update_linear_cost_4_fu_263_p_1_ce0;
wire    grp_update_linear_cost_4_fu_263_p_1_we0;
wire   [31:0] grp_update_linear_cost_4_fu_263_p_1_d0;
wire   [6:0] grp_update_linear_cost_4_fu_263_p_1_address1;
wire    grp_update_linear_cost_4_fu_263_p_1_ce1;
wire    grp_update_linear_cost_4_fu_263_p_1_we1;
wire   [31:0] grp_update_linear_cost_4_fu_263_p_1_d1;
wire   [3:0] grp_update_linear_cost_4_fu_263_tiny_x1_address0;
wire    grp_update_linear_cost_4_fu_263_tiny_x1_ce0;
wire    grp_update_linear_cost_4_fu_263_tiny_x1_we0;
wire   [31:0] grp_update_linear_cost_4_fu_263_tiny_x1_d0;
wire   [3:0] grp_update_linear_cost_4_fu_263_tiny_x2_address0;
wire    grp_update_linear_cost_4_fu_263_tiny_x2_ce0;
wire    grp_update_linear_cost_4_fu_263_tiny_x2_we0;
wire   [31:0] grp_update_linear_cost_4_fu_263_tiny_x2_d0;
wire   [7:0] grp_update_linear_cost_4_fu_263_PinfT_1_address0;
wire    grp_update_linear_cost_4_fu_263_PinfT_1_ce0;
wire   [7:0] grp_update_linear_cost_4_fu_263_PinfT_1_address1;
wire    grp_update_linear_cost_4_fu_263_PinfT_1_ce1;
wire   [3:0] grp_update_linear_cost_4_fu_263_tiny_x3_address0;
wire    grp_update_linear_cost_4_fu_263_tiny_x3_ce0;
wire    grp_update_linear_cost_4_fu_263_tiny_x3_we0;
wire   [31:0] grp_update_linear_cost_4_fu_263_tiny_x3_d0;
wire   [31:0] grp_update_linear_cost_4_fu_263_grp_fu_303_p_din0;
wire   [31:0] grp_update_linear_cost_4_fu_263_grp_fu_303_p_din1;
wire   [1:0] grp_update_linear_cost_4_fu_263_grp_fu_303_p_opcode;
wire    grp_update_linear_cost_4_fu_263_grp_fu_303_p_ce;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_ap_start;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_ap_done;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_ap_idle;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_ap_ready;
wire   [6:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_q_1_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_q_1_ce0;
wire   [6:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_s2_1_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_s2_1_ce0;
wire   [6:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_s1_1_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_s1_1_ce0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_s1_1_we0;
wire   [31:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_s1_1_d0;
wire   [31:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_grp_fu_303_p_din0;
wire   [31:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_grp_fu_303_p_din1;
wire   [0:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_grp_fu_303_p_opcode;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_grp_fu_303_p_ce;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_start;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_done;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_idle;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_ready;
wire   [6:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_s1_1_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_s1_1_ce0;
wire   [6:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_q_1_address0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_q_1_ce0;
wire    grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_q_1_we0;
wire   [31:0] grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_q_1_d0;
reg   [2:0] j_reg_182;
wire    ap_CS_fsm_state5;
reg   [2:0] j_8_reg_193;
wire    ap_CS_fsm_state9;
reg    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_ap_start_reg;
wire    ap_CS_fsm_state11;
reg    grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_ap_start_reg;
reg    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_ap_start_reg;
wire    ap_CS_fsm_state18;
reg    grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_ap_start_reg;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg    grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_ap_start_reg;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
reg    grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_ap_start_reg;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
reg    grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_ap_start_reg;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
reg    grp_update_linear_cost_4_fu_263_ap_start_reg;
reg    grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_ap_start_reg;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
reg    grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_start_reg;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
reg   [3:0] i_fu_102;
reg   [3:0] i_11_fu_114;
reg   [3:0] i_12_fu_118;
wire   [3:0] add_ln215_fu_464_p2;
wire   [31:0] grp_fu_303_p2;
reg   [31:0] grp_fu_303_p0;
reg   [31:0] grp_fu_303_p1;
wire   [31:0] bitcast_ln116_fu_347_p1;
wire   [31:0] xor_ln116_fu_351_p2;
wire   [5:0] zext_ln168_fu_366_p1;
wire   [5:0] add_ln169_fu_382_p2;
wire   [5:0] zext_ln160_fu_425_p1;
wire   [5:0] add_ln161_fu_441_p2;
wire   [2:0] empty_70_fu_470_p1;
wire   [5:0] p_shl1_fu_482_p3;
wire   [6:0] p_shl_fu_474_p3;
wire   [6:0] p_shl1_cast_fu_490_p1;
reg   [1:0] grp_fu_303_opcode;
reg    grp_fu_303_ce;
reg   [23:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_block_state11_on_subcall_done;
reg    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
reg    ap_block_state20_on_subcall_done;
reg    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_4_fu_263_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_ap_start_reg = 1'b0;
#0 grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_start_reg = 1'b0;
end

tracking_update_linear_cost_xref_col_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
xref_col_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(xref_col_address0),
    .ce0(xref_col_ce0),
    .we0(xref_col_we0),
    .d0(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_d0),
    .q0(xref_col_q0),
    .address1(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_address1),
    .ce1(xref_col_ce1),
    .we1(xref_col_we1),
    .d1(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_d1)
);

tracking_forward_pass_2_x_col_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
q_col_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q_col_address0),
    .ce0(q_col_ce0),
    .we0(q_col_we0),
    .d0(q_col_d0),
    .q0(q_col_q0),
    .address1(q_col_address1),
    .ce1(q_col_ce1),
    .we1(q_col_we1),
    .d1(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_d1),
    .q1(q_col_q1)
);

tracking_update_linear_cost_Pipeline_VITIS_LOOP_86_1 grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_ap_start),
    .ap_done(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_ap_done),
    .ap_idle(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_ap_idle),
    .ap_ready(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_ap_ready),
    .empty(empty_71_reg_623),
    .xref_col_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_address0),
    .xref_col_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_ce0),
    .xref_col_we0(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_we0),
    .xref_col_d0(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_d0),
    .xref_col_address1(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_address1),
    .xref_col_ce1(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_ce1),
    .xref_col_we1(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_we1),
    .xref_col_d1(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_d1),
    .Xref_1_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_Xref_1_address0),
    .Xref_1_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_Xref_1_ce0),
    .Xref_1_q0(Xref_1_q0),
    .Xref_1_address1(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_Xref_1_address1),
    .Xref_1_ce1(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_Xref_1_ce1),
    .Xref_1_q1(Xref_1_q1)
);

tracking_update_linear_cost_Pipeline_VITIS_LOOP_86_17 grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_ap_start),
    .ap_done(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_ap_done),
    .ap_idle(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_ap_idle),
    .ap_ready(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_ap_ready),
    .empty(empty_71_reg_623),
    .q_col_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_address0),
    .q_col_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_ce0),
    .q_col_we0(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_we0),
    .q_col_d0(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_d0),
    .q_col_address1(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_address1),
    .q_col_ce1(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_ce1),
    .q_col_we1(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_we1),
    .q_col_d1(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_d1),
    .q_1_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_1_address0),
    .q_1_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_1_ce0),
    .q_1_q0(q_1_q0),
    .q_1_address1(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_1_address1),
    .q_1_ce1(grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_1_ce1),
    .q_1_q1(q_1_q1)
);

tracking_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2 grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_ap_start),
    .ap_done(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_ap_done),
    .ap_idle(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_ap_idle),
    .ap_ready(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_ap_ready),
    .vnew_1_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_vnew_1_address0),
    .vnew_1_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_vnew_1_ce0),
    .vnew_1_q0(vnew_1_q0),
    .g_1_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_g_1_address0),
    .g_1_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_g_1_ce0),
    .g_1_q0(g_1_q0),
    .s1_1_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_s1_1_address0),
    .s1_1_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_s1_1_ce0),
    .s1_1_we0(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_s1_1_we0),
    .s1_1_d0(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_s1_1_d0),
    .grp_fu_303_p_din0(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_grp_fu_303_p_din0),
    .grp_fu_303_p_din1(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_grp_fu_303_p_din1),
    .grp_fu_303_p_opcode(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_grp_fu_303_p_opcode),
    .grp_fu_303_p_dout0(grp_fu_303_p2),
    .grp_fu_303_p_ce(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_grp_fu_303_p_ce)
);

tracking_update_linear_cost_Pipeline_VITIS_LOOP_99_2 grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_ap_start),
    .ap_done(grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_ap_done),
    .ap_idle(grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_ap_idle),
    .ap_ready(grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_ap_ready),
    .xref_col_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_xref_col_address0),
    .xref_col_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_xref_col_ce0),
    .xref_col_q0(xref_col_q0),
    .tiny_Q_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_tiny_Q_address0),
    .tiny_Q_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_tiny_Q_ce0),
    .tiny_Q_q0(tiny_Q_q0),
    .tiny_x1_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_tiny_x1_address0),
    .tiny_x1_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_tiny_x1_ce0),
    .tiny_x1_we0(grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_tiny_x1_we0),
    .tiny_x1_d0(grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_tiny_x1_d0)
);

tracking_update_linear_cost_Pipeline_VITIS_LOOP_72_2 grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_ap_start),
    .ap_done(grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_ap_done),
    .ap_idle(grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_ap_idle),
    .ap_ready(grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_ap_ready),
    .q_col_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_q_col_address0),
    .q_col_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_q_col_ce0),
    .q_col_we0(grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_q_col_we0),
    .q_col_d0(grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_q_col_d0),
    .tiny_x1_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_tiny_x1_address0),
    .tiny_x1_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_tiny_x1_ce0),
    .tiny_x1_q0(tiny_x1_q0)
);

tracking_update_linear_cost_Pipeline_VITIS_LOOP_93_1 grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_ap_start),
    .ap_done(grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_ap_done),
    .ap_idle(grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_ap_idle),
    .ap_ready(grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_ap_ready),
    .q_col_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_col_address0),
    .q_col_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_col_ce0),
    .q_col_q0(q_col_q0),
    .q_col_address1(grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_col_address1),
    .q_col_ce1(grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_col_ce1),
    .q_col_q1(q_col_q1),
    .empty(empty_71_reg_623),
    .q_1_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_address0),
    .q_1_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_ce0),
    .q_1_we0(grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_we0),
    .q_1_d0(grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_d0),
    .q_1_address1(grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_address1),
    .q_1_ce1(grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_ce1),
    .q_1_we1(grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_we1),
    .q_1_d1(grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_d1)
);

tracking_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2 grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_ap_start),
    .ap_done(grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_ap_done),
    .ap_idle(grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_ap_idle),
    .ap_ready(grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_ap_ready),
    .tiny_rho_load(tiny_rho),
    .s1_1_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_s1_1_address0),
    .s1_1_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_s1_1_ce0),
    .s1_1_q0(s1_1_q0),
    .s2_1_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_s2_1_address0),
    .s2_1_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_s2_1_ce0),
    .s2_1_we0(grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_s2_1_we0),
    .s2_1_d0(grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_s2_1_d0)
);

tracking_update_linear_cost_4 grp_update_linear_cost_4_fu_263(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_4_fu_263_ap_start),
    .ap_done(grp_update_linear_cost_4_fu_263_ap_done),
    .ap_idle(grp_update_linear_cost_4_fu_263_ap_idle),
    .ap_ready(grp_update_linear_cost_4_fu_263_ap_ready),
    .vnew_1_address0(grp_update_linear_cost_4_fu_263_vnew_1_address0),
    .vnew_1_ce0(grp_update_linear_cost_4_fu_263_vnew_1_ce0),
    .vnew_1_q0(vnew_1_q0),
    .vnew_1_address1(grp_update_linear_cost_4_fu_263_vnew_1_address1),
    .vnew_1_ce1(grp_update_linear_cost_4_fu_263_vnew_1_ce1),
    .vnew_1_q1(vnew_1_q1),
    .g_1_address0(grp_update_linear_cost_4_fu_263_g_1_address0),
    .g_1_ce0(grp_update_linear_cost_4_fu_263_g_1_ce0),
    .g_1_q0(g_1_q0),
    .g_1_address1(grp_update_linear_cost_4_fu_263_g_1_address1),
    .g_1_ce1(grp_update_linear_cost_4_fu_263_g_1_ce1),
    .g_1_q1(g_1_q1),
    .Xref_1_address0(grp_update_linear_cost_4_fu_263_Xref_1_address0),
    .Xref_1_ce0(grp_update_linear_cost_4_fu_263_Xref_1_ce0),
    .Xref_1_q0(Xref_1_q0),
    .Xref_1_address1(grp_update_linear_cost_4_fu_263_Xref_1_address1),
    .Xref_1_ce1(grp_update_linear_cost_4_fu_263_Xref_1_ce1),
    .Xref_1_q1(Xref_1_q1),
    .p_1_address0(grp_update_linear_cost_4_fu_263_p_1_address0),
    .p_1_ce0(grp_update_linear_cost_4_fu_263_p_1_ce0),
    .p_1_we0(grp_update_linear_cost_4_fu_263_p_1_we0),
    .p_1_d0(grp_update_linear_cost_4_fu_263_p_1_d0),
    .p_1_q0(p_1_q0),
    .p_1_address1(grp_update_linear_cost_4_fu_263_p_1_address1),
    .p_1_ce1(grp_update_linear_cost_4_fu_263_p_1_ce1),
    .p_1_we1(grp_update_linear_cost_4_fu_263_p_1_we1),
    .p_1_d1(grp_update_linear_cost_4_fu_263_p_1_d1),
    .p_1_q1(p_1_q1),
    .tiny_x1_address0(grp_update_linear_cost_4_fu_263_tiny_x1_address0),
    .tiny_x1_ce0(grp_update_linear_cost_4_fu_263_tiny_x1_ce0),
    .tiny_x1_we0(grp_update_linear_cost_4_fu_263_tiny_x1_we0),
    .tiny_x1_d0(grp_update_linear_cost_4_fu_263_tiny_x1_d0),
    .tiny_x1_q0(tiny_x1_q0),
    .tiny_rho(tiny_rho),
    .tiny_x2_address0(grp_update_linear_cost_4_fu_263_tiny_x2_address0),
    .tiny_x2_ce0(grp_update_linear_cost_4_fu_263_tiny_x2_ce0),
    .tiny_x2_we0(grp_update_linear_cost_4_fu_263_tiny_x2_we0),
    .tiny_x2_d0(grp_update_linear_cost_4_fu_263_tiny_x2_d0),
    .tiny_x2_q0(tiny_x2_q0),
    .PinfT_1_address0(grp_update_linear_cost_4_fu_263_PinfT_1_address0),
    .PinfT_1_ce0(grp_update_linear_cost_4_fu_263_PinfT_1_ce0),
    .PinfT_1_q0(PinfT_1_q0),
    .PinfT_1_address1(grp_update_linear_cost_4_fu_263_PinfT_1_address1),
    .PinfT_1_ce1(grp_update_linear_cost_4_fu_263_PinfT_1_ce1),
    .PinfT_1_q1(PinfT_1_q1),
    .tiny_x3_address0(grp_update_linear_cost_4_fu_263_tiny_x3_address0),
    .tiny_x3_ce0(grp_update_linear_cost_4_fu_263_tiny_x3_ce0),
    .tiny_x3_we0(grp_update_linear_cost_4_fu_263_tiny_x3_we0),
    .tiny_x3_d0(grp_update_linear_cost_4_fu_263_tiny_x3_d0),
    .tiny_x3_q0(tiny_x3_q0),
    .grp_fu_303_p_din0(grp_update_linear_cost_4_fu_263_grp_fu_303_p_din0),
    .grp_fu_303_p_din1(grp_update_linear_cost_4_fu_263_grp_fu_303_p_din1),
    .grp_fu_303_p_opcode(grp_update_linear_cost_4_fu_263_grp_fu_303_p_opcode),
    .grp_fu_303_p_dout0(grp_fu_303_p2),
    .grp_fu_303_p_ce(grp_update_linear_cost_4_fu_263_grp_fu_303_p_ce)
);

tracking_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28 grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_ap_start),
    .ap_done(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_ap_done),
    .ap_idle(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_ap_idle),
    .ap_ready(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_ap_ready),
    .q_1_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_q_1_address0),
    .q_1_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_q_1_ce0),
    .q_1_q0(q_1_q0),
    .s2_1_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_s2_1_address0),
    .s2_1_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_s2_1_ce0),
    .s2_1_q0(s2_1_q0),
    .s1_1_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_s1_1_address0),
    .s1_1_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_s1_1_ce0),
    .s1_1_we0(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_s1_1_we0),
    .s1_1_d0(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_s1_1_d0),
    .grp_fu_303_p_din0(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_grp_fu_303_p_din0),
    .grp_fu_303_p_din1(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_grp_fu_303_p_din1),
    .grp_fu_303_p_opcode(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_grp_fu_303_p_opcode),
    .grp_fu_303_p_dout0(grp_fu_303_p2),
    .grp_fu_303_p_ce(grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_grp_fu_303_p_ce)
);

tracking_update_linear_cost_Pipeline_VITIS_LOOP_100_1 grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_start),
    .ap_done(grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_done),
    .ap_idle(grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_idle),
    .ap_ready(grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_ready),
    .s1_1_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_s1_1_address0),
    .s1_1_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_s1_1_ce0),
    .s1_1_q0(s1_1_q0),
    .q_1_address0(grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_q_1_address0),
    .q_1_ce0(grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_q_1_ce0),
    .q_1_we0(grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_q_1_we0),
    .q_1_d0(grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_q_1_d0)
);

tracking_faddfsub_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_2_full_dsp_1_U209(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_303_p0),
    .din1(grp_fu_303_p1),
    .opcode(grp_fu_303_opcode),
    .ce(grp_fu_303_ce),
    .dout(grp_fu_303_p2)
);

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U210(
    .din0(m1_1_q0),
    .din1(bitcast_ln116_1_reg_539),
    .dout(mul5_i_i_fu_310_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_4_fu_263_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            grp_update_linear_cost_4_fu_263_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_4_fu_263_ap_ready == 1'b1)) begin
            grp_update_linear_cost_4_fu_263_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_ready == 1'b1)) begin
            grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_ap_ready == 1'b1)) begin
            grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_ap_ready == 1'b1)) begin
            grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln215_fu_458_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
            grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_ap_ready == 1'b1)) begin
            grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_ap_ready == 1'b1)) begin
            grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln215_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
            grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_ap_ready == 1'b1)) begin
            grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln215_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
            grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_ap_ready == 1'b1)) begin
            grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_ap_ready == 1'b1)) begin
            grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_ap_start_reg <= 1'b1;
        end else if ((grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_ap_ready == 1'b1)) begin
            grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln167_fu_323_p2 == 1'd1))) begin
        i_11_fu_114 <= 4'd0;
    end else if (((icmp_ln160_fu_429_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_11_fu_114 <= add_ln159_reg_580;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln159_fu_400_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_12_fu_118 <= 4'd0;
    end else if (((icmp_ln215_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        i_12_fu_118 <= add_ln215_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_102 <= 4'd0;
    end else if (((icmp_ln168_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_fu_102 <= add_ln167_reg_517;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln159_fu_400_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        j_8_reg_193 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_8_reg_193 <= add_ln160_reg_600;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln167_fu_323_p2 == 1'd0))) begin
        j_reg_182 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_182 <= add_ln168_reg_547;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln159_reg_580 <= add_ln159_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln160_reg_600 <= add_ln160_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln167_reg_517 <= add_ln167_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln168_reg_547 <= add_ln168_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln167_fu_323_p2 == 1'd1))) begin
        bitcast_ln116_1_reg_539 <= bitcast_ln116_1_fu_357_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln215_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        empty_71_reg_623[6 : 2] <= empty_71_fu_494_p2[6 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul5_i_i_reg_615 <= mul5_i_i_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln167_fu_323_p2 == 1'd0))) begin
        tmp_reg_522[5 : 2] <= tmp_fu_335_p3[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln159_fu_400_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_s_reg_585[5 : 2] <= tmp_s_fu_412_p3[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln160_fu_429_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        zext_ln161_reg_605[5 : 0] <= zext_ln161_fu_446_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln168_fu_370_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln169_reg_552[5 : 0] <= zext_ln169_fu_387_p1[5 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        Xref_1_address0 = grp_update_linear_cost_4_fu_263_Xref_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        Xref_1_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_Xref_1_address0;
    end else begin
        Xref_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        Xref_1_address1 = grp_update_linear_cost_4_fu_263_Xref_1_address1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        Xref_1_address1 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_Xref_1_address1;
    end else begin
        Xref_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        Xref_1_ce0 = grp_update_linear_cost_4_fu_263_Xref_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        Xref_1_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_Xref_1_ce0;
    end else begin
        Xref_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        Xref_1_ce1 = grp_update_linear_cost_4_fu_263_Xref_1_ce1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        Xref_1_ce1 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_Xref_1_ce1;
    end else begin
        Xref_1_ce1 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state11_on_subcall_done)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_ap_done == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if ((grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_ap_done == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_ap_done == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_ap_done == 1'b0)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state20_on_subcall_done)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

assign ap_ST_fsm_state21_blk = 1'b0;

always @ (*) begin
    if ((grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_ap_done == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

assign ap_ST_fsm_state23_blk = 1'b0;

always @ (*) begin
    if ((grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_done == 1'b0)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        g_1_address0 = grp_update_linear_cost_4_fu_263_g_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        g_1_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_g_1_address0;
    end else begin
        g_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        g_1_ce0 = grp_update_linear_cost_4_fu_263_g_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        g_1_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_g_1_ce0;
    end else begin
        g_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        g_1_ce1 = grp_update_linear_cost_4_fu_263_g_1_ce1;
    end else begin
        g_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_303_ce = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_grp_fu_303_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_303_ce = grp_update_linear_cost_4_fu_263_grp_fu_303_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_303_ce = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_grp_fu_303_p_ce;
    end else begin
        grp_fu_303_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_303_opcode = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_grp_fu_303_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_303_opcode = grp_update_linear_cost_4_fu_263_grp_fu_303_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_303_opcode = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_grp_fu_303_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_303_opcode = 2'd1;
    end else begin
        grp_fu_303_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_303_p0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_grp_fu_303_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_303_p0 = grp_update_linear_cost_4_fu_263_grp_fu_303_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_303_p0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_grp_fu_303_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_303_p0 = znew_1_q0;
    end else begin
        grp_fu_303_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_303_p1 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_grp_fu_303_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_303_p1 = grp_update_linear_cost_4_fu_263_grp_fu_303_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_303_p1 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_grp_fu_303_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_303_p1 = y_1_q0;
    end else begin
        grp_fu_303_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        m1_1_address0 = zext_ln161_fu_446_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m1_1_address0 = zext_ln169_reg_552;
    end else begin
        m1_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        m1_1_ce0 = 1'b1;
    end else begin
        m1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m1_1_we0 = 1'b1;
    end else begin
        m1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        q_1_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_q_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        q_1_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_q_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        q_1_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        q_1_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_1_address0;
    end else begin
        q_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        q_1_address1 = grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_address1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        q_1_address1 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_1_address1;
    end else begin
        q_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        q_1_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_q_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        q_1_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_q_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        q_1_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        q_1_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_1_ce0;
    end else begin
        q_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        q_1_ce1 = grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_ce1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        q_1_ce1 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_1_ce1;
    end else begin
        q_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        q_1_d0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_q_1_d0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        q_1_d0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_d0;
    end else begin
        q_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        q_1_we0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_q_1_we0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        q_1_we0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_we0;
    end else begin
        q_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        q_1_we1 = grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_we1;
    end else begin
        q_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        q_col_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_col_address0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        q_col_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_q_col_address0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        q_col_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_address0;
    end else begin
        q_col_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        q_col_address1 = grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_col_address1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        q_col_address1 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_address1;
    end else begin
        q_col_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        q_col_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_col_ce0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        q_col_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_q_col_ce0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        q_col_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_ce0;
    end else begin
        q_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        q_col_ce1 = grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_col_ce1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        q_col_ce1 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_ce1;
    end else begin
        q_col_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        q_col_d0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_q_col_d0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        q_col_d0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_d0;
    end else begin
        q_col_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        q_col_we0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_q_col_we0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        q_col_we0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_we0;
    end else begin
        q_col_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        q_col_we1 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_q_col_we1;
    end else begin
        q_col_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        r_1_ce0 = 1'b1;
    end else begin
        r_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        r_1_we0 = 1'b1;
    end else begin
        r_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        s1_1_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_s1_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        s1_1_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_s1_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        s1_1_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_s1_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        s1_1_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_s1_1_address0;
    end else begin
        s1_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        s1_1_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_s1_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        s1_1_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_s1_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        s1_1_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_s1_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        s1_1_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_s1_1_ce0;
    end else begin
        s1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        s1_1_d0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_s1_1_d0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        s1_1_d0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_s1_1_d0;
    end else begin
        s1_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        s1_1_we0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_s1_1_we0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        s1_1_we0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_s1_1_we0;
    end else begin
        s1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        s2_1_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_s2_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        s2_1_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_s2_1_address0;
    end else begin
        s2_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        s2_1_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_s2_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        s2_1_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_s2_1_ce0;
    end else begin
        s2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        s2_1_we0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_s2_1_we0;
    end else begin
        s2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tiny_x1_address0 = grp_update_linear_cost_4_fu_263_tiny_x1_address0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        tiny_x1_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_tiny_x1_address0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        tiny_x1_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_tiny_x1_address0;
    end else begin
        tiny_x1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tiny_x1_ce0 = grp_update_linear_cost_4_fu_263_tiny_x1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        tiny_x1_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_tiny_x1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        tiny_x1_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_tiny_x1_ce0;
    end else begin
        tiny_x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tiny_x1_d0 = grp_update_linear_cost_4_fu_263_tiny_x1_d0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        tiny_x1_d0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_tiny_x1_d0;
    end else begin
        tiny_x1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tiny_x1_we0 = grp_update_linear_cost_4_fu_263_tiny_x1_we0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        tiny_x1_we0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_tiny_x1_we0;
    end else begin
        tiny_x1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        vnew_1_address0 = grp_update_linear_cost_4_fu_263_vnew_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        vnew_1_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_vnew_1_address0;
    end else begin
        vnew_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        vnew_1_ce0 = grp_update_linear_cost_4_fu_263_vnew_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        vnew_1_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_vnew_1_ce0;
    end else begin
        vnew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        vnew_1_ce1 = grp_update_linear_cost_4_fu_263_vnew_1_ce1;
    end else begin
        vnew_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        xref_col_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_xref_col_address0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        xref_col_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_address0;
    end else begin
        xref_col_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        xref_col_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_xref_col_ce0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        xref_col_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_ce0;
    end else begin
        xref_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        xref_col_ce1 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_ce1;
    end else begin
        xref_col_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        xref_col_we0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_we0;
    end else begin
        xref_col_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        xref_col_we1 = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_xref_col_we1;
    end else begin
        xref_col_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_1_ce0 = 1'b1;
    end else begin
        y_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        znew_1_ce0 = 1'b1;
    end else begin
        znew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln167_fu_323_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln168_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln159_fu_400_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln160_fu_429_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln215_fu_458_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b0 == ap_block_state20_on_subcall_done) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign PinfT_1_address0 = grp_update_linear_cost_4_fu_263_PinfT_1_address0;

assign PinfT_1_address1 = grp_update_linear_cost_4_fu_263_PinfT_1_address1;

assign PinfT_1_ce0 = grp_update_linear_cost_4_fu_263_PinfT_1_ce0;

assign PinfT_1_ce1 = grp_update_linear_cost_4_fu_263_PinfT_1_ce1;

assign add_ln159_fu_406_p2 = (i_11_fu_114 + 4'd1);

assign add_ln160_fu_435_p2 = (j_8_reg_193 + 3'd1);

assign add_ln161_fu_441_p2 = (zext_ln160_fu_425_p1 + tmp_s_reg_585);

assign add_ln167_fu_329_p2 = (i_fu_102 + 4'd1);

assign add_ln168_fu_376_p2 = (j_reg_182 + 3'd1);

assign add_ln169_fu_382_p2 = (zext_ln168_fu_366_p1 + tmp_reg_522);

assign add_ln215_fu_464_p2 = (i_12_fu_118 + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state11_on_subcall_done = ((grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_ap_done == 1'b0) | (grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state20_on_subcall_done = ((grp_update_linear_cost_4_fu_263_ap_done == 1'b0) | (grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_ap_done == 1'b0));
end

assign bitcast_ln116_1_fu_357_p1 = xor_ln116_fu_351_p2;

assign bitcast_ln116_fu_347_p1 = tiny_rho;

assign empty_70_fu_470_p1 = i_12_fu_118[2:0];

assign empty_71_fu_494_p2 = (p_shl_fu_474_p3 - p_shl1_cast_fu_490_p1);

assign g_1_address1 = grp_update_linear_cost_4_fu_263_g_1_address1;

assign grp_update_linear_cost_4_fu_263_ap_start = grp_update_linear_cost_4_fu_263_ap_start_reg;

assign grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_start = grp_update_linear_cost_Pipeline_VITIS_LOOP_100_1_fu_295_ap_start_reg;

assign grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_ap_start = grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_ap_start_reg;

assign grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_ap_start = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_28_fu_285_ap_start_reg;

assign grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_ap_start = grp_update_linear_cost_Pipeline_VITIS_LOOP_167_1_VITIS_LOOP_168_2_fu_220_ap_start_reg;

assign grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_ap_start = grp_update_linear_cost_Pipeline_VITIS_LOOP_72_2_fu_239_ap_start_reg;

assign grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_ap_start = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_17_fu_212_ap_start_reg;

assign grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_ap_start = grp_update_linear_cost_Pipeline_VITIS_LOOP_86_1_fu_204_ap_start_reg;

assign grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_ap_start = grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_ap_start_reg;

assign grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_ap_start = grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_ap_start_reg;

assign icmp_ln159_fu_400_p2 = ((i_11_fu_114 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln160_fu_429_p2 = ((j_8_reg_193 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln167_fu_323_p2 = ((i_fu_102 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln168_fu_370_p2 = ((j_reg_182 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln215_fu_458_p2 = ((i_12_fu_118 == 4'd10) ? 1'b1 : 1'b0);

assign m1_1_d0 = grp_fu_303_p2;

assign p_1_address0 = grp_update_linear_cost_4_fu_263_p_1_address0;

assign p_1_address1 = grp_update_linear_cost_4_fu_263_p_1_address1;

assign p_1_ce0 = grp_update_linear_cost_4_fu_263_p_1_ce0;

assign p_1_ce1 = grp_update_linear_cost_4_fu_263_p_1_ce1;

assign p_1_d0 = grp_update_linear_cost_4_fu_263_p_1_d0;

assign p_1_d1 = grp_update_linear_cost_4_fu_263_p_1_d1;

assign p_1_we0 = grp_update_linear_cost_4_fu_263_p_1_we0;

assign p_1_we1 = grp_update_linear_cost_4_fu_263_p_1_we1;

assign p_shl1_cast_fu_490_p1 = p_shl1_fu_482_p3;

assign p_shl1_fu_482_p3 = {{i_12_fu_118}, {2'd0}};

assign p_shl_fu_474_p3 = {{empty_70_fu_470_p1}, {4'd0}};

assign q_1_d1 = grp_update_linear_cost_Pipeline_VITIS_LOOP_93_1_fu_246_q_1_d1;

assign r_1_address0 = zext_ln161_reg_605;

assign r_1_d0 = mul5_i_i_reg_615;

assign s2_1_d0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_159_1_VITIS_LOOP_160_2_fu_254_s2_1_d0;

assign tiny_Q_address0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_tiny_Q_address0;

assign tiny_Q_ce0 = grp_update_linear_cost_Pipeline_VITIS_LOOP_99_2_fu_230_tiny_Q_ce0;

assign tiny_x2_address0 = grp_update_linear_cost_4_fu_263_tiny_x2_address0;

assign tiny_x2_ce0 = grp_update_linear_cost_4_fu_263_tiny_x2_ce0;

assign tiny_x2_d0 = grp_update_linear_cost_4_fu_263_tiny_x2_d0;

assign tiny_x2_we0 = grp_update_linear_cost_4_fu_263_tiny_x2_we0;

assign tiny_x3_address0 = grp_update_linear_cost_4_fu_263_tiny_x3_address0;

assign tiny_x3_ce0 = grp_update_linear_cost_4_fu_263_tiny_x3_ce0;

assign tiny_x3_d0 = grp_update_linear_cost_4_fu_263_tiny_x3_d0;

assign tiny_x3_we0 = grp_update_linear_cost_4_fu_263_tiny_x3_we0;

assign tmp_fu_335_p3 = {{i_fu_102}, {2'd0}};

assign tmp_s_fu_412_p3 = {{i_11_fu_114}, {2'd0}};

assign vnew_1_address1 = grp_update_linear_cost_4_fu_263_vnew_1_address1;

assign xor_ln116_fu_351_p2 = (bitcast_ln116_fu_347_p1 ^ 32'd2147483648);

assign y_1_address0 = zext_ln169_fu_387_p1;

assign zext_ln160_fu_425_p1 = j_8_reg_193;

assign zext_ln161_fu_446_p1 = add_ln161_fu_441_p2;

assign zext_ln168_fu_366_p1 = j_reg_182;

assign zext_ln169_fu_387_p1 = add_ln169_fu_382_p2;

assign znew_1_address0 = zext_ln169_fu_387_p1;

always @ (posedge ap_clk) begin
    tmp_reg_522[1:0] <= 2'b00;
    zext_ln169_reg_552[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_s_reg_585[1:0] <= 2'b00;
    zext_ln161_reg_605[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    empty_71_reg_623[1:0] <= 2'b00;
end

endmodule //tracking_update_linear_cost
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_max_1_address0,
        x_max_1_ce0,
        x_max_1_q0,
        s1_1_address0,
        s1_1_ce0,
        s1_1_q0,
        vnew_1_address0,
        vnew_1_ce0,
        vnew_1_we0,
        vnew_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] x_max_1_address0;
output   x_max_1_ce0;
input  [31:0] x_max_1_q0;
output  [6:0] s1_1_address0;
output   s1_1_ce0;
input  [31:0] s1_1_q0;
output  [6:0] vnew_1_address0;
output   vnew_1_ce0;
output   vnew_1_we0;
output  [31:0] vnew_1_d0;

reg ap_idle;
reg x_max_1_ce0;
reg s1_1_ce0;
reg vnew_1_ce0;
reg vnew_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln89_fu_164_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln91_fu_255_p1;
reg   [63:0] zext_ln91_reg_399;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_56;
wire   [3:0] add_ln90_fu_261_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_60;
wire   [3:0] select_ln89_2_fu_237_p3;
reg   [3:0] ap_sig_allocacmp_i_1;
reg   [6:0] indvar_flatten19_fu_64;
wire   [6:0] add_ln89_fu_170_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten19_load;
wire   [2:0] empty_fu_134_p1;
wire   [5:0] p_shl5_fu_146_p3;
wire   [6:0] p_shl4_fu_138_p3;
wire   [6:0] p_shl5_cast_fu_154_p1;
wire   [0:0] icmp_ln90_fu_185_p2;
wire   [3:0] add_ln89_1_fu_179_p2;
wire   [2:0] empty_41_fu_199_p1;
wire   [5:0] p_shl5_mid1_fu_211_p3;
wire   [6:0] p_shl4_mid1_fu_203_p3;
wire   [6:0] p_shl5_cast_mid1_fu_219_p1;
wire   [6:0] p_mid117_fu_223_p2;
wire   [6:0] empty_39_fu_158_p2;
wire   [3:0] select_ln89_fu_191_p3;
wire   [6:0] j_5_cast_fu_245_p1;
wire   [6:0] select_ln89_1_fu_229_p3;
wire   [6:0] add_ln91_fu_249_p2;
wire   [31:0] bitcast_ln91_fu_282_p1;
wire   [31:0] bitcast_ln91_1_fu_300_p1;
wire   [7:0] tmp_9_fu_286_p4;
wire   [22:0] trunc_ln91_fu_296_p1;
wire   [0:0] icmp_ln91_1_fu_324_p2;
wire   [0:0] icmp_ln91_fu_318_p2;
wire   [7:0] tmp_s_fu_304_p4;
wire   [22:0] trunc_ln91_1_fu_314_p1;
wire   [0:0] icmp_ln91_3_fu_342_p2;
wire   [0:0] icmp_ln91_2_fu_336_p2;
wire   [0:0] or_ln91_fu_330_p2;
wire   [0:0] or_ln91_1_fu_348_p2;
wire   [0:0] and_ln91_fu_354_p2;
wire   [0:0] tmp_1_fu_107_p2;
wire   [0:0] and_ln91_1_fu_360_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U89(
    .din0(x_max_1_q0),
    .din1(s1_1_q0),
    .opcode(5'd4),
    .dout(tmp_1_fu_107_p2)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln89_fu_164_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_60 <= select_ln89_2_fu_237_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln89_fu_164_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten19_fu_64 <= add_ln89_fu_170_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten19_fu_64 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln89_fu_164_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_56 <= add_ln90_fu_261_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_56 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_fu_164_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln91_reg_399[6 : 0] <= zext_ln91_fu_255_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln89_fu_164_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_60;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten19_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten19_load = indvar_flatten19_fu_64;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s1_1_ce0 = 1'b1;
    end else begin
        s1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vnew_1_ce0 = 1'b1;
    end else begin
        vnew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vnew_1_we0 = 1'b1;
    end else begin
        vnew_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_max_1_ce0 = 1'b1;
    end else begin
        x_max_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln89_1_fu_179_p2 = (ap_sig_allocacmp_i_1 + 4'd1);

assign add_ln89_fu_170_p2 = (ap_sig_allocacmp_indvar_flatten19_load + 7'd1);

assign add_ln90_fu_261_p2 = (select_ln89_fu_191_p3 + 4'd1);

assign add_ln91_fu_249_p2 = (j_5_cast_fu_245_p1 + select_ln89_1_fu_229_p3);

assign and_ln91_1_fu_360_p2 = (tmp_1_fu_107_p2 & and_ln91_fu_354_p2);

assign and_ln91_fu_354_p2 = (or_ln91_fu_330_p2 & or_ln91_1_fu_348_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln91_1_fu_300_p1 = s1_1_q0;

assign bitcast_ln91_fu_282_p1 = x_max_1_q0;

assign empty_39_fu_158_p2 = (p_shl4_fu_138_p3 - p_shl5_cast_fu_154_p1);

assign empty_41_fu_199_p1 = add_ln89_1_fu_179_p2[2:0];

assign empty_fu_134_p1 = ap_sig_allocacmp_i_1[2:0];

assign icmp_ln89_fu_164_p2 = ((ap_sig_allocacmp_indvar_flatten19_load == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_185_p2 = ((ap_sig_allocacmp_j_load == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln91_1_fu_324_p2 = ((trunc_ln91_fu_296_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln91_2_fu_336_p2 = ((tmp_s_fu_304_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln91_3_fu_342_p2 = ((trunc_ln91_1_fu_314_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_318_p2 = ((tmp_9_fu_286_p4 != 8'd255) ? 1'b1 : 1'b0);

assign j_5_cast_fu_245_p1 = select_ln89_fu_191_p3;

assign or_ln91_1_fu_348_p2 = (icmp_ln91_3_fu_342_p2 | icmp_ln91_2_fu_336_p2);

assign or_ln91_fu_330_p2 = (icmp_ln91_fu_318_p2 | icmp_ln91_1_fu_324_p2);

assign p_mid117_fu_223_p2 = (p_shl4_mid1_fu_203_p3 - p_shl5_cast_mid1_fu_219_p1);

assign p_shl4_fu_138_p3 = {{empty_fu_134_p1}, {4'd0}};

assign p_shl4_mid1_fu_203_p3 = {{empty_41_fu_199_p1}, {4'd0}};

assign p_shl5_cast_fu_154_p1 = p_shl5_fu_146_p3;

assign p_shl5_cast_mid1_fu_219_p1 = p_shl5_mid1_fu_211_p3;

assign p_shl5_fu_146_p3 = {{ap_sig_allocacmp_i_1}, {2'd0}};

assign p_shl5_mid1_fu_211_p3 = {{add_ln89_1_fu_179_p2}, {2'd0}};

assign s1_1_address0 = zext_ln91_fu_255_p1;

assign select_ln89_1_fu_229_p3 = ((icmp_ln90_fu_185_p2[0:0] == 1'b1) ? p_mid117_fu_223_p2 : empty_39_fu_158_p2);

assign select_ln89_2_fu_237_p3 = ((icmp_ln90_fu_185_p2[0:0] == 1'b1) ? add_ln89_1_fu_179_p2 : ap_sig_allocacmp_i_1);

assign select_ln89_fu_191_p3 = ((icmp_ln90_fu_185_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign tmp_9_fu_286_p4 = {{bitcast_ln91_fu_282_p1[30:23]}};

assign tmp_s_fu_304_p4 = {{bitcast_ln91_1_fu_300_p1[30:23]}};

assign trunc_ln91_1_fu_314_p1 = bitcast_ln91_1_fu_300_p1[22:0];

assign trunc_ln91_fu_296_p1 = bitcast_ln91_fu_282_p1[22:0];

assign vnew_1_address0 = zext_ln91_reg_399;

assign vnew_1_d0 = ((and_ln91_1_fu_360_p2[0:0] == 1'b1) ? x_max_1_q0 : s1_1_q0);

assign x_max_1_address0 = zext_ln91_fu_255_p1;

assign zext_ln91_fu_255_p1 = add_ln91_fu_249_p2;

always @ (posedge ap_clk) begin
    zext_ln91_reg_399[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_min_1_address0,
        x_min_1_ce0,
        x_min_1_q0,
        vnew_1_address0,
        vnew_1_ce0,
        vnew_1_q0,
        s1_1_address0,
        s1_1_ce0,
        s1_1_we0,
        s1_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] x_min_1_address0;
output   x_min_1_ce0;
input  [31:0] x_min_1_q0;
output  [6:0] vnew_1_address0;
output   vnew_1_ce0;
input  [31:0] vnew_1_q0;
output  [6:0] s1_1_address0;
output   s1_1_ce0;
output   s1_1_we0;
output  [31:0] s1_1_d0;

reg ap_idle;
reg x_min_1_ce0;
reg vnew_1_ce0;
reg s1_1_ce0;
reg s1_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln107_fu_164_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln109_fu_255_p1;
reg   [63:0] zext_ln109_reg_399;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_56;
wire   [3:0] add_ln108_fu_261_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_60;
wire   [3:0] select_ln107_2_fu_237_p3;
reg   [3:0] ap_sig_allocacmp_i_3;
reg   [6:0] indvar_flatten9_fu_64;
wire   [6:0] add_ln107_fu_170_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten9_load;
wire   [2:0] empty_fu_134_p1;
wire   [5:0] p_shl3_fu_146_p3;
wire   [6:0] p_shl2_fu_138_p3;
wire   [6:0] p_shl3_cast_fu_154_p1;
wire   [0:0] icmp_ln108_fu_185_p2;
wire   [3:0] add_ln107_1_fu_179_p2;
wire   [2:0] empty_47_fu_199_p1;
wire   [5:0] p_shl3_mid1_fu_211_p3;
wire   [6:0] p_shl2_mid1_fu_203_p3;
wire   [6:0] p_shl3_cast_mid1_fu_219_p1;
wire   [6:0] p_mid17_fu_223_p2;
wire   [6:0] empty_45_fu_158_p2;
wire   [3:0] select_ln107_fu_191_p3;
wire   [6:0] j_4_cast_fu_245_p1;
wire   [6:0] select_ln107_1_fu_229_p3;
wire   [6:0] add_ln109_fu_249_p2;
wire   [31:0] bitcast_ln109_fu_282_p1;
wire   [31:0] bitcast_ln109_1_fu_300_p1;
wire   [7:0] tmp_6_fu_286_p4;
wire   [22:0] trunc_ln109_fu_296_p1;
wire   [0:0] icmp_ln109_1_fu_324_p2;
wire   [0:0] icmp_ln109_fu_318_p2;
wire   [7:0] tmp_7_fu_304_p4;
wire   [22:0] trunc_ln109_1_fu_314_p1;
wire   [0:0] icmp_ln109_3_fu_342_p2;
wire   [0:0] icmp_ln109_2_fu_336_p2;
wire   [0:0] or_ln109_fu_330_p2;
wire   [0:0] or_ln109_1_fu_348_p2;
wire   [0:0] and_ln109_fu_354_p2;
wire   [0:0] tmp_8_fu_107_p2;
wire   [0:0] and_ln109_1_fu_360_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U84(
    .din0(x_min_1_q0),
    .din1(vnew_1_q0),
    .opcode(5'd2),
    .dout(tmp_8_fu_107_p2)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln107_fu_164_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_60 <= select_ln107_2_fu_237_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln107_fu_164_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten9_fu_64 <= add_ln107_fu_170_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten9_fu_64 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln107_fu_164_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_56 <= add_ln108_fu_261_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_56 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln107_fu_164_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln109_reg_399[6 : 0] <= zext_ln109_fu_255_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln107_fu_164_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_3 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_60;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten9_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten9_load = indvar_flatten9_fu_64;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s1_1_ce0 = 1'b1;
    end else begin
        s1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s1_1_we0 = 1'b1;
    end else begin
        s1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vnew_1_ce0 = 1'b1;
    end else begin
        vnew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_min_1_ce0 = 1'b1;
    end else begin
        x_min_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln107_1_fu_179_p2 = (ap_sig_allocacmp_i_3 + 4'd1);

assign add_ln107_fu_170_p2 = (ap_sig_allocacmp_indvar_flatten9_load + 7'd1);

assign add_ln108_fu_261_p2 = (select_ln107_fu_191_p3 + 4'd1);

assign add_ln109_fu_249_p2 = (j_4_cast_fu_245_p1 + select_ln107_1_fu_229_p3);

assign and_ln109_1_fu_360_p2 = (tmp_8_fu_107_p2 & and_ln109_fu_354_p2);

assign and_ln109_fu_354_p2 = (or_ln109_fu_330_p2 & or_ln109_1_fu_348_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln109_1_fu_300_p1 = vnew_1_q0;

assign bitcast_ln109_fu_282_p1 = x_min_1_q0;

assign empty_45_fu_158_p2 = (p_shl2_fu_138_p3 - p_shl3_cast_fu_154_p1);

assign empty_47_fu_199_p1 = add_ln107_1_fu_179_p2[2:0];

assign empty_fu_134_p1 = ap_sig_allocacmp_i_3[2:0];

assign icmp_ln107_fu_164_p2 = ((ap_sig_allocacmp_indvar_flatten9_load == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_185_p2 = ((ap_sig_allocacmp_j_load == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln109_1_fu_324_p2 = ((trunc_ln109_fu_296_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln109_2_fu_336_p2 = ((tmp_7_fu_304_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln109_3_fu_342_p2 = ((trunc_ln109_1_fu_314_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_318_p2 = ((tmp_6_fu_286_p4 != 8'd255) ? 1'b1 : 1'b0);

assign j_4_cast_fu_245_p1 = select_ln107_fu_191_p3;

assign or_ln109_1_fu_348_p2 = (icmp_ln109_3_fu_342_p2 | icmp_ln109_2_fu_336_p2);

assign or_ln109_fu_330_p2 = (icmp_ln109_fu_318_p2 | icmp_ln109_1_fu_324_p2);

assign p_mid17_fu_223_p2 = (p_shl2_mid1_fu_203_p3 - p_shl3_cast_mid1_fu_219_p1);

assign p_shl2_fu_138_p3 = {{empty_fu_134_p1}, {4'd0}};

assign p_shl2_mid1_fu_203_p3 = {{empty_47_fu_199_p1}, {4'd0}};

assign p_shl3_cast_fu_154_p1 = p_shl3_fu_146_p3;

assign p_shl3_cast_mid1_fu_219_p1 = p_shl3_mid1_fu_211_p3;

assign p_shl3_fu_146_p3 = {{ap_sig_allocacmp_i_3}, {2'd0}};

assign p_shl3_mid1_fu_211_p3 = {{add_ln107_1_fu_179_p2}, {2'd0}};

assign s1_1_address0 = zext_ln109_reg_399;

assign s1_1_d0 = ((and_ln109_1_fu_360_p2[0:0] == 1'b1) ? x_min_1_q0 : vnew_1_q0);

assign select_ln107_1_fu_229_p3 = ((icmp_ln108_fu_185_p2[0:0] == 1'b1) ? p_mid17_fu_223_p2 : empty_45_fu_158_p2);

assign select_ln107_2_fu_237_p3 = ((icmp_ln108_fu_185_p2[0:0] == 1'b1) ? add_ln107_1_fu_179_p2 : ap_sig_allocacmp_i_3);

assign select_ln107_fu_191_p3 = ((icmp_ln108_fu_185_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign tmp_6_fu_286_p4 = {{bitcast_ln109_fu_282_p1[30:23]}};

assign tmp_7_fu_304_p4 = {{bitcast_ln109_1_fu_300_p1[30:23]}};

assign trunc_ln109_1_fu_314_p1 = bitcast_ln109_1_fu_300_p1[22:0];

assign trunc_ln109_fu_296_p1 = bitcast_ln109_fu_282_p1[22:0];

assign vnew_1_address0 = zext_ln109_fu_255_p1;

assign x_min_1_address0 = zext_ln109_fu_255_p1;

assign zext_ln109_fu_255_p1 = add_ln109_fu_249_p2;

always @ (posedge ap_clk) begin
    zext_ln109_reg_399[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_address0,
        x_1_ce0,
        x_1_q0,
        g_1_address0,
        g_1_ce0,
        g_1_q0,
        vnew_1_address0,
        vnew_1_ce0,
        vnew_1_we0,
        vnew_1_d0,
        grp_fu_261_p_din0,
        grp_fu_261_p_din1,
        grp_fu_261_p_opcode,
        grp_fu_261_p_dout0,
        grp_fu_261_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] x_1_address0;
output   x_1_ce0;
input  [31:0] x_1_q0;
output  [6:0] g_1_address0;
output   g_1_ce0;
input  [31:0] g_1_q0;
output  [6:0] vnew_1_address0;
output   vnew_1_ce0;
output   vnew_1_we0;
output  [31:0] vnew_1_d0;
output  [31:0] grp_fu_261_p_din0;
output  [31:0] grp_fu_261_p_din1;
output  [1:0] grp_fu_261_p_opcode;
input  [31:0] grp_fu_261_p_dout0;
output   grp_fu_261_p_ce;

reg ap_idle;
reg x_1_ce0;
reg g_1_ce0;
reg vnew_1_ce0;
reg vnew_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln176_fu_155_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln178_fu_246_p1;
reg   [63:0] zext_ln178_reg_298;
reg   [63:0] zext_ln178_reg_298_pp0_iter1_reg;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_46;
wire   [3:0] add_ln177_fu_252_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_50;
wire   [3:0] select_ln176_2_fu_228_p3;
reg   [3:0] ap_sig_allocacmp_i_2;
reg   [6:0] indvar_flatten_fu_54;
wire   [6:0] add_ln176_fu_161_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [2:0] empty_fu_125_p1;
wire   [5:0] p_shl1_fu_137_p3;
wire   [6:0] p_shl_fu_129_p3;
wire   [6:0] p_shl1_cast_fu_145_p1;
wire   [0:0] icmp_ln177_fu_176_p2;
wire   [3:0] add_ln176_1_fu_170_p2;
wire   [2:0] empty_44_fu_190_p1;
wire   [5:0] p_shl1_mid1_fu_202_p3;
wire   [6:0] p_shl_mid1_fu_194_p3;
wire   [6:0] p_shl1_cast_mid1_fu_210_p1;
wire   [6:0] p_mid1_fu_214_p2;
wire   [6:0] empty_42_fu_149_p2;
wire   [3:0] select_ln176_fu_182_p3;
wire   [6:0] j_3_cast_fu_236_p1;
wire   [6:0] select_ln176_1_fu_220_p3;
wire   [6:0] add_ln178_fu_240_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage0_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln176_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_50 <= select_ln176_2_fu_228_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln176_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_54 <= add_ln176_fu_161_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_54 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln176_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_46 <= add_ln177_fu_252_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_46 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        zext_ln178_reg_298_pp0_iter1_reg[6 : 0] <= zext_ln178_reg_298[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln176_fu_155_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln178_reg_298[6 : 0] <= zext_ln178_fu_246_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln176_fu_155_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_50;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_54;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        g_1_ce0 = 1'b1;
    end else begin
        g_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        vnew_1_ce0 = 1'b1;
    end else begin
        vnew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        vnew_1_we0 = 1'b1;
    end else begin
        vnew_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_1_ce0 = 1'b1;
    end else begin
        x_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln176_1_fu_170_p2 = (ap_sig_allocacmp_i_2 + 4'd1);

assign add_ln176_fu_161_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln177_fu_252_p2 = (select_ln176_fu_182_p3 + 4'd1);

assign add_ln178_fu_240_p2 = (j_3_cast_fu_236_p1 + select_ln176_1_fu_220_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_42_fu_149_p2 = (p_shl_fu_129_p3 - p_shl1_cast_fu_145_p1);

assign empty_44_fu_190_p1 = add_ln176_1_fu_170_p2[2:0];

assign empty_fu_125_p1 = ap_sig_allocacmp_i_2[2:0];

assign g_1_address0 = zext_ln178_fu_246_p1;

assign grp_fu_261_p_ce = 1'b1;

assign grp_fu_261_p_din0 = x_1_q0;

assign grp_fu_261_p_din1 = g_1_q0;

assign grp_fu_261_p_opcode = 2'd0;

assign icmp_ln176_fu_155_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln177_fu_176_p2 = ((ap_sig_allocacmp_j_load == 4'd12) ? 1'b1 : 1'b0);

assign j_3_cast_fu_236_p1 = select_ln176_fu_182_p3;

assign p_mid1_fu_214_p2 = (p_shl_mid1_fu_194_p3 - p_shl1_cast_mid1_fu_210_p1);

assign p_shl1_cast_fu_145_p1 = p_shl1_fu_137_p3;

assign p_shl1_cast_mid1_fu_210_p1 = p_shl1_mid1_fu_202_p3;

assign p_shl1_fu_137_p3 = {{ap_sig_allocacmp_i_2}, {2'd0}};

assign p_shl1_mid1_fu_202_p3 = {{add_ln176_1_fu_170_p2}, {2'd0}};

assign p_shl_fu_129_p3 = {{empty_fu_125_p1}, {4'd0}};

assign p_shl_mid1_fu_194_p3 = {{empty_44_fu_190_p1}, {4'd0}};

assign select_ln176_1_fu_220_p3 = ((icmp_ln177_fu_176_p2[0:0] == 1'b1) ? p_mid1_fu_214_p2 : empty_42_fu_149_p2);

assign select_ln176_2_fu_228_p3 = ((icmp_ln177_fu_176_p2[0:0] == 1'b1) ? add_ln176_1_fu_170_p2 : ap_sig_allocacmp_i_2);

assign select_ln176_fu_182_p3 = ((icmp_ln177_fu_176_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign vnew_1_address0 = zext_ln178_reg_298_pp0_iter1_reg;

assign vnew_1_d0 = grp_fu_261_p_dout0;

assign x_1_address0 = zext_ln178_fu_246_p1;

assign zext_ln178_fu_246_p1 = add_ln178_fu_240_p2;

always @ (posedge ap_clk) begin
    zext_ln178_reg_298[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln178_reg_298_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_update_slack (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        u_1_address0,
        u_1_ce0,
        u_1_q0,
        y_1_address0,
        y_1_ce0,
        y_1_q0,
        znew_1_address0,
        znew_1_ce0,
        znew_1_we0,
        znew_1_d0,
        znew_1_q0,
        tiny_en_input_bound,
        u_min_1_address0,
        u_min_1_ce0,
        u_min_1_q0,
        m1_1_address0,
        m1_1_ce0,
        m1_1_we0,
        m1_1_d0,
        m1_1_q0,
        u_max_1_address0,
        u_max_1_ce0,
        u_max_1_q0,
        x_1_address0,
        x_1_ce0,
        x_1_q0,
        g_1_address0,
        g_1_ce0,
        g_1_q0,
        vnew_1_address0,
        vnew_1_ce0,
        vnew_1_we0,
        vnew_1_d0,
        vnew_1_q0,
        tiny_en_state_bound,
        x_min_1_address0,
        x_min_1_ce0,
        x_min_1_q0,
        s1_1_address0,
        s1_1_ce0,
        s1_1_we0,
        s1_1_d0,
        s1_1_q0,
        x_max_1_address0,
        x_max_1_ce0,
        x_max_1_q0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] u_1_address0;
output   u_1_ce0;
input  [31:0] u_1_q0;
output  [5:0] y_1_address0;
output   y_1_ce0;
input  [31:0] y_1_q0;
output  [5:0] znew_1_address0;
output   znew_1_ce0;
output   znew_1_we0;
output  [31:0] znew_1_d0;
input  [31:0] znew_1_q0;
input  [0:0] tiny_en_input_bound;
output  [5:0] u_min_1_address0;
output   u_min_1_ce0;
input  [31:0] u_min_1_q0;
output  [5:0] m1_1_address0;
output   m1_1_ce0;
output   m1_1_we0;
output  [31:0] m1_1_d0;
input  [31:0] m1_1_q0;
output  [5:0] u_max_1_address0;
output   u_max_1_ce0;
input  [31:0] u_max_1_q0;
output  [6:0] x_1_address0;
output   x_1_ce0;
input  [31:0] x_1_q0;
output  [6:0] g_1_address0;
output   g_1_ce0;
input  [31:0] g_1_q0;
output  [6:0] vnew_1_address0;
output   vnew_1_ce0;
output   vnew_1_we0;
output  [31:0] vnew_1_d0;
input  [31:0] vnew_1_q0;
input  [0:0] tiny_en_state_bound;
output  [6:0] x_min_1_address0;
output   x_min_1_ce0;
input  [31:0] x_min_1_q0;
output  [6:0] s1_1_address0;
output   s1_1_ce0;
output   s1_1_we0;
output  [31:0] s1_1_d0;
input  [31:0] s1_1_q0;
output  [6:0] x_max_1_address0;
output   x_max_1_ce0;
input  [31:0] x_max_1_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg u_1_ce0;
reg y_1_ce0;
reg[5:0] znew_1_address0;
reg znew_1_ce0;
reg znew_1_we0;
reg[31:0] znew_1_d0;
reg u_min_1_ce0;
reg[5:0] m1_1_address0;
reg m1_1_ce0;
reg m1_1_we0;
reg u_max_1_ce0;
reg[6:0] vnew_1_address0;
reg vnew_1_ce0;
reg vnew_1_we0;
reg[31:0] vnew_1_d0;
reg[6:0] s1_1_address0;
reg s1_1_ce0;
reg s1_1_we0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] add_ln176_fu_290_p2;
reg   [3:0] add_ln176_reg_657;
wire    ap_CS_fsm_state2;
wire   [5:0] tmp_s_fu_296_p3;
reg   [5:0] tmp_s_reg_662;
wire   [0:0] icmp_ln176_fu_284_p2;
wire   [0:0] tiny_en_input_bound_load_load_fu_304_p1;
wire   [2:0] add_ln177_fu_323_p2;
reg   [2:0] add_ln177_reg_681;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln178_fu_334_p1;
reg   [63:0] zext_ln178_reg_686;
wire   [0:0] icmp_ln177_fu_317_p2;
wire    ap_CS_fsm_state4;
wire   [3:0] add_ln107_fu_353_p2;
reg   [3:0] add_ln107_reg_714;
wire    ap_CS_fsm_state6;
wire   [5:0] tmp_6_fu_359_p3;
reg   [5:0] tmp_6_reg_719;
wire   [0:0] icmp_ln107_fu_347_p2;
wire   [2:0] add_ln108_fu_382_p2;
reg   [2:0] add_ln108_reg_734;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln109_fu_393_p1;
reg   [63:0] zext_ln109_reg_739;
wire   [0:0] icmp_ln108_fu_376_p2;
wire   [3:0] add_ln89_fu_505_p2;
reg   [3:0] add_ln89_reg_757;
wire    ap_CS_fsm_state9;
wire   [5:0] tmp_7_fu_511_p3;
reg   [5:0] tmp_7_reg_762;
wire   [0:0] icmp_ln89_fu_499_p2;
wire   [2:0] add_ln90_fu_529_p2;
reg   [2:0] add_ln90_reg_770;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln91_fu_540_p1;
reg   [63:0] zext_ln91_reg_775;
wire   [0:0] icmp_ln90_fu_523_p2;
wire   [0:0] tiny_en_state_bound_load_load_fu_643_p1;
wire    ap_CS_fsm_state12;
wire    grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_start;
wire    grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_done;
wire    grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_idle;
wire    grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_ready;
wire   [6:0] grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_x_1_address0;
wire    grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_x_1_ce0;
wire   [6:0] grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_g_1_address0;
wire    grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_g_1_ce0;
wire   [6:0] grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_vnew_1_address0;
wire    grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_vnew_1_ce0;
wire    grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_vnew_1_we0;
wire   [31:0] grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_vnew_1_d0;
wire   [31:0] grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_grp_fu_261_p_din0;
wire   [31:0] grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_grp_fu_261_p_din1;
wire   [1:0] grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_grp_fu_261_p_opcode;
wire    grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_grp_fu_261_p_ce;
wire    grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_ap_start;
wire    grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_ap_done;
wire    grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_ap_idle;
wire    grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_ap_ready;
wire   [6:0] grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_x_min_1_address0;
wire    grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_x_min_1_ce0;
wire   [6:0] grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_vnew_1_address0;
wire    grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_vnew_1_ce0;
wire   [6:0] grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_s1_1_address0;
wire    grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_s1_1_ce0;
wire    grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_s1_1_we0;
wire   [31:0] grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_s1_1_d0;
wire    grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_ap_start;
wire    grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_ap_done;
wire    grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_ap_idle;
wire    grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_ap_ready;
wire   [6:0] grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_x_max_1_address0;
wire    grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_x_max_1_ce0;
wire   [6:0] grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_s1_1_address0;
wire    grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_s1_1_ce0;
wire   [6:0] grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_vnew_1_address0;
wire    grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_vnew_1_ce0;
wire    grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_vnew_1_we0;
wire   [31:0] grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_vnew_1_d0;
reg   [2:0] j_reg_198;
wire    ap_CS_fsm_state5;
reg   [2:0] j_1_reg_209;
wire    ap_CS_fsm_state8;
reg   [2:0] j_2_reg_220;
wire    ap_CS_fsm_state11;
reg    grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_start_reg;
reg    grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_ap_start_reg;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg    grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_ap_start_reg;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg   [3:0] i_fu_84;
reg   [3:0] i_1_fu_88;
reg   [3:0] i_2_fu_92;
wire   [31:0] grp_fu_261_p2;
wire   [31:0] select_ln91_fu_634_p3;
reg   [31:0] grp_fu_261_p0;
reg   [31:0] grp_fu_261_p1;
reg   [31:0] grp_fu_268_p0;
reg   [31:0] grp_fu_268_p1;
wire   [5:0] zext_ln177_fu_313_p1;
wire   [5:0] add_ln178_fu_329_p2;
wire   [5:0] zext_ln108_fu_372_p1;
wire   [5:0] add_ln109_fu_388_p2;
wire   [31:0] bitcast_ln109_fu_403_p1;
wire   [31:0] bitcast_ln109_1_fu_421_p1;
wire   [7:0] tmp_fu_407_p4;
wire   [22:0] trunc_ln109_fu_417_p1;
wire   [0:0] icmp_ln109_1_fu_445_p2;
wire   [0:0] icmp_ln109_fu_439_p2;
wire   [7:0] tmp_1_fu_425_p4;
wire   [22:0] trunc_ln109_2_fu_435_p1;
wire   [0:0] icmp_ln109_3_fu_463_p2;
wire   [0:0] icmp_ln109_2_fu_457_p2;
wire   [0:0] or_ln109_fu_451_p2;
wire   [0:0] or_ln109_1_fu_469_p2;
wire   [0:0] and_ln109_fu_475_p2;
wire   [0:0] grp_fu_268_p2;
wire   [0:0] and_ln109_1_fu_481_p2;
wire   [5:0] zext_ln90_fu_519_p1;
wire   [5:0] add_ln91_fu_535_p2;
wire   [31:0] bitcast_ln91_fu_550_p1;
wire   [31:0] bitcast_ln91_1_fu_568_p1;
wire   [7:0] tmp_3_fu_554_p4;
wire   [22:0] trunc_ln91_fu_564_p1;
wire   [0:0] icmp_ln91_1_fu_592_p2;
wire   [0:0] icmp_ln91_fu_586_p2;
wire   [7:0] tmp_4_fu_572_p4;
wire   [22:0] trunc_ln91_2_fu_582_p1;
wire   [0:0] icmp_ln91_3_fu_610_p2;
wire   [0:0] icmp_ln91_2_fu_604_p2;
wire   [0:0] or_ln91_fu_598_p2;
wire   [0:0] or_ln91_1_fu_616_p2;
wire   [0:0] and_ln91_fu_622_p2;
wire   [0:0] and_ln91_1_fu_628_p2;
reg    grp_fu_261_ce;
reg   [4:0] grp_fu_268_opcode;
reg    ap_block_state16_on_subcall_done;
reg   [15:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_start_reg = 1'b0;
#0 grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_ap_start_reg = 1'b0;
#0 grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_ap_start_reg = 1'b0;
end

tracking_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2 grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_start),
    .ap_done(grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_done),
    .ap_idle(grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_idle),
    .ap_ready(grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_ready),
    .x_1_address0(grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_x_1_address0),
    .x_1_ce0(grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_x_1_ce0),
    .x_1_q0(x_1_q0),
    .g_1_address0(grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_g_1_address0),
    .g_1_ce0(grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_g_1_ce0),
    .g_1_q0(g_1_q0),
    .vnew_1_address0(grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_vnew_1_address0),
    .vnew_1_ce0(grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_vnew_1_ce0),
    .vnew_1_we0(grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_vnew_1_we0),
    .vnew_1_d0(grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_vnew_1_d0),
    .grp_fu_261_p_din0(grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_grp_fu_261_p_din0),
    .grp_fu_261_p_din1(grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_grp_fu_261_p_din1),
    .grp_fu_261_p_opcode(grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_grp_fu_261_p_opcode),
    .grp_fu_261_p_dout0(grp_fu_261_p2),
    .grp_fu_261_p_ce(grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_grp_fu_261_p_ce)
);

tracking_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2 grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_ap_start),
    .ap_done(grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_ap_done),
    .ap_idle(grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_ap_idle),
    .ap_ready(grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_ap_ready),
    .x_min_1_address0(grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_x_min_1_address0),
    .x_min_1_ce0(grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_x_min_1_ce0),
    .x_min_1_q0(x_min_1_q0),
    .vnew_1_address0(grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_vnew_1_address0),
    .vnew_1_ce0(grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_vnew_1_ce0),
    .vnew_1_q0(vnew_1_q0),
    .s1_1_address0(grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_s1_1_address0),
    .s1_1_ce0(grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_s1_1_ce0),
    .s1_1_we0(grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_s1_1_we0),
    .s1_1_d0(grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_s1_1_d0)
);

tracking_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2 grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_ap_start),
    .ap_done(grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_ap_done),
    .ap_idle(grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_ap_idle),
    .ap_ready(grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_ap_ready),
    .x_max_1_address0(grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_x_max_1_address0),
    .x_max_1_ce0(grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_x_max_1_ce0),
    .x_max_1_q0(x_max_1_q0),
    .s1_1_address0(grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_s1_1_address0),
    .s1_1_ce0(grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_s1_1_ce0),
    .s1_1_q0(s1_1_q0),
    .vnew_1_address0(grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_vnew_1_address0),
    .vnew_1_ce0(grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_vnew_1_ce0),
    .vnew_1_we0(grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_vnew_1_we0),
    .vnew_1_d0(grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_vnew_1_d0)
);

tracking_fadd_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_2_full_dsp_1_U93(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_261_p0),
    .din1(grp_fu_261_p1),
    .ce(grp_fu_261_ce),
    .dout(grp_fu_261_p2)
);

tracking_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U94(
    .din0(grp_fu_268_p0),
    .din1(grp_fu_268_p1),
    .opcode(grp_fu_268_opcode),
    .dout(grp_fu_268_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_ap_start_reg <= 1'b1;
        end else if ((grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_ap_ready == 1'b1)) begin
            grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & ((icmp_ln89_fu_499_p2 == 1'd1) | (tiny_en_input_bound_load_load_fu_304_p1 == 1'd0)))) begin
            grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_start_reg <= 1'b1;
        end else if ((grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_ready == 1'b1)) begin
            grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_ap_start_reg <= 1'b1;
        end else if ((grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_ap_ready == 1'b1)) begin
            grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tiny_en_input_bound_load_load_fu_304_p1 == 1'd1) & (icmp_ln176_fu_284_p2 == 1'd1))) begin
        i_1_fu_88 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln108_fu_376_p2 == 1'd1))) begin
        i_1_fu_88 <= add_ln107_reg_714;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln107_fu_347_p2 == 1'd1))) begin
        i_2_fu_92 <= 4'd0;
    end else if (((icmp_ln90_fu_523_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_2_fu_92 <= add_ln89_reg_757;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_84 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln177_fu_317_p2 == 1'd1))) begin
        i_fu_84 <= add_ln176_reg_657;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln107_fu_347_p2 == 1'd0))) begin
        j_1_reg_209 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_1_reg_209 <= add_ln108_reg_734;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln89_fu_499_p2 == 1'd0) & (tiny_en_input_bound_load_load_fu_304_p1 == 1'd1))) begin
        j_2_reg_220 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        j_2_reg_220 <= add_ln90_reg_770;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln176_fu_284_p2 == 1'd0))) begin
        j_reg_198 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_198 <= add_ln177_reg_681;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln107_reg_714 <= add_ln107_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln108_reg_734 <= add_ln108_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln176_reg_657 <= add_ln176_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln177_reg_681 <= add_ln177_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tiny_en_input_bound_load_load_fu_304_p1 == 1'd1))) begin
        add_ln89_reg_757 <= add_ln89_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln90_reg_770 <= add_ln90_fu_529_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln107_fu_347_p2 == 1'd0))) begin
        tmp_6_reg_719[5 : 2] <= tmp_6_fu_359_p3[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln89_fu_499_p2 == 1'd0) & (tiny_en_input_bound_load_load_fu_304_p1 == 1'd1))) begin
        tmp_7_reg_762[5 : 2] <= tmp_7_fu_511_p3[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln176_fu_284_p2 == 1'd0))) begin
        tmp_s_reg_662[5 : 2] <= tmp_s_fu_296_p3[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln108_fu_376_p2 == 1'd0))) begin
        zext_ln109_reg_739[5 : 0] <= zext_ln109_fu_393_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln177_fu_317_p2 == 1'd0))) begin
        zext_ln178_reg_686[5 : 0] <= zext_ln178_fu_334_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_523_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        zext_ln91_reg_775[5 : 0] <= zext_ln91_fu_540_p1[5 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_done == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_ap_done == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state16_on_subcall_done)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((1'b0 == ap_block_state16_on_subcall_done) & (1'b1 == ap_CS_fsm_state16)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state16_on_subcall_done) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_261_ce = grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_grp_fu_261_p_ce;
    end else begin
        grp_fu_261_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_261_p0 = grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_grp_fu_261_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_261_p0 = u_1_q0;
    end else begin
        grp_fu_261_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_261_p1 = grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_grp_fu_261_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_261_p1 = y_1_q0;
    end else begin
        grp_fu_261_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_268_opcode = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_268_opcode = 5'd2;
    end else begin
        grp_fu_268_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_268_p0 = u_max_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_268_p0 = u_min_1_q0;
    end else begin
        grp_fu_268_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_268_p1 = m1_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_268_p1 = znew_1_q0;
    end else begin
        grp_fu_268_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        m1_1_address0 = zext_ln91_fu_540_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        m1_1_address0 = zext_ln109_reg_739;
    end else begin
        m1_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10))) begin
        m1_1_ce0 = 1'b1;
    end else begin
        m1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m1_1_we0 = 1'b1;
    end else begin
        m1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tiny_en_state_bound == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        s1_1_address0 = grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_s1_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        s1_1_address0 = grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_s1_1_address0;
    end else begin
        s1_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((tiny_en_state_bound == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        s1_1_ce0 = grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_s1_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        s1_1_ce0 = grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_s1_1_ce0;
    end else begin
        s1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        s1_1_we0 = grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_s1_1_we0;
    end else begin
        s1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        u_1_ce0 = 1'b1;
    end else begin
        u_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        u_max_1_ce0 = 1'b1;
    end else begin
        u_max_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        u_min_1_ce0 = 1'b1;
    end else begin
        u_min_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tiny_en_state_bound == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        vnew_1_address0 = grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_vnew_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        vnew_1_address0 = grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_vnew_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        vnew_1_address0 = grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_vnew_1_address0;
    end else begin
        vnew_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((tiny_en_state_bound == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        vnew_1_ce0 = grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_vnew_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        vnew_1_ce0 = grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_vnew_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        vnew_1_ce0 = grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_vnew_1_ce0;
    end else begin
        vnew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tiny_en_state_bound == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        vnew_1_d0 = grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_vnew_1_d0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        vnew_1_d0 = grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_vnew_1_d0;
    end else begin
        vnew_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((tiny_en_state_bound == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        vnew_1_we0 = grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_vnew_1_we0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        vnew_1_we0 = grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_vnew_1_we0;
    end else begin
        vnew_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_1_ce0 = 1'b1;
    end else begin
        y_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        znew_1_address0 = zext_ln91_reg_775;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        znew_1_address0 = zext_ln109_fu_393_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        znew_1_address0 = zext_ln178_reg_686;
    end else begin
        znew_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        znew_1_ce0 = 1'b1;
    end else begin
        znew_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        znew_1_d0 = select_ln91_fu_634_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        znew_1_d0 = grp_fu_261_p2;
    end else begin
        znew_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5))) begin
        znew_1_we0 = 1'b1;
    end else begin
        znew_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tiny_en_input_bound_load_load_fu_304_p1 == 1'd1) & (icmp_ln176_fu_284_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((1'b1 == ap_CS_fsm_state2) & (tiny_en_input_bound_load_load_fu_304_p1 == 1'd0) & (icmp_ln176_fu_284_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln177_fu_317_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln107_fu_347_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln108_fu_376_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & ((icmp_ln89_fu_499_p2 == 1'd1) | (tiny_en_input_bound_load_load_fu_304_p1 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln90_fu_523_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_done == 1'b1) & (tiny_en_state_bound_load_load_fu_643_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_done == 1'b1) & (tiny_en_state_bound == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b0 == ap_block_state16_on_subcall_done) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln107_fu_353_p2 = (i_1_fu_88 + 4'd1);

assign add_ln108_fu_382_p2 = (j_1_reg_209 + 3'd1);

assign add_ln109_fu_388_p2 = (zext_ln108_fu_372_p1 + tmp_6_reg_719);

assign add_ln176_fu_290_p2 = (i_fu_84 + 4'd1);

assign add_ln177_fu_323_p2 = (j_reg_198 + 3'd1);

assign add_ln178_fu_329_p2 = (zext_ln177_fu_313_p1 + tmp_s_reg_662);

assign add_ln89_fu_505_p2 = (i_2_fu_92 + 4'd1);

assign add_ln90_fu_529_p2 = (j_2_reg_220 + 3'd1);

assign add_ln91_fu_535_p2 = (zext_ln90_fu_519_p1 + tmp_7_reg_762);

assign and_ln109_1_fu_481_p2 = (grp_fu_268_p2 & and_ln109_fu_475_p2);

assign and_ln109_fu_475_p2 = (or_ln109_fu_451_p2 & or_ln109_1_fu_469_p2);

assign and_ln91_1_fu_628_p2 = (grp_fu_268_p2 & and_ln91_fu_622_p2);

assign and_ln91_fu_622_p2 = (or_ln91_fu_598_p2 & or_ln91_1_fu_616_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state16_on_subcall_done = ((grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_ap_done == 1'b0) & (tiny_en_state_bound == 1'd1));
end

assign bitcast_ln109_1_fu_421_p1 = znew_1_q0;

assign bitcast_ln109_fu_403_p1 = u_min_1_q0;

assign bitcast_ln91_1_fu_568_p1 = m1_1_q0;

assign bitcast_ln91_fu_550_p1 = u_max_1_q0;

assign g_1_address0 = grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_g_1_address0;

assign g_1_ce0 = grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_g_1_ce0;

assign grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_ap_start = grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_ap_start_reg;

assign grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_start = grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_ap_start_reg;

assign grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_ap_start = grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_ap_start_reg;

assign icmp_ln107_fu_347_p2 = ((i_1_fu_88 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_376_p2 = ((j_1_reg_209 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln109_1_fu_445_p2 = ((trunc_ln109_fu_417_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln109_2_fu_457_p2 = ((tmp_1_fu_425_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln109_3_fu_463_p2 = ((trunc_ln109_2_fu_435_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_439_p2 = ((tmp_fu_407_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln176_fu_284_p2 = ((i_fu_84 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln177_fu_317_p2 = ((j_reg_198 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_499_p2 = ((i_2_fu_92 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_523_p2 = ((j_2_reg_220 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln91_1_fu_592_p2 = ((trunc_ln91_fu_564_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln91_2_fu_604_p2 = ((tmp_4_fu_572_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln91_3_fu_610_p2 = ((trunc_ln91_2_fu_582_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_586_p2 = ((tmp_3_fu_554_p4 != 8'd255) ? 1'b1 : 1'b0);

assign m1_1_d0 = ((and_ln109_1_fu_481_p2[0:0] == 1'b1) ? u_min_1_q0 : znew_1_q0);

assign or_ln109_1_fu_469_p2 = (icmp_ln109_3_fu_463_p2 | icmp_ln109_2_fu_457_p2);

assign or_ln109_fu_451_p2 = (icmp_ln109_fu_439_p2 | icmp_ln109_1_fu_445_p2);

assign or_ln91_1_fu_616_p2 = (icmp_ln91_3_fu_610_p2 | icmp_ln91_2_fu_604_p2);

assign or_ln91_fu_598_p2 = (icmp_ln91_fu_586_p2 | icmp_ln91_1_fu_592_p2);

assign s1_1_d0 = grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_s1_1_d0;

assign select_ln91_fu_634_p3 = ((and_ln91_1_fu_628_p2[0:0] == 1'b1) ? u_max_1_q0 : m1_1_q0);

assign tiny_en_input_bound_load_load_fu_304_p1 = tiny_en_input_bound;

assign tiny_en_state_bound_load_load_fu_643_p1 = tiny_en_state_bound;

assign tmp_1_fu_425_p4 = {{bitcast_ln109_1_fu_421_p1[30:23]}};

assign tmp_3_fu_554_p4 = {{bitcast_ln91_fu_550_p1[30:23]}};

assign tmp_4_fu_572_p4 = {{bitcast_ln91_1_fu_568_p1[30:23]}};

assign tmp_6_fu_359_p3 = {{i_1_fu_88}, {2'd0}};

assign tmp_7_fu_511_p3 = {{i_2_fu_92}, {2'd0}};

assign tmp_fu_407_p4 = {{bitcast_ln109_fu_403_p1[30:23]}};

assign tmp_s_fu_296_p3 = {{i_fu_84}, {2'd0}};

assign trunc_ln109_2_fu_435_p1 = bitcast_ln109_1_fu_421_p1[22:0];

assign trunc_ln109_fu_417_p1 = bitcast_ln109_fu_403_p1[22:0];

assign trunc_ln91_2_fu_582_p1 = bitcast_ln91_1_fu_568_p1[22:0];

assign trunc_ln91_fu_564_p1 = bitcast_ln91_fu_550_p1[22:0];

assign u_1_address0 = zext_ln178_fu_334_p1;

assign u_max_1_address0 = zext_ln91_fu_540_p1;

assign u_min_1_address0 = zext_ln109_fu_393_p1;

assign x_1_address0 = grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_x_1_address0;

assign x_1_ce0 = grp_update_slack_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_fu_231_x_1_ce0;

assign x_max_1_address0 = grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_x_max_1_address0;

assign x_max_1_ce0 = grp_update_slack_Pipeline_VITIS_LOOP_89_1_VITIS_LOOP_90_2_fu_251_x_max_1_ce0;

assign x_min_1_address0 = grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_x_min_1_address0;

assign x_min_1_ce0 = grp_update_slack_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_108_2_fu_241_x_min_1_ce0;

assign y_1_address0 = zext_ln178_fu_334_p1;

assign zext_ln108_fu_372_p1 = j_1_reg_209;

assign zext_ln109_fu_393_p1 = add_ln109_fu_388_p2;

assign zext_ln177_fu_313_p1 = j_reg_198;

assign zext_ln178_fu_334_p1 = add_ln178_fu_329_p2;

assign zext_ln90_fu_519_p1 = j_2_reg_220;

assign zext_ln91_fu_540_p1 = add_ln91_fu_535_p2;

always @ (posedge ap_clk) begin
    tmp_s_reg_662[1:0] <= 2'b00;
    zext_ln178_reg_686[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_6_reg_719[1:0] <= 2'b00;
    zext_ln109_reg_739[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_7_reg_762[1:0] <= 2'b00;
    zext_ln91_reg_775[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //tracking_update_slack
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_x_1_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0, address1, ce1, d1, we1, q1,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 7;
parameter AddressRange = 120;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1;
output reg[DataWidth-1:0] q1;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_x_1_RAM_AUTO_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
        q1 <= ram[address1];
    end
end


endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_x_min_1_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0, address1, ce1, d1, we1,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 7;
parameter AddressRange = 120;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_x_min_1_RAM_AUTO_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
    end
end


endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_x0_RAM_1WNR_AUTO_1R1W (address0, ce0, d0, we0, q0, address1, ce1, q1,  reset, clk);

parameter DataWidth = 32;
parameter AddressWidth = 4;
parameter AddressRange = 12;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram0[0:AddressRange-1];



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram0[address0] <= d0; 
        q0 <= ram0[address0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        q1 <= ram0[address1];
    end
end


endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module tracking_Xref_1_RAM_AUTO_1R1W (address0, ce0, d0, we0, q0, address1, ce1, q1,  reset,clk);

parameter DataWidth = 32;
parameter AddressWidth = 7;
parameter AddressRange = 120;

input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0;
output reg[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;
input reset;
input clk;

(* ram_style = "auto" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("./tracking_Xref_1_RAM_AUTO_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        q1 <= ram[address1];
    end
end


endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="tracking_tracking,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=80.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=56.739000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=63,HLS_SYN_DSP=0,HLS_SYN_FF=11881,HLS_SYN_LUT=27660,HLS_VERSION=2022_1}" *)

module tracking (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] observations_q0;
reg   [1:0] inputs_address0;
reg    inputs_ce0;
reg    inputs_we0;
reg   [31:0] inputs_d0;
wire   [31:0] timestep;
reg   [31:0] tiny_rho;
reg   [5:0] Kinf_1_address0;
reg    Kinf_1_ce0;
reg    Kinf_1_we0;
wire   [31:0] Kinf_1_q0;
reg   [5:0] KinfT_1_address0;
reg    KinfT_1_ce0;
reg    KinfT_1_we0;
wire   [31:0] KinfT_1_q0;
reg    KinfT_1_ce1;
wire   [31:0] KinfT_1_q1;
reg   [7:0] Pinf_1_address0;
reg    Pinf_1_ce0;
reg    Pinf_1_we0;
wire   [31:0] Pinf_1_q0;
wire   [31:0] Pinf_data_q0;
reg   [7:0] PinfT_1_address0;
reg    PinfT_1_ce0;
reg    PinfT_1_we0;
wire   [31:0] PinfT_1_q0;
reg    PinfT_1_ce1;
wire   [31:0] PinfT_1_q1;
reg   [3:0] Quu_inv_1_address0;
reg    Quu_inv_1_ce0;
reg    Quu_inv_1_we0;
wire   [31:0] Quu_inv_1_q0;
reg    Quu_inv_1_ce1;
wire   [31:0] Quu_inv_1_q1;
reg   [7:0] AmBKt_1_address0;
reg    AmBKt_1_ce0;
reg    AmBKt_1_we0;
wire   [31:0] AmBKt_1_q0;
reg    AmBKt_1_ce1;
wire   [31:0] AmBKt_1_q1;
wire   [31:0] AmBKt_data_q0;
wire   [31:0] coeff_d2p_data_q0;
reg   [7:0] Adyn_1_address0;
reg    Adyn_1_ce0;
reg    Adyn_1_we0;
wire   [31:0] Adyn_1_q0;
reg    Adyn_1_ce1;
wire   [31:0] Adyn_1_q1;
wire   [31:0] Adyn_data_q0;
reg   [5:0] Bdyn_1_address0;
reg    Bdyn_1_ce0;
reg    Bdyn_1_we0;
wire   [31:0] Bdyn_1_q0;
reg    Bdyn_1_ce1;
wire   [31:0] Bdyn_1_q1;
wire   [31:0] Bdyn_data_q0;
reg   [5:0] BdynT_1_address0;
reg    BdynT_1_ce0;
reg    BdynT_1_we0;
wire   [31:0] BdynT_1_q0;
reg    BdynT_1_ce1;
wire   [31:0] BdynT_1_q1;
reg   [3:0] tiny_Q_address0;
reg    tiny_Q_ce0;
reg    tiny_Q_we0;
wire   [31:0] tiny_Q_q0;
reg   [5:0] u_min_1_address0;
reg    u_min_1_ce0;
reg    u_min_1_we0;
wire   [31:0] u_min_1_q0;
reg    u_min_1_ce1;
reg    u_min_1_we1;
reg   [5:0] u_max_1_address0;
reg    u_max_1_ce0;
reg    u_max_1_we0;
wire   [31:0] u_max_1_q0;
reg    u_max_1_ce1;
reg    u_max_1_we1;
reg   [6:0] x_min_1_address0;
reg    x_min_1_ce0;
reg    x_min_1_we0;
wire   [31:0] x_min_1_q0;
reg    x_min_1_ce1;
reg    x_min_1_we1;
reg   [6:0] x_max_1_address0;
reg    x_max_1_ce0;
reg    x_max_1_we0;
wire   [31:0] x_max_1_q0;
reg    x_max_1_ce1;
reg    x_max_1_we1;
reg   [31:0] tiny_iter;
reg   [31:0] tiny_abs_pri_tol;
reg   [31:0] tiny_abs_dua_tol;
reg   [5:0] tiny_max_iter;
reg   [0:0] tiny_check_termination;
reg   [0:0] tiny_en_input_bound;
reg   [0:0] tiny_en_state_bound;
reg   [6:0] Xref_1_address0;
reg    Xref_1_ce0;
reg    Xref_1_we0;
wire   [31:0] Xref_1_q0;
reg    Xref_1_ce1;
wire   [31:0] Xref_1_q1;
reg   [6:0] x_1_address0;
reg    x_1_ce0;
reg    x_1_we0;
reg   [31:0] x_1_d0;
wire   [31:0] x_1_q0;
reg   [6:0] x_1_address1;
reg    x_1_ce1;
reg    x_1_we1;
wire   [31:0] x_1_q1;
reg   [5:0] u_1_address0;
reg    u_1_ce0;
wire   [31:0] u_1_q0;
wire   [31:0] u_1_q1;
wire   [11:0] sub_ln71_fu_598_p2;
reg   [11:0] sub_ln71_reg_625;
reg   [3:0] x0_address0;
reg    x0_ce0;
reg    x0_we0;
wire   [31:0] x0_q0;
reg    x0_ce1;
wire   [31:0] x0_q1;
wire    grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_ap_start;
wire    grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_ap_done;
wire    grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_ap_idle;
wire    grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_ap_ready;
wire   [5:0] grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_Kinf_1_address0;
wire    grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_Kinf_1_ce0;
wire    grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_Kinf_1_we0;
wire   [31:0] grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_Kinf_1_d0;
wire    grp_set_16_fu_296_ap_start;
wire    grp_set_16_fu_296_ap_done;
wire    grp_set_16_fu_296_ap_idle;
wire    grp_set_16_fu_296_ap_ready;
wire   [7:0] grp_set_16_fu_296_a_address0;
wire    grp_set_16_fu_296_a_ce0;
wire    grp_set_16_fu_296_a_we0;
wire   [31:0] grp_set_16_fu_296_a_d0;
wire   [7:0] grp_set_16_fu_296_data_address0;
wire    grp_set_16_fu_296_data_ce0;
wire    grp_set_16_fu_304_ap_start;
wire    grp_set_16_fu_304_ap_done;
wire    grp_set_16_fu_304_ap_idle;
wire    grp_set_16_fu_304_ap_ready;
wire   [7:0] grp_set_16_fu_304_a_address0;
wire    grp_set_16_fu_304_a_ce0;
wire    grp_set_16_fu_304_a_we0;
wire   [31:0] grp_set_16_fu_304_a_d0;
wire   [7:0] grp_set_16_fu_304_data_address0;
wire    grp_set_16_fu_304_data_ce0;
wire    grp_set_16_fu_312_ap_start;
wire    grp_set_16_fu_312_ap_done;
wire    grp_set_16_fu_312_ap_idle;
wire    grp_set_16_fu_312_ap_ready;
wire   [7:0] grp_set_16_fu_312_a_address0;
wire    grp_set_16_fu_312_a_ce0;
wire    grp_set_16_fu_312_a_we0;
wire   [31:0] grp_set_16_fu_312_a_d0;
wire   [7:0] grp_set_16_fu_312_data_address0;
wire    grp_set_16_fu_312_data_ce0;
wire    grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_ap_start;
wire    grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_ap_done;
wire    grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_ap_idle;
wire    grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_ap_ready;
wire   [3:0] grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_Quu_inv_1_address0;
wire    grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_Quu_inv_1_ce0;
wire    grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_Quu_inv_1_we0;
wire   [31:0] grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_Quu_inv_1_d0;
wire    grp_set_1613_fu_328_ap_start;
wire    grp_set_1613_fu_328_ap_done;
wire    grp_set_1613_fu_328_ap_idle;
wire    grp_set_1613_fu_328_ap_ready;
wire   [5:0] grp_set_1613_fu_328_a_address0;
wire    grp_set_1613_fu_328_a_ce0;
wire    grp_set_1613_fu_328_a_we0;
wire   [31:0] grp_set_1613_fu_328_a_d0;
wire   [5:0] grp_set_1613_fu_328_data_address0;
wire    grp_set_1613_fu_328_data_ce0;
wire    grp_set_1613_fu_336_ap_start;
wire    grp_set_1613_fu_336_ap_done;
wire    grp_set_1613_fu_336_ap_idle;
wire    grp_set_1613_fu_336_ap_ready;
wire   [5:0] grp_set_1613_fu_336_a_address0;
wire    grp_set_1613_fu_336_a_ce0;
wire    grp_set_1613_fu_336_a_we0;
wire   [31:0] grp_set_1613_fu_336_a_d0;
wire   [5:0] grp_set_1613_fu_336_data_address0;
wire    grp_set_1613_fu_336_data_ce0;
wire    grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_ap_start;
wire    grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_ap_done;
wire    grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_ap_idle;
wire    grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_ap_ready;
wire   [3:0] grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_tiny_Q_address0;
wire    grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_tiny_Q_ce0;
wire    grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_tiny_Q_we0;
wire   [31:0] grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_tiny_Q_d0;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_ap_start;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_ap_done;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_ap_idle;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_ap_ready;
wire   [5:0] grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_address0;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_ce0;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_we0;
wire   [31:0] grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_d0;
wire   [5:0] grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_address1;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_ce1;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_we1;
wire   [31:0] grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_d1;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_ap_start;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_ap_done;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_ap_idle;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_ap_ready;
wire   [5:0] grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_address0;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_ce0;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_we0;
wire   [31:0] grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_d0;
wire   [5:0] grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_address1;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_ce1;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_we1;
wire   [31:0] grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_d1;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_ap_start;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_ap_done;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_ap_idle;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_ap_ready;
wire   [6:0] grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_address0;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_ce0;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_we0;
wire   [31:0] grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_d0;
wire   [6:0] grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_address1;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_ce1;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_we1;
wire   [31:0] grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_d1;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_ap_start;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_ap_done;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_ap_idle;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_ap_ready;
wire   [6:0] grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_address0;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_ce0;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_we0;
wire   [31:0] grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_d0;
wire   [6:0] grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_address1;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_ce1;
wire    grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_we1;
wire   [31:0] grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_d1;
wire    grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_ap_start;
wire    grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_ap_done;
wire    grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_ap_idle;
wire    grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_ap_ready;
wire   [6:0] grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_Xref_1_address0;
wire    grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_Xref_1_ce0;
wire    grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_Xref_1_we0;
wire   [31:0] grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_Xref_1_d0;
wire    grp_set_1_fu_385_ap_start;
wire    grp_set_1_fu_385_ap_done;
wire    grp_set_1_fu_385_ap_idle;
wire    grp_set_1_fu_385_ap_ready;
wire   [3:0] grp_set_1_fu_385_a_address0;
wire    grp_set_1_fu_385_a_ce0;
wire    grp_set_1_fu_385_a_we0;
wire   [31:0] grp_set_1_fu_385_a_d0;
wire   [3:0] grp_set_1_fu_385_observations_address0;
wire    grp_set_1_fu_385_observations_ce0;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_ap_start;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_ap_done;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_ap_idle;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_ap_ready;
wire   [5:0] grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_Kinf_1_address0;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_Kinf_1_ce0;
wire   [5:0] grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_KinfT_1_address0;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_KinfT_1_ce0;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_KinfT_1_we0;
wire   [31:0] grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_KinfT_1_d0;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_ap_start;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_ap_done;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_ap_idle;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_ap_ready;
wire   [7:0] grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_Pinf_1_address0;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_Pinf_1_ce0;
wire   [7:0] grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_PinfT_1_address0;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_PinfT_1_ce0;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_PinfT_1_we0;
wire   [31:0] grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_PinfT_1_d0;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_ap_start;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_ap_done;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_ap_idle;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_ap_ready;
wire   [5:0] grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_Bdyn_1_address0;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_Bdyn_1_ce0;
wire   [5:0] grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_BdynT_1_address0;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_BdynT_1_ce0;
wire    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_BdynT_1_we0;
wire   [31:0] grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_BdynT_1_d0;
wire    grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_ap_start;
wire    grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_ap_done;
wire    grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_ap_idle;
wire    grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_ap_ready;
wire   [3:0] grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x0_address0;
wire    grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x0_ce0;
wire   [3:0] grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x0_address1;
wire    grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x0_ce1;
wire   [6:0] grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_address0;
wire    grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_ce0;
wire    grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_we0;
wire   [31:0] grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_d0;
wire   [6:0] grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_address1;
wire    grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_ce1;
wire    grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_we1;
wire   [31:0] grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_d1;
wire    grp_tiny_solve_fu_424_ap_start;
wire    grp_tiny_solve_fu_424_ap_done;
wire    grp_tiny_solve_fu_424_ap_idle;
wire    grp_tiny_solve_fu_424_ap_ready;
wire   [31:0] grp_tiny_solve_fu_424_tiny_iter_o;
wire    grp_tiny_solve_fu_424_tiny_iter_o_ap_vld;
wire   [5:0] grp_tiny_solve_fu_424_Kinf_1_address0;
wire    grp_tiny_solve_fu_424_Kinf_1_ce0;
wire   [6:0] grp_tiny_solve_fu_424_x_1_address0;
wire    grp_tiny_solve_fu_424_x_1_ce0;
wire    grp_tiny_solve_fu_424_x_1_we0;
wire   [31:0] grp_tiny_solve_fu_424_x_1_d0;
wire   [6:0] grp_tiny_solve_fu_424_x_1_address1;
wire    grp_tiny_solve_fu_424_x_1_ce1;
wire   [5:0] grp_tiny_solve_fu_424_u_1_address0;
wire    grp_tiny_solve_fu_424_u_1_ce0;
wire    grp_tiny_solve_fu_424_u_1_we0;
wire   [31:0] grp_tiny_solve_fu_424_u_1_d0;
wire   [5:0] grp_tiny_solve_fu_424_u_1_address1;
wire    grp_tiny_solve_fu_424_u_1_ce1;
wire   [7:0] grp_tiny_solve_fu_424_Adyn_1_address0;
wire    grp_tiny_solve_fu_424_Adyn_1_ce0;
wire   [7:0] grp_tiny_solve_fu_424_Adyn_1_address1;
wire    grp_tiny_solve_fu_424_Adyn_1_ce1;
wire   [5:0] grp_tiny_solve_fu_424_Bdyn_1_address0;
wire    grp_tiny_solve_fu_424_Bdyn_1_ce0;
wire   [5:0] grp_tiny_solve_fu_424_Bdyn_1_address1;
wire    grp_tiny_solve_fu_424_Bdyn_1_ce1;
wire   [5:0] grp_tiny_solve_fu_424_u_min_1_address0;
wire    grp_tiny_solve_fu_424_u_min_1_ce0;
wire   [5:0] grp_tiny_solve_fu_424_u_max_1_address0;
wire    grp_tiny_solve_fu_424_u_max_1_ce0;
wire   [6:0] grp_tiny_solve_fu_424_x_min_1_address0;
wire    grp_tiny_solve_fu_424_x_min_1_ce0;
wire   [6:0] grp_tiny_solve_fu_424_x_max_1_address0;
wire    grp_tiny_solve_fu_424_x_max_1_ce0;
wire   [6:0] grp_tiny_solve_fu_424_Xref_1_address0;
wire    grp_tiny_solve_fu_424_Xref_1_ce0;
wire   [6:0] grp_tiny_solve_fu_424_Xref_1_address1;
wire    grp_tiny_solve_fu_424_Xref_1_ce1;
wire   [7:0] grp_tiny_solve_fu_424_PinfT_1_address0;
wire    grp_tiny_solve_fu_424_PinfT_1_ce0;
wire   [7:0] grp_tiny_solve_fu_424_PinfT_1_address1;
wire    grp_tiny_solve_fu_424_PinfT_1_ce1;
wire   [3:0] grp_tiny_solve_fu_424_tiny_Q_address0;
wire    grp_tiny_solve_fu_424_tiny_Q_ce0;
wire   [5:0] grp_tiny_solve_fu_424_BdynT_1_address0;
wire    grp_tiny_solve_fu_424_BdynT_1_ce0;
wire   [5:0] grp_tiny_solve_fu_424_BdynT_1_address1;
wire    grp_tiny_solve_fu_424_BdynT_1_ce1;
wire   [3:0] grp_tiny_solve_fu_424_Quu_inv_1_address0;
wire    grp_tiny_solve_fu_424_Quu_inv_1_ce0;
wire   [3:0] grp_tiny_solve_fu_424_Quu_inv_1_address1;
wire    grp_tiny_solve_fu_424_Quu_inv_1_ce1;
wire   [7:0] grp_tiny_solve_fu_424_AmBKt_1_address0;
wire    grp_tiny_solve_fu_424_AmBKt_1_ce0;
wire   [7:0] grp_tiny_solve_fu_424_AmBKt_1_address1;
wire    grp_tiny_solve_fu_424_AmBKt_1_ce1;
wire   [5:0] grp_tiny_solve_fu_424_KinfT_1_address0;
wire    grp_tiny_solve_fu_424_KinfT_1_ce0;
wire   [5:0] grp_tiny_solve_fu_424_KinfT_1_address1;
wire    grp_tiny_solve_fu_424_KinfT_1_ce1;
reg    grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_set_16_fu_296_ap_start_reg;
reg    grp_set_16_fu_304_ap_start_reg;
reg    grp_set_16_fu_312_ap_start_reg;
reg    grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_ap_start_reg;
reg    grp_set_1613_fu_328_ap_start_reg;
reg    grp_set_1613_fu_336_ap_start_reg;
reg    grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_ap_start_reg;
reg    grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_ap_start_reg;
reg    grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_ap_start_reg;
reg    grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_ap_start_reg;
reg    grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_ap_start_reg;
reg    grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_ap_start_reg;
reg    grp_set_1_fu_385_ap_start_reg;
reg    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_ap_start_reg;
reg    grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_ap_start_reg;
reg    grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_ap_start_reg;
reg    grp_tiny_solve_fu_424_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state7;
wire   [31:0] bitcast_ln100_fu_605_p1;
wire   [31:0] bitcast_ln101_fu_610_p1;
wire   [31:0] bitcast_ln102_fu_615_p1;
wire   [31:0] bitcast_ln103_fu_620_p1;
wire   [7:0] trunc_ln71_fu_574_p1;
wire   [9:0] trunc_ln71_1_fu_586_p1;
wire   [11:0] shl_ln1_fu_578_p3;
wire   [11:0] shl_ln71_1_fu_590_p3;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_block_state2_on_subcall_done;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_block_state4_on_subcall_done;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 tiny_rho = 32'd0;
#0 tiny_iter = 32'd0;
#0 tiny_abs_pri_tol = 32'd0;
#0 tiny_abs_dua_tol = 32'd0;
#0 tiny_max_iter = 6'd0;
#0 tiny_check_termination = 1'd0;
#0 tiny_en_input_bound = 1'd0;
#0 tiny_en_state_bound = 1'd0;
#0 grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_ap_start_reg = 1'b0;
#0 grp_set_16_fu_296_ap_start_reg = 1'b0;
#0 grp_set_16_fu_304_ap_start_reg = 1'b0;
#0 grp_set_16_fu_312_ap_start_reg = 1'b0;
#0 grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_ap_start_reg = 1'b0;
#0 grp_set_1613_fu_328_ap_start_reg = 1'b0;
#0 grp_set_1613_fu_336_ap_start_reg = 1'b0;
#0 grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_ap_start_reg = 1'b0;
#0 grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_ap_start_reg = 1'b0;
#0 grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_ap_start_reg = 1'b0;
#0 grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_ap_start_reg = 1'b0;
#0 grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_ap_start_reg = 1'b0;
#0 grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_ap_start_reg = 1'b0;
#0 grp_set_1_fu_385_ap_start_reg = 1'b0;
#0 grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_ap_start_reg = 1'b0;
#0 grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_ap_start_reg = 1'b0;
#0 grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_ap_start_reg = 1'b0;
#0 grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_ap_start_reg = 1'b0;
#0 grp_tiny_solve_fu_424_ap_start_reg = 1'b0;
end

tracking_Kinf_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
Kinf_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Kinf_1_address0),
    .ce0(Kinf_1_ce0),
    .we0(Kinf_1_we0),
    .d0(grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_Kinf_1_d0),
    .q0(Kinf_1_q0)
);

tracking_KinfT_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
KinfT_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(KinfT_1_address0),
    .ce0(KinfT_1_ce0),
    .we0(KinfT_1_we0),
    .d0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_KinfT_1_d0),
    .q0(KinfT_1_q0),
    .address1(grp_tiny_solve_fu_424_KinfT_1_address1),
    .ce1(KinfT_1_ce1),
    .q1(KinfT_1_q1)
);

tracking_Pinf_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
Pinf_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Pinf_1_address0),
    .ce0(Pinf_1_ce0),
    .we0(Pinf_1_we0),
    .d0(grp_set_16_fu_296_a_d0),
    .q0(Pinf_1_q0)
);

tracking_Pinf_data_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
Pinf_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_set_16_fu_296_data_address0),
    .ce0(grp_set_16_fu_296_data_ce0),
    .q0(Pinf_data_q0)
);

tracking_PinfT_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
PinfT_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(PinfT_1_address0),
    .ce0(PinfT_1_ce0),
    .we0(PinfT_1_we0),
    .d0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_PinfT_1_d0),
    .q0(PinfT_1_q0),
    .address1(grp_tiny_solve_fu_424_PinfT_1_address1),
    .ce1(PinfT_1_ce1),
    .q1(PinfT_1_q1)
);

tracking_Quu_inv_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
Quu_inv_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Quu_inv_1_address0),
    .ce0(Quu_inv_1_ce0),
    .we0(Quu_inv_1_we0),
    .d0(grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_Quu_inv_1_d0),
    .q0(Quu_inv_1_q0),
    .address1(grp_tiny_solve_fu_424_Quu_inv_1_address1),
    .ce1(Quu_inv_1_ce1),
    .q1(Quu_inv_1_q1)
);

tracking_PinfT_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
AmBKt_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(AmBKt_1_address0),
    .ce0(AmBKt_1_ce0),
    .we0(AmBKt_1_we0),
    .d0(grp_set_16_fu_304_a_d0),
    .q0(AmBKt_1_q0),
    .address1(grp_tiny_solve_fu_424_AmBKt_1_address1),
    .ce1(AmBKt_1_ce1),
    .q1(AmBKt_1_q1)
);

tracking_AmBKt_data_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
AmBKt_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_set_16_fu_304_data_address0),
    .ce0(grp_set_16_fu_304_data_ce0),
    .q0(AmBKt_data_q0)
);

tracking_coeff_d2p_1_RAM_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
coeff_d2p_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_set_1613_fu_328_a_address0),
    .ce0(grp_set_1613_fu_328_a_ce0),
    .we0(grp_set_1613_fu_328_a_we0),
    .d0(grp_set_1613_fu_328_a_d0)
);

tracking_coeff_d2p_data_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
coeff_d2p_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_set_1613_fu_328_data_address0),
    .ce0(grp_set_1613_fu_328_data_ce0),
    .q0(coeff_d2p_data_q0)
);

tracking_PinfT_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
Adyn_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Adyn_1_address0),
    .ce0(Adyn_1_ce0),
    .we0(Adyn_1_we0),
    .d0(grp_set_16_fu_312_a_d0),
    .q0(Adyn_1_q0),
    .address1(grp_tiny_solve_fu_424_Adyn_1_address1),
    .ce1(Adyn_1_ce1),
    .q1(Adyn_1_q1)
);

tracking_Adyn_data_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
Adyn_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_set_16_fu_312_data_address0),
    .ce0(grp_set_16_fu_312_data_ce0),
    .q0(Adyn_data_q0)
);

tracking_KinfT_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
Bdyn_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Bdyn_1_address0),
    .ce0(Bdyn_1_ce0),
    .we0(Bdyn_1_we0),
    .d0(grp_set_1613_fu_336_a_d0),
    .q0(Bdyn_1_q0),
    .address1(grp_tiny_solve_fu_424_Bdyn_1_address1),
    .ce1(Bdyn_1_ce1),
    .q1(Bdyn_1_q1)
);

tracking_Bdyn_data_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
Bdyn_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_set_1613_fu_336_data_address0),
    .ce0(grp_set_1613_fu_336_data_ce0),
    .q0(Bdyn_data_q0)
);

tracking_KinfT_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
BdynT_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(BdynT_1_address0),
    .ce0(BdynT_1_ce0),
    .we0(BdynT_1_we0),
    .d0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_BdynT_1_d0),
    .q0(BdynT_1_q0),
    .address1(grp_tiny_solve_fu_424_BdynT_1_address1),
    .ce1(BdynT_1_ce1),
    .q1(BdynT_1_q1)
);

tracking_tiny_Q_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
tiny_Q_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(tiny_Q_address0),
    .ce0(tiny_Q_ce0),
    .we0(tiny_Q_we0),
    .d0(grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_tiny_Q_d0),
    .q0(tiny_Q_q0)
);

tracking_u_min_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
u_min_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(u_min_1_address0),
    .ce0(u_min_1_ce0),
    .we0(u_min_1_we0),
    .d0(grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_d0),
    .q0(u_min_1_q0),
    .address1(grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_address1),
    .ce1(u_min_1_ce1),
    .we1(u_min_1_we1),
    .d1(grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_d1)
);

tracking_u_min_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
u_max_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(u_max_1_address0),
    .ce0(u_max_1_ce0),
    .we0(u_max_1_we0),
    .d0(grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_d0),
    .q0(u_max_1_q0),
    .address1(grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_address1),
    .ce1(u_max_1_ce1),
    .we1(u_max_1_we1),
    .d1(grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_d1)
);

tracking_x_min_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
x_min_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(x_min_1_address0),
    .ce0(x_min_1_ce0),
    .we0(x_min_1_we0),
    .d0(grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_d0),
    .q0(x_min_1_q0),
    .address1(grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_address1),
    .ce1(x_min_1_ce1),
    .we1(x_min_1_we1),
    .d1(grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_d1)
);

tracking_x_min_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
x_max_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(x_max_1_address0),
    .ce0(x_max_1_ce0),
    .we0(x_max_1_we0),
    .d0(grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_d0),
    .q0(x_max_1_q0),
    .address1(grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_address1),
    .ce1(x_max_1_ce1),
    .we1(x_max_1_we1),
    .d1(grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_d1)
);

tracking_Xref_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
Xref_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Xref_1_address0),
    .ce0(Xref_1_ce0),
    .we0(Xref_1_we0),
    .d0(grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_Xref_1_d0),
    .q0(Xref_1_q0),
    .address1(grp_tiny_solve_fu_424_Xref_1_address1),
    .ce1(Xref_1_ce1),
    .q1(Xref_1_q1)
);

tracking_x_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
x_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(x_1_address0),
    .ce0(x_1_ce0),
    .we0(x_1_we0),
    .d0(x_1_d0),
    .q0(x_1_q0),
    .address1(x_1_address1),
    .ce1(x_1_ce1),
    .we1(x_1_we1),
    .d1(grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_d1),
    .q1(x_1_q1)
);

tracking_u_1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
u_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(u_1_address0),
    .ce0(u_1_ce0),
    .we0(grp_tiny_solve_fu_424_u_1_we0),
    .d0(grp_tiny_solve_fu_424_u_1_d0),
    .q0(u_1_q0),
    .address1(grp_tiny_solve_fu_424_u_1_address1),
    .ce1(grp_tiny_solve_fu_424_u_1_ce1),
    .q1(u_1_q1)
);

tracking_x0_RAM_1WNR_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
x0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(x0_address0),
    .ce0(x0_ce0),
    .we0(x0_we0),
    .d0(grp_set_1_fu_385_a_d0),
    .q0(x0_q0),
    .address1(grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x0_address1),
    .ce1(x0_ce1),
    .q1(x0_q1)
);

tracking_tracking_Pipeline_VITIS_LOOP_100_1 grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_ap_start),
    .ap_done(grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_ap_done),
    .ap_idle(grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_ap_idle),
    .ap_ready(grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_ap_ready),
    .Kinf_1_address0(grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_Kinf_1_address0),
    .Kinf_1_ce0(grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_Kinf_1_ce0),
    .Kinf_1_we0(grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_Kinf_1_we0),
    .Kinf_1_d0(grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_Kinf_1_d0)
);

tracking_set_16 grp_set_16_fu_296(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_set_16_fu_296_ap_start),
    .ap_done(grp_set_16_fu_296_ap_done),
    .ap_idle(grp_set_16_fu_296_ap_idle),
    .ap_ready(grp_set_16_fu_296_ap_ready),
    .a_address0(grp_set_16_fu_296_a_address0),
    .a_ce0(grp_set_16_fu_296_a_ce0),
    .a_we0(grp_set_16_fu_296_a_we0),
    .a_d0(grp_set_16_fu_296_a_d0),
    .data_address0(grp_set_16_fu_296_data_address0),
    .data_ce0(grp_set_16_fu_296_data_ce0),
    .data_q0(Pinf_data_q0)
);

tracking_set_16 grp_set_16_fu_304(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_set_16_fu_304_ap_start),
    .ap_done(grp_set_16_fu_304_ap_done),
    .ap_idle(grp_set_16_fu_304_ap_idle),
    .ap_ready(grp_set_16_fu_304_ap_ready),
    .a_address0(grp_set_16_fu_304_a_address0),
    .a_ce0(grp_set_16_fu_304_a_ce0),
    .a_we0(grp_set_16_fu_304_a_we0),
    .a_d0(grp_set_16_fu_304_a_d0),
    .data_address0(grp_set_16_fu_304_data_address0),
    .data_ce0(grp_set_16_fu_304_data_ce0),
    .data_q0(AmBKt_data_q0)
);

tracking_set_16 grp_set_16_fu_312(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_set_16_fu_312_ap_start),
    .ap_done(grp_set_16_fu_312_ap_done),
    .ap_idle(grp_set_16_fu_312_ap_idle),
    .ap_ready(grp_set_16_fu_312_ap_ready),
    .a_address0(grp_set_16_fu_312_a_address0),
    .a_ce0(grp_set_16_fu_312_a_ce0),
    .a_we0(grp_set_16_fu_312_a_we0),
    .a_d0(grp_set_16_fu_312_a_d0),
    .data_address0(grp_set_16_fu_312_data_address0),
    .data_ce0(grp_set_16_fu_312_data_ce0),
    .data_q0(Adyn_data_q0)
);

tracking_tracking_Pipeline_VITIS_LOOP_100_110 grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_ap_start),
    .ap_done(grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_ap_done),
    .ap_idle(grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_ap_idle),
    .ap_ready(grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_ap_ready),
    .Quu_inv_1_address0(grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_Quu_inv_1_address0),
    .Quu_inv_1_ce0(grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_Quu_inv_1_ce0),
    .Quu_inv_1_we0(grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_Quu_inv_1_we0),
    .Quu_inv_1_d0(grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_Quu_inv_1_d0)
);

tracking_set_1613 grp_set_1613_fu_328(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_set_1613_fu_328_ap_start),
    .ap_done(grp_set_1613_fu_328_ap_done),
    .ap_idle(grp_set_1613_fu_328_ap_idle),
    .ap_ready(grp_set_1613_fu_328_ap_ready),
    .a_address0(grp_set_1613_fu_328_a_address0),
    .a_ce0(grp_set_1613_fu_328_a_ce0),
    .a_we0(grp_set_1613_fu_328_a_we0),
    .a_d0(grp_set_1613_fu_328_a_d0),
    .data_address0(grp_set_1613_fu_328_data_address0),
    .data_ce0(grp_set_1613_fu_328_data_ce0),
    .data_q0(coeff_d2p_data_q0)
);

tracking_set_1613 grp_set_1613_fu_336(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_set_1613_fu_336_ap_start),
    .ap_done(grp_set_1613_fu_336_ap_done),
    .ap_idle(grp_set_1613_fu_336_ap_idle),
    .ap_ready(grp_set_1613_fu_336_ap_ready),
    .a_address0(grp_set_1613_fu_336_a_address0),
    .a_ce0(grp_set_1613_fu_336_a_ce0),
    .a_we0(grp_set_1613_fu_336_a_we0),
    .a_d0(grp_set_1613_fu_336_a_d0),
    .data_address0(grp_set_1613_fu_336_data_address0),
    .data_ce0(grp_set_1613_fu_336_data_ce0),
    .data_q0(Bdyn_data_q0)
);

tracking_tracking_Pipeline_VITIS_LOOP_100_112 grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_ap_start),
    .ap_done(grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_ap_done),
    .ap_idle(grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_ap_idle),
    .ap_ready(grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_ap_ready),
    .tiny_Q_address0(grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_tiny_Q_address0),
    .tiny_Q_ce0(grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_tiny_Q_ce0),
    .tiny_Q_we0(grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_tiny_Q_we0),
    .tiny_Q_d0(grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_tiny_Q_d0)
);

tracking_tracking_Pipeline_VITIS_LOOP_109_1 grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_ap_start),
    .ap_done(grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_ap_done),
    .ap_idle(grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_ap_idle),
    .ap_ready(grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_ap_ready),
    .u_min_1_address0(grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_address0),
    .u_min_1_ce0(grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_ce0),
    .u_min_1_we0(grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_we0),
    .u_min_1_d0(grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_d0),
    .u_min_1_address1(grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_address1),
    .u_min_1_ce1(grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_ce1),
    .u_min_1_we1(grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_we1),
    .u_min_1_d1(grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_d1)
);

tracking_tracking_Pipeline_VITIS_LOOP_109_113 grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_ap_start),
    .ap_done(grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_ap_done),
    .ap_idle(grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_ap_idle),
    .ap_ready(grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_ap_ready),
    .u_max_1_address0(grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_address0),
    .u_max_1_ce0(grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_ce0),
    .u_max_1_we0(grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_we0),
    .u_max_1_d0(grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_d0),
    .u_max_1_address1(grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_address1),
    .u_max_1_ce1(grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_ce1),
    .u_max_1_we1(grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_we1),
    .u_max_1_d1(grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_d1)
);

tracking_tracking_Pipeline_VITIS_LOOP_109_114 grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_ap_start),
    .ap_done(grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_ap_done),
    .ap_idle(grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_ap_idle),
    .ap_ready(grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_ap_ready),
    .x_min_1_address0(grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_address0),
    .x_min_1_ce0(grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_ce0),
    .x_min_1_we0(grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_we0),
    .x_min_1_d0(grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_d0),
    .x_min_1_address1(grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_address1),
    .x_min_1_ce1(grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_ce1),
    .x_min_1_we1(grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_we1),
    .x_min_1_d1(grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_d1)
);

tracking_tracking_Pipeline_VITIS_LOOP_109_115 grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_ap_start),
    .ap_done(grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_ap_done),
    .ap_idle(grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_ap_idle),
    .ap_ready(grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_ap_ready),
    .x_max_1_address0(grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_address0),
    .x_max_1_ce0(grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_ce0),
    .x_max_1_we0(grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_we0),
    .x_max_1_d0(grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_d0),
    .x_max_1_address1(grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_address1),
    .x_max_1_ce1(grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_ce1),
    .x_max_1_we1(grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_we1),
    .x_max_1_d1(grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_d1)
);

tracking_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2 grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_ap_start),
    .ap_done(grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_ap_done),
    .ap_idle(grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_ap_idle),
    .ap_ready(grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_ap_ready),
    .sub_ln71(sub_ln71_reg_625),
    .Xref_1_address0(grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_Xref_1_address0),
    .Xref_1_ce0(grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_Xref_1_ce0),
    .Xref_1_we0(grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_Xref_1_we0),
    .Xref_1_d0(grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_Xref_1_d0)
);

tracking_set_1 grp_set_1_fu_385(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_set_1_fu_385_ap_start),
    .ap_done(grp_set_1_fu_385_ap_done),
    .ap_idle(grp_set_1_fu_385_ap_idle),
    .ap_ready(grp_set_1_fu_385_ap_ready),
    .a_address0(grp_set_1_fu_385_a_address0),
    .a_ce0(grp_set_1_fu_385_a_ce0),
    .a_we0(grp_set_1_fu_385_a_we0),
    .a_d0(grp_set_1_fu_385_a_d0),
    .observations_address0(grp_set_1_fu_385_observations_address0),
    .observations_ce0(grp_set_1_fu_385_observations_ce0),
    .observations_q0(observations_q0)
);

tracking_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2 grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_ap_start),
    .ap_done(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_ap_done),
    .ap_idle(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_ap_idle),
    .ap_ready(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_ap_ready),
    .Kinf_1_address0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_Kinf_1_address0),
    .Kinf_1_ce0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_Kinf_1_ce0),
    .Kinf_1_q0(Kinf_1_q0),
    .KinfT_1_address0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_KinfT_1_address0),
    .KinfT_1_ce0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_KinfT_1_ce0),
    .KinfT_1_we0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_KinfT_1_we0),
    .KinfT_1_d0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_KinfT_1_d0)
);

tracking_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29 grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_ap_start),
    .ap_done(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_ap_done),
    .ap_idle(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_ap_idle),
    .ap_ready(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_ap_ready),
    .Pinf_1_address0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_Pinf_1_address0),
    .Pinf_1_ce0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_Pinf_1_ce0),
    .Pinf_1_q0(Pinf_1_q0),
    .PinfT_1_address0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_PinfT_1_address0),
    .PinfT_1_ce0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_PinfT_1_ce0),
    .PinfT_1_we0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_PinfT_1_we0),
    .PinfT_1_d0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_PinfT_1_d0)
);

tracking_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211 grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_ap_start),
    .ap_done(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_ap_done),
    .ap_idle(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_ap_idle),
    .ap_ready(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_ap_ready),
    .Bdyn_1_address0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_Bdyn_1_address0),
    .Bdyn_1_ce0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_Bdyn_1_ce0),
    .Bdyn_1_q0(Bdyn_1_q0),
    .BdynT_1_address0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_BdynT_1_address0),
    .BdynT_1_ce0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_BdynT_1_ce0),
    .BdynT_1_we0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_BdynT_1_we0),
    .BdynT_1_d0(grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_BdynT_1_d0)
);

tracking_tracking_Pipeline_VITIS_LOOP_93_1 grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_ap_start),
    .ap_done(grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_ap_done),
    .ap_idle(grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_ap_idle),
    .ap_ready(grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_ap_ready),
    .x0_address0(grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x0_address0),
    .x0_ce0(grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x0_ce0),
    .x0_q0(x0_q0),
    .x0_address1(grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x0_address1),
    .x0_ce1(grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x0_ce1),
    .x0_q1(x0_q1),
    .x_1_address0(grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_address0),
    .x_1_ce0(grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_ce0),
    .x_1_we0(grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_we0),
    .x_1_d0(grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_d0),
    .x_1_address1(grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_address1),
    .x_1_ce1(grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_ce1),
    .x_1_we1(grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_we1),
    .x_1_d1(grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_d1)
);

tracking_tiny_solve grp_tiny_solve_fu_424(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_tiny_solve_fu_424_ap_start),
    .ap_done(grp_tiny_solve_fu_424_ap_done),
    .ap_idle(grp_tiny_solve_fu_424_ap_idle),
    .ap_ready(grp_tiny_solve_fu_424_ap_ready),
    .tiny_iter_i(tiny_iter),
    .tiny_iter_o(grp_tiny_solve_fu_424_tiny_iter_o),
    .tiny_iter_o_ap_vld(grp_tiny_solve_fu_424_tiny_iter_o_ap_vld),
    .Kinf_1_address0(grp_tiny_solve_fu_424_Kinf_1_address0),
    .Kinf_1_ce0(grp_tiny_solve_fu_424_Kinf_1_ce0),
    .Kinf_1_q0(Kinf_1_q0),
    .x_1_address0(grp_tiny_solve_fu_424_x_1_address0),
    .x_1_ce0(grp_tiny_solve_fu_424_x_1_ce0),
    .x_1_we0(grp_tiny_solve_fu_424_x_1_we0),
    .x_1_d0(grp_tiny_solve_fu_424_x_1_d0),
    .x_1_q0(x_1_q0),
    .x_1_address1(grp_tiny_solve_fu_424_x_1_address1),
    .x_1_ce1(grp_tiny_solve_fu_424_x_1_ce1),
    .x_1_q1(x_1_q1),
    .u_1_address0(grp_tiny_solve_fu_424_u_1_address0),
    .u_1_ce0(grp_tiny_solve_fu_424_u_1_ce0),
    .u_1_we0(grp_tiny_solve_fu_424_u_1_we0),
    .u_1_d0(grp_tiny_solve_fu_424_u_1_d0),
    .u_1_q0(u_1_q0),
    .u_1_address1(grp_tiny_solve_fu_424_u_1_address1),
    .u_1_ce1(grp_tiny_solve_fu_424_u_1_ce1),
    .u_1_q1(u_1_q1),
    .Adyn_1_address0(grp_tiny_solve_fu_424_Adyn_1_address0),
    .Adyn_1_ce0(grp_tiny_solve_fu_424_Adyn_1_ce0),
    .Adyn_1_q0(Adyn_1_q0),
    .Adyn_1_address1(grp_tiny_solve_fu_424_Adyn_1_address1),
    .Adyn_1_ce1(grp_tiny_solve_fu_424_Adyn_1_ce1),
    .Adyn_1_q1(Adyn_1_q1),
    .Bdyn_1_address0(grp_tiny_solve_fu_424_Bdyn_1_address0),
    .Bdyn_1_ce0(grp_tiny_solve_fu_424_Bdyn_1_ce0),
    .Bdyn_1_q0(Bdyn_1_q0),
    .Bdyn_1_address1(grp_tiny_solve_fu_424_Bdyn_1_address1),
    .Bdyn_1_ce1(grp_tiny_solve_fu_424_Bdyn_1_ce1),
    .Bdyn_1_q1(Bdyn_1_q1),
    .tiny_en_input_bound(tiny_en_input_bound),
    .u_min_1_address0(grp_tiny_solve_fu_424_u_min_1_address0),
    .u_min_1_ce0(grp_tiny_solve_fu_424_u_min_1_ce0),
    .u_min_1_q0(u_min_1_q0),
    .u_max_1_address0(grp_tiny_solve_fu_424_u_max_1_address0),
    .u_max_1_ce0(grp_tiny_solve_fu_424_u_max_1_ce0),
    .u_max_1_q0(u_max_1_q0),
    .tiny_en_state_bound(tiny_en_state_bound),
    .x_min_1_address0(grp_tiny_solve_fu_424_x_min_1_address0),
    .x_min_1_ce0(grp_tiny_solve_fu_424_x_min_1_ce0),
    .x_min_1_q0(x_min_1_q0),
    .x_max_1_address0(grp_tiny_solve_fu_424_x_max_1_address0),
    .x_max_1_ce0(grp_tiny_solve_fu_424_x_max_1_ce0),
    .x_max_1_q0(x_max_1_q0),
    .tiny_rho(tiny_rho),
    .Xref_1_address0(grp_tiny_solve_fu_424_Xref_1_address0),
    .Xref_1_ce0(grp_tiny_solve_fu_424_Xref_1_ce0),
    .Xref_1_q0(Xref_1_q0),
    .Xref_1_address1(grp_tiny_solve_fu_424_Xref_1_address1),
    .Xref_1_ce1(grp_tiny_solve_fu_424_Xref_1_ce1),
    .Xref_1_q1(Xref_1_q1),
    .PinfT_1_address0(grp_tiny_solve_fu_424_PinfT_1_address0),
    .PinfT_1_ce0(grp_tiny_solve_fu_424_PinfT_1_ce0),
    .PinfT_1_q0(PinfT_1_q0),
    .PinfT_1_address1(grp_tiny_solve_fu_424_PinfT_1_address1),
    .PinfT_1_ce1(grp_tiny_solve_fu_424_PinfT_1_ce1),
    .PinfT_1_q1(PinfT_1_q1),
    .tiny_Q_address0(grp_tiny_solve_fu_424_tiny_Q_address0),
    .tiny_Q_ce0(grp_tiny_solve_fu_424_tiny_Q_ce0),
    .tiny_Q_q0(tiny_Q_q0),
    .tiny_max_iter(tiny_max_iter),
    .BdynT_1_address0(grp_tiny_solve_fu_424_BdynT_1_address0),
    .BdynT_1_ce0(grp_tiny_solve_fu_424_BdynT_1_ce0),
    .BdynT_1_q0(BdynT_1_q0),
    .BdynT_1_address1(grp_tiny_solve_fu_424_BdynT_1_address1),
    .BdynT_1_ce1(grp_tiny_solve_fu_424_BdynT_1_ce1),
    .BdynT_1_q1(BdynT_1_q1),
    .Quu_inv_1_address0(grp_tiny_solve_fu_424_Quu_inv_1_address0),
    .Quu_inv_1_ce0(grp_tiny_solve_fu_424_Quu_inv_1_ce0),
    .Quu_inv_1_q0(Quu_inv_1_q0),
    .Quu_inv_1_address1(grp_tiny_solve_fu_424_Quu_inv_1_address1),
    .Quu_inv_1_ce1(grp_tiny_solve_fu_424_Quu_inv_1_ce1),
    .Quu_inv_1_q1(Quu_inv_1_q1),
    .AmBKt_1_address0(grp_tiny_solve_fu_424_AmBKt_1_address0),
    .AmBKt_1_ce0(grp_tiny_solve_fu_424_AmBKt_1_ce0),
    .AmBKt_1_q0(AmBKt_1_q0),
    .AmBKt_1_address1(grp_tiny_solve_fu_424_AmBKt_1_address1),
    .AmBKt_1_ce1(grp_tiny_solve_fu_424_AmBKt_1_ce1),
    .AmBKt_1_q1(AmBKt_1_q1),
    .KinfT_1_address0(grp_tiny_solve_fu_424_KinfT_1_address0),
    .KinfT_1_ce0(grp_tiny_solve_fu_424_KinfT_1_ce0),
    .KinfT_1_q0(KinfT_1_q0),
    .KinfT_1_address1(grp_tiny_solve_fu_424_KinfT_1_address1),
    .KinfT_1_ce1(grp_tiny_solve_fu_424_KinfT_1_ce1),
    .KinfT_1_q1(KinfT_1_q1),
    .tiny_check_termination(tiny_check_termination),
    .tiny_abs_pri_tol(tiny_abs_pri_tol),
    .tiny_abs_dua_tol(tiny_abs_dua_tol)
);

tracking_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .inputs_address0(inputs_address0),
    .inputs_ce0(inputs_ce0),
    .inputs_we0(inputs_we0),
    .inputs_d0(inputs_d0),
    .timestep(timestep),
    .observations_address0(grp_set_1_fu_385_observations_address0),
    .observations_ce0(grp_set_1_fu_385_observations_ce0),
    .observations_q0(observations_q0),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_set_1613_fu_328_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_set_1613_fu_328_ap_start_reg <= 1'b1;
        end else if ((grp_set_1613_fu_328_ap_ready == 1'b1)) begin
            grp_set_1613_fu_328_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_set_1613_fu_336_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_set_1613_fu_336_ap_start_reg <= 1'b1;
        end else if ((grp_set_1613_fu_336_ap_ready == 1'b1)) begin
            grp_set_1613_fu_336_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_set_16_fu_296_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_set_16_fu_296_ap_start_reg <= 1'b1;
        end else if ((grp_set_16_fu_296_ap_ready == 1'b1)) begin
            grp_set_16_fu_296_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_set_16_fu_304_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_set_16_fu_304_ap_start_reg <= 1'b1;
        end else if ((grp_set_16_fu_304_ap_ready == 1'b1)) begin
            grp_set_16_fu_304_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_set_16_fu_312_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_set_16_fu_312_ap_start_reg <= 1'b1;
        end else if ((grp_set_16_fu_312_ap_ready == 1'b1)) begin
            grp_set_16_fu_312_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_set_1_fu_385_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_set_1_fu_385_ap_start_reg <= 1'b1;
        end else if ((grp_set_1_fu_385_ap_ready == 1'b1)) begin
            grp_set_1_fu_385_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_tiny_solve_fu_424_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_tiny_solve_fu_424_ap_start_reg <= 1'b1;
        end else if ((grp_tiny_solve_fu_424_ap_ready == 1'b1)) begin
            grp_tiny_solve_fu_424_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_ap_start_reg <= 1'b1;
        end else if ((grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_ap_ready == 1'b1)) begin
            grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_ap_start_reg <= 1'b1;
        end else if ((grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_ap_ready == 1'b1)) begin
            grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_ap_start_reg <= 1'b1;
        end else if ((grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_ap_ready == 1'b1)) begin
            grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_ap_start_reg <= 1'b1;
        end else if ((grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_ap_ready == 1'b1)) begin
            grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_ap_start_reg <= 1'b1;
        end else if ((grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_ap_ready == 1'b1)) begin
            grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_ap_start_reg <= 1'b1;
        end else if ((grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_ap_ready == 1'b1)) begin
            grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_ap_start_reg <= 1'b1;
        end else if ((grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_ap_ready == 1'b1)) begin
            grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_ap_start_reg <= 1'b1;
        end else if ((grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_ap_ready == 1'b1)) begin
            grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_ap_start_reg <= 1'b1;
        end else if ((grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_ap_ready == 1'b1)) begin
            grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_ap_start_reg <= 1'b1;
        end else if ((grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_ap_ready == 1'b1)) begin
            grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_ap_start_reg <= 1'b1;
        end else if ((grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_ap_ready == 1'b1)) begin
            grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_ap_start_reg <= 1'b1;
        end else if ((grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_ap_ready == 1'b1)) begin
            grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tiny_iter <= 32'd0;
    end else if (((grp_tiny_solve_fu_424_tiny_iter_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        tiny_iter <= grp_tiny_solve_fu_424_tiny_iter_o;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sub_ln71_reg_625[11 : 2] <= sub_ln71_fu_598_p2[11 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tiny_abs_dua_tol[0] <= 1'b1;
tiny_abs_dua_tol[1] <= 1'b1;
tiny_abs_dua_tol[2] <= 1'b1;
tiny_abs_dua_tol[3] <= 1'b1;
tiny_abs_dua_tol[5] <= 1'b1;
tiny_abs_dua_tol[6] <= 1'b1;
tiny_abs_dua_tol[9] <= 1'b1;
tiny_abs_dua_tol[12] <= 1'b1;
tiny_abs_dua_tol[16] <= 1'b1;
tiny_abs_dua_tol[17] <= 1'b1;
tiny_abs_dua_tol[23] <= 1'b1;
tiny_abs_dua_tol[25] <= 1'b1;
tiny_abs_dua_tol[27] <= 1'b1;
tiny_abs_dua_tol[28] <= 1'b1;
tiny_abs_dua_tol[29] <= 1'b1;
        tiny_abs_pri_tol[0] <= 1'b1;
tiny_abs_pri_tol[1] <= 1'b1;
tiny_abs_pri_tol[2] <= 1'b1;
tiny_abs_pri_tol[3] <= 1'b1;
tiny_abs_pri_tol[5] <= 1'b1;
tiny_abs_pri_tol[6] <= 1'b1;
tiny_abs_pri_tol[9] <= 1'b1;
tiny_abs_pri_tol[12] <= 1'b1;
tiny_abs_pri_tol[16] <= 1'b1;
tiny_abs_pri_tol[17] <= 1'b1;
tiny_abs_pri_tol[23] <= 1'b1;
tiny_abs_pri_tol[25] <= 1'b1;
tiny_abs_pri_tol[27] <= 1'b1;
tiny_abs_pri_tol[28] <= 1'b1;
tiny_abs_pri_tol[29] <= 1'b1;
        tiny_check_termination <= 1'd1;
        tiny_en_input_bound <= 1'd1;
        tiny_en_state_bound <= 1'd1;
        tiny_max_iter[2] <= 1'b1;
tiny_max_iter[5] <= 1'b1;
        tiny_rho[21] <= 1'b1;
tiny_rho[23] <= 1'b1;
tiny_rho[30] <= 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Adyn_1_address0 = grp_tiny_solve_fu_424_Adyn_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Adyn_1_address0 = grp_set_16_fu_312_a_address0;
    end else begin
        Adyn_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Adyn_1_ce0 = grp_tiny_solve_fu_424_Adyn_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Adyn_1_ce0 = grp_set_16_fu_312_a_ce0;
    end else begin
        Adyn_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Adyn_1_ce1 = grp_tiny_solve_fu_424_Adyn_1_ce1;
    end else begin
        Adyn_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Adyn_1_we0 = grp_set_16_fu_312_a_we0;
    end else begin
        Adyn_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        AmBKt_1_address0 = grp_tiny_solve_fu_424_AmBKt_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        AmBKt_1_address0 = grp_set_16_fu_304_a_address0;
    end else begin
        AmBKt_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        AmBKt_1_ce0 = grp_tiny_solve_fu_424_AmBKt_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        AmBKt_1_ce0 = grp_set_16_fu_304_a_ce0;
    end else begin
        AmBKt_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        AmBKt_1_ce1 = grp_tiny_solve_fu_424_AmBKt_1_ce1;
    end else begin
        AmBKt_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        AmBKt_1_we0 = grp_set_16_fu_304_a_we0;
    end else begin
        AmBKt_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        BdynT_1_address0 = grp_tiny_solve_fu_424_BdynT_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        BdynT_1_address0 = grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_BdynT_1_address0;
    end else begin
        BdynT_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        BdynT_1_ce0 = grp_tiny_solve_fu_424_BdynT_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        BdynT_1_ce0 = grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_BdynT_1_ce0;
    end else begin
        BdynT_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        BdynT_1_ce1 = grp_tiny_solve_fu_424_BdynT_1_ce1;
    end else begin
        BdynT_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        BdynT_1_we0 = grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_BdynT_1_we0;
    end else begin
        BdynT_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Bdyn_1_address0 = grp_tiny_solve_fu_424_Bdyn_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Bdyn_1_address0 = grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_Bdyn_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Bdyn_1_address0 = grp_set_1613_fu_336_a_address0;
    end else begin
        Bdyn_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Bdyn_1_ce0 = grp_tiny_solve_fu_424_Bdyn_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Bdyn_1_ce0 = grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_Bdyn_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Bdyn_1_ce0 = grp_set_1613_fu_336_a_ce0;
    end else begin
        Bdyn_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Bdyn_1_ce1 = grp_tiny_solve_fu_424_Bdyn_1_ce1;
    end else begin
        Bdyn_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Bdyn_1_we0 = grp_set_1613_fu_336_a_we0;
    end else begin
        Bdyn_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        KinfT_1_address0 = grp_tiny_solve_fu_424_KinfT_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        KinfT_1_address0 = grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_KinfT_1_address0;
    end else begin
        KinfT_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        KinfT_1_ce0 = grp_tiny_solve_fu_424_KinfT_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        KinfT_1_ce0 = grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_KinfT_1_ce0;
    end else begin
        KinfT_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        KinfT_1_ce1 = grp_tiny_solve_fu_424_KinfT_1_ce1;
    end else begin
        KinfT_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        KinfT_1_we0 = grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_KinfT_1_we0;
    end else begin
        KinfT_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Kinf_1_address0 = grp_tiny_solve_fu_424_Kinf_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Kinf_1_address0 = grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_Kinf_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Kinf_1_address0 = grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_Kinf_1_address0;
    end else begin
        Kinf_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Kinf_1_ce0 = grp_tiny_solve_fu_424_Kinf_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Kinf_1_ce0 = grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_Kinf_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Kinf_1_ce0 = grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_Kinf_1_ce0;
    end else begin
        Kinf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Kinf_1_we0 = grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_Kinf_1_we0;
    end else begin
        Kinf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        PinfT_1_address0 = grp_tiny_solve_fu_424_PinfT_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        PinfT_1_address0 = grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_PinfT_1_address0;
    end else begin
        PinfT_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        PinfT_1_ce0 = grp_tiny_solve_fu_424_PinfT_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        PinfT_1_ce0 = grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_PinfT_1_ce0;
    end else begin
        PinfT_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        PinfT_1_ce1 = grp_tiny_solve_fu_424_PinfT_1_ce1;
    end else begin
        PinfT_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        PinfT_1_we0 = grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_PinfT_1_we0;
    end else begin
        PinfT_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Pinf_1_address0 = grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_Pinf_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Pinf_1_address0 = grp_set_16_fu_296_a_address0;
    end else begin
        Pinf_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Pinf_1_ce0 = grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_Pinf_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Pinf_1_ce0 = grp_set_16_fu_296_a_ce0;
    end else begin
        Pinf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Pinf_1_we0 = grp_set_16_fu_296_a_we0;
    end else begin
        Pinf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Quu_inv_1_address0 = grp_tiny_solve_fu_424_Quu_inv_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Quu_inv_1_address0 = grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_Quu_inv_1_address0;
    end else begin
        Quu_inv_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Quu_inv_1_ce0 = grp_tiny_solve_fu_424_Quu_inv_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Quu_inv_1_ce0 = grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_Quu_inv_1_ce0;
    end else begin
        Quu_inv_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Quu_inv_1_ce1 = grp_tiny_solve_fu_424_Quu_inv_1_ce1;
    end else begin
        Quu_inv_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Quu_inv_1_we0 = grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_Quu_inv_1_we0;
    end else begin
        Quu_inv_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Xref_1_address0 = grp_tiny_solve_fu_424_Xref_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Xref_1_address0 = grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_Xref_1_address0;
    end else begin
        Xref_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Xref_1_ce0 = grp_tiny_solve_fu_424_Xref_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Xref_1_ce0 = grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_Xref_1_ce0;
    end else begin
        Xref_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Xref_1_ce1 = grp_tiny_solve_fu_424_Xref_1_ce1;
    end else begin
        Xref_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Xref_1_we0 = grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_Xref_1_we0;
    end else begin
        Xref_1_we0 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_on_subcall_done)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_tiny_solve_fu_424_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        inputs_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        inputs_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        inputs_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        inputs_address0 = 64'd0;
    end else begin
        inputs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        inputs_ce0 = 1'b1;
    end else begin
        inputs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        inputs_d0 = bitcast_ln103_fu_620_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        inputs_d0 = bitcast_ln102_fu_615_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        inputs_d0 = bitcast_ln101_fu_610_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        inputs_d0 = bitcast_ln100_fu_605_p1;
    end else begin
        inputs_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        inputs_we0 = 1'b1;
    end else begin
        inputs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tiny_Q_address0 = grp_tiny_solve_fu_424_tiny_Q_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tiny_Q_address0 = grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_tiny_Q_address0;
    end else begin
        tiny_Q_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tiny_Q_ce0 = grp_tiny_solve_fu_424_tiny_Q_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tiny_Q_ce0 = grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_tiny_Q_ce0;
    end else begin
        tiny_Q_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tiny_Q_we0 = grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_tiny_Q_we0;
    end else begin
        tiny_Q_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        u_1_address0 = 6'd3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        u_1_address0 = 6'd2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        u_1_address0 = 6'd1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        u_1_address0 = 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        u_1_address0 = grp_tiny_solve_fu_424_u_1_address0;
    end else begin
        u_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        u_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        u_1_ce0 = grp_tiny_solve_fu_424_u_1_ce0;
    end else begin
        u_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        u_max_1_address0 = grp_tiny_solve_fu_424_u_max_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        u_max_1_address0 = grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_address0;
    end else begin
        u_max_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        u_max_1_ce0 = grp_tiny_solve_fu_424_u_max_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        u_max_1_ce0 = grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_ce0;
    end else begin
        u_max_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        u_max_1_ce1 = grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_ce1;
    end else begin
        u_max_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        u_max_1_we0 = grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_we0;
    end else begin
        u_max_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        u_max_1_we1 = grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_u_max_1_we1;
    end else begin
        u_max_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        u_min_1_address0 = grp_tiny_solve_fu_424_u_min_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        u_min_1_address0 = grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_address0;
    end else begin
        u_min_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        u_min_1_ce0 = grp_tiny_solve_fu_424_u_min_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        u_min_1_ce0 = grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_ce0;
    end else begin
        u_min_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        u_min_1_ce1 = grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_ce1;
    end else begin
        u_min_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        u_min_1_we0 = grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_we0;
    end else begin
        u_min_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        u_min_1_we1 = grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_u_min_1_we1;
    end else begin
        u_min_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x0_address0 = grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x0_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x0_address0 = grp_set_1_fu_385_a_address0;
    end else begin
        x0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x0_ce0 = grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x0_ce0 = grp_set_1_fu_385_a_ce0;
    end else begin
        x0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x0_ce1 = grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x0_ce1;
    end else begin
        x0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x0_we0 = grp_set_1_fu_385_a_we0;
    end else begin
        x0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_1_address0 = grp_tiny_solve_fu_424_x_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        x_1_address0 = grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_address0;
    end else begin
        x_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_1_address1 = grp_tiny_solve_fu_424_x_1_address1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        x_1_address1 = grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_address1;
    end else begin
        x_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_1_ce0 = grp_tiny_solve_fu_424_x_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        x_1_ce0 = grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_ce0;
    end else begin
        x_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_1_ce1 = grp_tiny_solve_fu_424_x_1_ce1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        x_1_ce1 = grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_ce1;
    end else begin
        x_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_1_d0 = grp_tiny_solve_fu_424_x_1_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        x_1_d0 = grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_d0;
    end else begin
        x_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_1_we0 = grp_tiny_solve_fu_424_x_1_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        x_1_we0 = grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_we0;
    end else begin
        x_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_1_we1 = grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_x_1_we1;
    end else begin
        x_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_max_1_address0 = grp_tiny_solve_fu_424_x_max_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_max_1_address0 = grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_address0;
    end else begin
        x_max_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_max_1_ce0 = grp_tiny_solve_fu_424_x_max_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_max_1_ce0 = grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_ce0;
    end else begin
        x_max_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_max_1_ce1 = grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_ce1;
    end else begin
        x_max_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_max_1_we0 = grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_we0;
    end else begin
        x_max_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_max_1_we1 = grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_x_max_1_we1;
    end else begin
        x_max_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_min_1_address0 = grp_tiny_solve_fu_424_x_min_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_min_1_address0 = grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_address0;
    end else begin
        x_min_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_min_1_ce0 = grp_tiny_solve_fu_424_x_min_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_min_1_ce0 = grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_ce0;
    end else begin
        x_min_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_min_1_ce1 = grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_ce1;
    end else begin
        x_min_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_min_1_we0 = grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_we0;
    end else begin
        x_min_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_min_1_we1 = grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_x_min_1_we1;
    end else begin
        x_min_1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_tiny_solve_fu_424_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_set_1_fu_385_ap_done == 1'b0) | (grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_ap_done == 1'b0) | (grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_ap_done == 1'b0) | (grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_ap_done == 1'b0) | (grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_ap_done == 1'b0) | (grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_ap_done == 1'b0) | (grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_ap_done == 1'b0) | (grp_set_1613_fu_336_ap_done == 1'b0) | (grp_set_1613_fu_328_ap_done == 1'b0) | (grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_ap_done == 1'b0) | (grp_set_16_fu_312_ap_done == 1'b0) | (grp_set_16_fu_304_ap_done == 1'b0) | (grp_set_16_fu_296_ap_done == 1'b0) | (grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_ap_done == 1'b0) | (grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_ap_done == 1'b0) | (grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_ap_done == 1'b0) | (grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_ap_done == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln100_fu_605_p1 = u_1_q0;

assign bitcast_ln101_fu_610_p1 = u_1_q0;

assign bitcast_ln102_fu_615_p1 = u_1_q0;

assign bitcast_ln103_fu_620_p1 = u_1_q0;

assign grp_set_1613_fu_328_ap_start = grp_set_1613_fu_328_ap_start_reg;

assign grp_set_1613_fu_336_ap_start = grp_set_1613_fu_336_ap_start_reg;

assign grp_set_16_fu_296_ap_start = grp_set_16_fu_296_ap_start_reg;

assign grp_set_16_fu_304_ap_start = grp_set_16_fu_304_ap_start_reg;

assign grp_set_16_fu_312_ap_start = grp_set_16_fu_312_ap_start_reg;

assign grp_set_1_fu_385_ap_start = grp_set_1_fu_385_ap_start_reg;

assign grp_tiny_solve_fu_424_ap_start = grp_tiny_solve_fu_424_ap_start_reg;

assign grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_ap_start = grp_tracking_Pipeline_VITIS_LOOP_100_110_fu_320_ap_start_reg;

assign grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_ap_start = grp_tracking_Pipeline_VITIS_LOOP_100_112_fu_344_ap_start_reg;

assign grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_ap_start = grp_tracking_Pipeline_VITIS_LOOP_100_1_fu_288_ap_start_reg;

assign grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_ap_start = grp_tracking_Pipeline_VITIS_LOOP_109_113_fu_358_ap_start_reg;

assign grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_ap_start = grp_tracking_Pipeline_VITIS_LOOP_109_114_fu_364_ap_start_reg;

assign grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_ap_start = grp_tracking_Pipeline_VITIS_LOOP_109_115_fu_370_ap_start_reg;

assign grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_ap_start = grp_tracking_Pipeline_VITIS_LOOP_109_1_fu_352_ap_start_reg;

assign grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_ap_start = grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_211_fu_409_ap_start_reg;

assign grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_ap_start = grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_29_fu_401_ap_start_reg;

assign grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_ap_start = grp_tracking_Pipeline_VITIS_LOOP_185_1_VITIS_LOOP_186_2_fu_393_ap_start_reg;

assign grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_ap_start = grp_tracking_Pipeline_VITIS_LOOP_210_1_VITIS_LOOP_211_2_fu_376_ap_start_reg;

assign grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_ap_start = grp_tracking_Pipeline_VITIS_LOOP_93_1_fu_417_ap_start_reg;

assign shl_ln1_fu_578_p3 = {{trunc_ln71_fu_574_p1}, {4'd0}};

assign shl_ln71_1_fu_590_p3 = {{trunc_ln71_1_fu_586_p1}, {2'd0}};

assign sub_ln71_fu_598_p2 = (shl_ln1_fu_578_p3 - shl_ln71_1_fu_590_p3);

assign trunc_ln71_1_fu_586_p1 = timestep[9:0];

assign trunc_ln71_fu_574_p1 = timestep[7:0];

always @ (posedge ap_clk) begin
    tiny_rho[20:0] <= 21'b000000000000000000000;
    tiny_rho[22:22] <= 1'b0;
    tiny_rho[29:24] <= 6'b000000;
    tiny_rho[31] <= 1'b0;
    tiny_abs_pri_tol[4] <= 1'b0;
    tiny_abs_pri_tol[8:7] <= 2'b00;
    tiny_abs_pri_tol[11:10] <= 2'b00;
    tiny_abs_pri_tol[15:13] <= 3'b000;
    tiny_abs_pri_tol[22:18] <= 5'b00000;
    tiny_abs_pri_tol[24:24] <= 1'b0;
    tiny_abs_pri_tol[26:26] <= 1'b0;
    tiny_abs_pri_tol[31:30] <= 2'b00;
    tiny_abs_dua_tol[4] <= 1'b0;
    tiny_abs_dua_tol[8:7] <= 2'b00;
    tiny_abs_dua_tol[11:10] <= 2'b00;
    tiny_abs_dua_tol[15:13] <= 3'b000;
    tiny_abs_dua_tol[22:18] <= 5'b00000;
    tiny_abs_dua_tol[24:24] <= 1'b0;
    tiny_abs_dua_tol[26:26] <= 1'b0;
    tiny_abs_dua_tol[31:30] <= 2'b00;
    tiny_max_iter[1:0] <= 2'b00;
    tiny_max_iter[4:3] <= 2'b00;
    sub_ln71_reg_625[1:0] <= 2'b00;
end

endmodule //tracking
