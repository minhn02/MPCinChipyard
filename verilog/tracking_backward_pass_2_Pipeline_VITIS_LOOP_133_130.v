// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_backward_pass_2_Pipeline_VITIS_LOOP_133_130 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_1_load,
        r_1_load_1,
        r_1_load_2,
        r_1_load_3,
        KinfT_1_address0,
        KinfT_1_ce0,
        KinfT_1_q0,
        KinfT_1_address1,
        KinfT_1_ce1,
        KinfT_1_q1,
        tiny_x2_address0,
        tiny_x2_ce0,
        tiny_x2_we0,
        tiny_x2_d0,
        grp_fu_610_p_din0,
        grp_fu_610_p_din1,
        grp_fu_610_p_opcode,
        grp_fu_610_p_dout0,
        grp_fu_610_p_ce,
        grp_fu_614_p_din0,
        grp_fu_614_p_din1,
        grp_fu_614_p_opcode,
        grp_fu_614_p_dout0,
        grp_fu_614_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] r_1_load;
input  [31:0] r_1_load_1;
input  [31:0] r_1_load_2;
input  [31:0] r_1_load_3;
output  [5:0] KinfT_1_address0;
output   KinfT_1_ce0;
input  [31:0] KinfT_1_q0;
output  [5:0] KinfT_1_address1;
output   KinfT_1_ce1;
input  [31:0] KinfT_1_q1;
output  [3:0] tiny_x2_address0;
output   tiny_x2_ce0;
output   tiny_x2_we0;
output  [31:0] tiny_x2_d0;
output  [31:0] grp_fu_610_p_din0;
output  [31:0] grp_fu_610_p_din1;
output  [0:0] grp_fu_610_p_opcode;
input  [31:0] grp_fu_610_p_dout0;
output   grp_fu_610_p_ce;
output  [31:0] grp_fu_614_p_din0;
output  [31:0] grp_fu_614_p_din1;
output  [0:0] grp_fu_614_p_opcode;
input  [31:0] grp_fu_614_p_dout0;
output   grp_fu_614_p_ce;

reg ap_idle;
reg[5:0] KinfT_1_address0;
reg KinfT_1_ce0;
reg[5:0] KinfT_1_address1;
reg KinfT_1_ce1;
reg tiny_x2_ce0;
reg tiny_x2_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln133_reg_268;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_55_reg_263;
reg   [3:0] i_55_reg_263_pp0_iter1_reg;
reg   [3:0] i_55_reg_263_pp0_iter2_reg;
wire   [0:0] icmp_ln133_fu_171_p2;
reg   [0:0] icmp_ln133_reg_268_pp0_iter1_reg;
wire   [5:0] tmp_s_fu_183_p3;
reg   [5:0] tmp_s_reg_272;
wire   [31:0] grp_fu_147_p2;
reg   [31:0] mul9_i2_reg_288;
wire   [31:0] grp_fu_152_p2;
reg   [31:0] mul9_i2_1_reg_293;
reg   [31:0] mul9_i2_2_reg_308;
reg   [31:0] mul9_i2_3_reg_313;
reg   [31:0] mul9_i2_3_reg_313_pp0_iter2_reg;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln136_fu_191_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln136_24_fu_202_p1;
wire   [63:0] zext_ln136_25_fu_217_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln136_26_fu_227_p1;
wire   [63:0] i_64_cast22_fu_232_p1;
reg   [3:0] i_fu_52;
wire   [3:0] add_ln133_fu_177_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_55;
reg   [31:0] grp_fu_134_p0;
reg   [31:0] grp_fu_134_p1;
reg   [31:0] grp_fu_140_p0;
reg   [31:0] grp_fu_140_p1;
reg   [31:0] grp_fu_147_p1;
reg   [31:0] grp_fu_152_p1;
wire   [5:0] or_ln136_fu_196_p2;
wire   [5:0] or_ln136_5_fu_212_p2;
wire   [5:0] or_ln136_6_fu_222_p2;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage1_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage0;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to3;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U331(
    .din0(KinfT_1_q1),
    .din1(grp_fu_147_p1),
    .dout(grp_fu_147_p2)
);

tracking_fmul_32ns_32ns_32_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_max_dsp_1_U332(
    .din0(KinfT_1_q0),
    .din1(grp_fu_152_p1),
    .dout(grp_fu_152_p2)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln133_fu_171_p2 == 1'd0))) begin
            i_fu_52 <= add_ln133_fu_177_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_55_reg_263 <= ap_sig_allocacmp_i_55;
        i_55_reg_263_pp0_iter1_reg <= i_55_reg_263;
        i_55_reg_263_pp0_iter2_reg <= i_55_reg_263_pp0_iter1_reg;
        icmp_ln133_reg_268 <= icmp_ln133_fu_171_p2;
        icmp_ln133_reg_268_pp0_iter1_reg <= icmp_ln133_reg_268;
        mul9_i2_3_reg_313_pp0_iter2_reg <= mul9_i2_3_reg_313;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_268 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul9_i2_1_reg_293 <= grp_fu_152_p2;
        mul9_i2_reg_288 <= grp_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul9_i2_2_reg_308 <= grp_fu_147_p2;
        mul9_i2_3_reg_313 <= grp_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln133_fu_171_p2 == 1'd0))) begin
        tmp_s_reg_272[5 : 2] <= tmp_s_fu_183_p3[5 : 2];
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            KinfT_1_address0 = zext_ln136_26_fu_227_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            KinfT_1_address0 = zext_ln136_24_fu_202_p1;
        end else begin
            KinfT_1_address0 = 'bx;
        end
    end else begin
        KinfT_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            KinfT_1_address1 = zext_ln136_25_fu_217_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            KinfT_1_address1 = zext_ln136_fu_191_p1;
        end else begin
            KinfT_1_address1 = 'bx;
        end
    end else begin
        KinfT_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        KinfT_1_ce0 = 1'b1;
    end else begin
        KinfT_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        KinfT_1_ce1 = 1'b1;
    end else begin
        KinfT_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln133_reg_268 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln133_reg_268_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_55 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_55 = i_fu_52;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_134_p0 = grp_fu_610_p_dout0;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_134_p0 = mul9_i2_reg_288;
        end else begin
            grp_fu_134_p0 = 'bx;
        end
    end else begin
        grp_fu_134_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_134_p1 = mul9_i2_1_reg_293;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_134_p1 = 32'd0;
        end else begin
            grp_fu_134_p1 = 'bx;
        end
    end else begin
        grp_fu_134_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_140_p0 = grp_fu_614_p_dout0;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_140_p0 = grp_fu_610_p_dout0;
        end else begin
            grp_fu_140_p0 = 'bx;
        end
    end else begin
        grp_fu_140_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_140_p1 = mul9_i2_3_reg_313_pp0_iter2_reg;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_140_p1 = mul9_i2_2_reg_308;
        end else begin
            grp_fu_140_p1 = 'bx;
        end
    end else begin
        grp_fu_140_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_147_p1 = r_1_load_2;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_147_p1 = r_1_load;
    end else begin
        grp_fu_147_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_152_p1 = r_1_load_3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_152_p1 = r_1_load_1;
    end else begin
        grp_fu_152_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x2_ce0 = 1'b1;
    end else begin
        tiny_x2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tiny_x2_we0 = 1'b1;
    end else begin
        tiny_x2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln133_fu_177_p2 = (ap_sig_allocacmp_i_55 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign grp_fu_610_p_ce = 1'b1;

assign grp_fu_610_p_din0 = grp_fu_134_p0;

assign grp_fu_610_p_din1 = grp_fu_134_p1;

assign grp_fu_610_p_opcode = 2'd0;

assign grp_fu_614_p_ce = 1'b1;

assign grp_fu_614_p_din0 = grp_fu_140_p0;

assign grp_fu_614_p_din1 = grp_fu_140_p1;

assign grp_fu_614_p_opcode = 2'd0;

assign i_64_cast22_fu_232_p1 = i_55_reg_263_pp0_iter2_reg;

assign icmp_ln133_fu_171_p2 = ((ap_sig_allocacmp_i_55 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln136_5_fu_212_p2 = (tmp_s_reg_272 | 6'd2);

assign or_ln136_6_fu_222_p2 = (tmp_s_reg_272 | 6'd3);

assign or_ln136_fu_196_p2 = (tmp_s_fu_183_p3 | 6'd1);

assign tiny_x2_address0 = i_64_cast22_fu_232_p1;

assign tiny_x2_d0 = grp_fu_614_p_dout0;

assign tmp_s_fu_183_p3 = {{ap_sig_allocacmp_i_55}, {2'd0}};

assign zext_ln136_24_fu_202_p1 = or_ln136_fu_196_p2;

assign zext_ln136_25_fu_217_p1 = or_ln136_5_fu_212_p2;

assign zext_ln136_26_fu_227_p1 = or_ln136_6_fu_222_p2;

assign zext_ln136_fu_191_p1 = tmp_s_fu_183_p3;

always @ (posedge ap_clk) begin
    tmp_s_reg_272[1:0] <= 2'b00;
end

endmodule //tracking_backward_pass_2_Pipeline_VITIS_LOOP_133_130
