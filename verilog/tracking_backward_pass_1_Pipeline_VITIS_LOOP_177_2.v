// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tracking_backward_pass_1_Pipeline_VITIS_LOOP_177_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_col_0,
        r_col_1,
        r_col_2,
        r_col_3,
        u1_0_load,
        u1_1_load,
        u1_2_load,
        u1_3_load,
        u2_0,
        u2_0_ap_vld,
        u2_1,
        u2_1_ap_vld,
        u2_2,
        u2_2_ap_vld,
        u2_3,
        u2_3_ap_vld,
        grp_fu_770_p_din0,
        grp_fu_770_p_din1,
        grp_fu_770_p_opcode,
        grp_fu_770_p_dout0,
        grp_fu_770_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] r_col_0;
input  [31:0] r_col_1;
input  [31:0] r_col_2;
input  [31:0] r_col_3;
input  [31:0] u1_0_load;
input  [31:0] u1_1_load;
input  [31:0] u1_2_load;
input  [31:0] u1_3_load;
output  [31:0] u2_0;
output   u2_0_ap_vld;
output  [31:0] u2_1;
output   u2_1_ap_vld;
output  [31:0] u2_2;
output   u2_2_ap_vld;
output  [31:0] u2_3;
output   u2_3_ap_vld;
output  [31:0] grp_fu_770_p_din0;
output  [31:0] grp_fu_770_p_din1;
output  [0:0] grp_fu_770_p_opcode;
input  [31:0] grp_fu_770_p_dout0;
output   grp_fu_770_p_ce;

reg ap_idle;
reg u2_0_ap_vld;
reg u2_1_ap_vld;
reg u2_2_ap_vld;
reg u2_3_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln177_fu_122_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [1:0] trunc_ln178_fu_134_p1;
reg   [1:0] trunc_ln178_reg_207;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] tmp_fu_138_p6;
wire   [31:0] tmp_s_fu_153_p6;
wire    ap_block_pp0_stage0;
reg   [2:0] j_fu_58;
wire   [2:0] add_ln177_fu_128_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_18;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tracking_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U254(
    .din0(r_col_0),
    .din1(r_col_1),
    .din2(r_col_2),
    .din3(r_col_3),
    .din4(trunc_ln178_fu_134_p1),
    .dout(tmp_fu_138_p6)
);

tracking_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U255(
    .din0(u1_0_load),
    .din1(u1_1_load),
    .din2(u1_2_load),
    .din3(u1_3_load),
    .din4(trunc_ln178_fu_134_p1),
    .dout(tmp_s_fu_153_p6)
);

tracking_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln177_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_58 <= add_ln177_fu_128_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_58 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_fu_122_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln178_reg_207 <= trunc_ln178_fu_134_p1;
    end
end

always @ (*) begin
    if (((icmp_ln177_fu_122_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_18 = 3'd0;
    end else begin
        ap_sig_allocacmp_j_18 = j_fu_58;
    end
end

always @ (*) begin
    if (((trunc_ln178_reg_207 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u2_0_ap_vld = 1'b1;
    end else begin
        u2_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln178_reg_207 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u2_1_ap_vld = 1'b1;
    end else begin
        u2_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln178_reg_207 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u2_2_ap_vld = 1'b1;
    end else begin
        u2_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln178_reg_207 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u2_3_ap_vld = 1'b1;
    end else begin
        u2_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln177_fu_128_p2 = (ap_sig_allocacmp_j_18 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_770_p_ce = 1'b1;

assign grp_fu_770_p_din0 = tmp_fu_138_p6;

assign grp_fu_770_p_din1 = tmp_s_fu_153_p6;

assign grp_fu_770_p_opcode = 2'd0;

assign icmp_ln177_fu_122_p2 = ((ap_sig_allocacmp_j_18 == 3'd4) ? 1'b1 : 1'b0);

assign trunc_ln178_fu_134_p1 = ap_sig_allocacmp_j_18[1:0];

assign u2_0 = grp_fu_770_p_dout0;

assign u2_1 = grp_fu_770_p_dout0;

assign u2_2 = grp_fu_770_p_dout0;

assign u2_3 = grp_fu_770_p_dout0;

endmodule //tracking_backward_pass_1_Pipeline_VITIS_LOOP_177_2
